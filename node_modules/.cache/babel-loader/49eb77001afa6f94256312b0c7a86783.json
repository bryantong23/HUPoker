{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\";\nvar values = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"];\n\nclass Hand extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.handName = (holeCards, flop, turn, river) => {\n      if (flop.length === 0) return this.evaluateHoleCards(holeCards);else if (turn.length === 0) return this.evaluateFlop(holeCards, flop);else if (river.length === 0) return this.evaluateTurn(holeCards, flop, turn);else return this.evaluateRiver(holeCards, flop, turn, river);\n    };\n\n    this.evaluateHoleCards = holeCards => {\n      if (holeCards[0].substr(0, 1) === holecards[1].substr(0, 1)) return \"Pair of \" + holeCards[0].substr(0, 1);\n    };\n\n    this.evaluateFlop = (holeCards, flop) => {};\n\n    this.evaluateTurn = (holeCards, flop, turn) => {};\n\n    this.evaluateRiver = (holeCards, flop, turn, river) => {};\n  }\n\n  render() {\n    const {\n      dealHoleCards,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.handName()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 32\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","values","Hand","handName","holeCards","flop","turn","river","length","evaluateHoleCards","evaluateFlop","evaluateTurn","evaluateRiver","substr","holecards","render","dealHoleCards","props"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,IAAIC,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,CAAb;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAAA;AAAA;;AAAA,SAC3BG,QAD2B,GAChB,CAACC,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,KAAxB,KAAkC;AAC3C,UAAIF,IAAI,CAACG,MAAL,KAAgB,CAApB,EAAuB,OAAO,KAAKC,iBAAL,CAAuBL,SAAvB,CAAP,CAAvB,KACK,IAAIE,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB,OAAO,KAAKE,YAAL,CAAkBN,SAAlB,EAA6BC,IAA7B,CAAP,CAAvB,KACA,IAAIE,KAAK,CAACC,MAAN,KAAiB,CAArB,EACH,OAAO,KAAKG,YAAL,CAAkBP,SAAlB,EAA6BC,IAA7B,EAAmCC,IAAnC,CAAP,CADG,KAEA,OAAO,KAAKM,aAAL,CAAmBR,SAAnB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,KAA1C,CAAP;AACN,KAP0B;;AAAA,SAS3BE,iBAT2B,GASNL,SAAD,IAAe;AACjC,UAAIA,SAAS,CAAC,CAAD,CAAT,CAAaS,MAAb,CAAoB,CAApB,EAAuB,CAAvB,MAA8BC,SAAS,CAAC,CAAD,CAAT,CAAaD,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAlC,EACE,OAAO,aAAaT,SAAS,CAAC,CAAD,CAAT,CAAaS,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAApB;AACH,KAZ0B;;AAAA,SAc3BH,YAd2B,GAcZ,CAACN,SAAD,EAAYC,IAAZ,KAAqB,CAAE,CAdX;;AAAA,SAgB3BM,YAhB2B,GAgBZ,CAACP,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,KAA2B,CAAE,CAhBjB;;AAAA,SAkB3BM,aAlB2B,GAkBX,CAACR,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,KAAxB,KAAkC,CAAE,CAlBzB;AAAA;;AAoB3BQ,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,aAAF;AAAiBZ,MAAAA,SAAjB;AAA4BC,MAAAA,IAA5B;AAAkCC,MAAAA,IAAlC;AAAwCC,MAAAA;AAAxC,QAAkD,KAAKU,KAA7D;AACA,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,6BACE;AAAA,kBAAOD,aAAa,gBAAG;AAAA,oBAAI,KAAKb,QAAL;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAAH,GAA8B;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AA3B0B;;AA8B7B,eAAeD,IAAf","sourcesContent":["import React, { Component } from \"react\";\n\nvar values = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"];\n\nclass Hand extends Component {\n  handName = (holeCards, flop, turn, river) => {\n    if (flop.length === 0) return this.evaluateHoleCards(holeCards);\n    else if (turn.length === 0) return this.evaluateFlop(holeCards, flop);\n    else if (river.length === 0)\n      return this.evaluateTurn(holeCards, flop, turn);\n    else return this.evaluateRiver(holeCards, flop, turn, river);\n  };\n\n  evaluateHoleCards = (holeCards) => {\n    if (holeCards[0].substr(0, 1) === holecards[1].substr(0, 1))\n      return \"Pair of \" + holeCards[0].substr(0, 1);\n  };\n\n  evaluateFlop = (holeCards, flop) => {};\n\n  evaluateTurn = (holeCards, flop, turn) => {};\n\n  evaluateRiver = (holeCards, flop, turn, river) => {};\n\n  render() {\n    const { dealHoleCards, holeCards, flop, turn, river } = this.props;\n    return (\n      <React.Fragment>\n        <span>{dealHoleCards ? <p>{this.handName()}</p> : null}</span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}