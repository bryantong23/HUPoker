{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/App.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = () => {\n      const players = this.state.players;\n      players[0].turn = false;\n    };\n\n    this.handleCall = () => {\n      const players = this.state.players;\n      players[0].stackSize -= this.state.betOutstanding;\n      players[0].turn = false;\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({\n        potSize: newPotSize\n      });\n    };\n\n    this.handleClickRaise = () => {\n      const players = this.state.players;\n      players[0].viewText = !players[0].viewText;\n      this.setState({\n        players\n      });\n    };\n\n    this.handleRaise = amount => {\n      const raiseAmount = parseInt(amount);\n      const players = this.state.players;\n      players[0].stackSize -= raiseAmount;\n      players[0].viewText = !players[0].viewText;\n      players[0].turn = false;\n      const newBetOutstanding = raiseAmount - this.state.betOutstanding;\n      const newPotSize = this.state.potSize + raiseAmount;\n      this.setState({\n        betOutstanding: newBetOutstanding\n      });\n      this.setState({\n        potSize: newPotSize\n      });\n      this.setState({\n        players\n      });\n    };\n\n    this.handleFold = () => {\n      const players = this.state.players;\n      players[0].turn = false;\n      this.finishHand();\n    };\n\n    this.updateBlinds = () => {\n      const sb = parseInt(document.getElementById(\"sb\").value);\n      const bb = parseInt(document.getElementById(\"bb\").value);\n      this.setState({\n        smallBlind: sb,\n        bigBlind: bb\n      });\n    };\n\n    this.updateStack = () => {\n      const ss = parseInt(document.getElementById(\"ss\").value);\n      this.setState({\n        startingStack: ss\n      });\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].stackSize = ss;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.botAction = () => {\n      if (this.state.betOutstanding === 0) {\n        this.state.players[0].turn = true;\n      } else {\n        this.state.players[1].stackSize -= this.state.betOutstanding;\n        this.state.players[1].betAmount = this.state.players[0].betAmount;\n        this.state.potSize += this.state.betOutstanding;\n        this.state.players[0].turn = true;\n        this.setState({\n          betOutstanding: 0\n        });\n      }\n    };\n\n    this.startGame = () => {\n      if (this.state.bigBlind > this.state.smallBlind && this.state.startingStack >= this.state.bigBlind) {\n        //while (!this.state.isPaused){\n        const newPot = this.state.smallBlind + this.state.bigBlind;\n        this.setState({\n          potSize: newPot\n        });\n        this.getDeck();\n        this.dealHoleCards();\n        this.dealFlop();\n        this.dealTurn();\n        this.dealRiver(); //this.finishHand();\n        //continue;\n        //}\n      } else {\n        alert(\"Please make sure game settings are valid.\");\n      }\n    };\n\n    this.pauseGame = () => {\n      const pause = !this.state.isPaused;\n      this.setState({\n        isPaused: pause\n      });\n    };\n\n    this.getDeck = async () => {\n      const data = await axios.get(API_URL).then(({\n        data\n      }) => data);\n      const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n      this.setState({\n        cards\n      });\n    };\n\n    this.dealHoleCards = () => {\n      this.setState({\n        betOutstanding: this.state.smallBlind\n      });\n\n      if (this.state.cards.length !== 0) {\n        const playerCards = this.state.cards.slice(0, 2);\n        const players = this.state.players;\n        players[0].playerCards = playerCards;\n        const botCards = this.state.cards.slice(2, 4);\n        players[1].botCards = botCards;\n\n        if (players[0].position === 0) {\n          players[0].turn = true;\n        } else {\n          this.botAction();\n        }\n      }\n    };\n\n    this.dealFlop = () => {\n      const flop = this.state.cards.slice(4, 7);\n      this.setState({\n        flop: flop\n      });\n    };\n\n    this.dealTurn = () => {\n      const turn = this.state.cards.slice(7, 8);\n      this.setState({\n        turn: turn\n      });\n    };\n\n    this.dealRiver = () => {\n      const river = this.state.cards.slice(8, 9);\n      this.setState({\n        river: river\n      });\n    };\n\n    this.finishHand = () => {\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].turn = false;\n        players[i].position = 1 - players[i].position;\n      }\n    };\n\n    this.state = {\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      players: [{\n        id: 1,\n        name: \"Your name\",\n        stackSize: 1000,\n        viewText: false,\n        playerCards: [],\n        position: 0,\n        turn: false,\n        betAmount: 0\n      }, {\n        id: 2,\n        name: \"Bot\",\n        stackSize: 1000,\n        botCards: [],\n        position: 1,\n        turn: false,\n        betAmount: 0\n      }],\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0\n    };\n  }\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({\n      data\n    }) => data);\n    const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n    this.setState({\n      cards\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"HUPoker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Game settings:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"sb\",\n            children: \"Small blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"sb\",\n            name: \"sb\",\n            defaultValue: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bb\",\n            children: \"Big blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"bb\",\n            name: \"bb\",\n            defaultValue: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateBlinds,\n            children: \"Update Blinds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"ss\",\n            children: \"Stack size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"ss\",\n            name: \"ss\",\n            defaultValue: \"1000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateStack,\n            children: \"Update Stack\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            onClick: this.startGame,\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            onClick: this.pauseGame,\n            children: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Players, {\n          players: this.state.players,\n          onCheck: this.handleCheck,\n          onCall: this.handleCall,\n          onRaise: this.handleClickRaise,\n          onFold: this.handleFold,\n          onRaised: this.handleRaise\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"pot\",\n          children: \"Pot size: \" + this.state.potSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HoleCards, {\n        holeCards: this.state.players[0].playerCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        dealFlop: this.state.dealFlop,\n        dealTurn: this.state.dealTurn,\n        dealRiver: this.state.dealRiver,\n        flop: this.state.flop,\n        turn: this.state.turn,\n        river: this.state.river\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/App.js"],"names":["PlayerBanner","Players","React","Component","axios","Card","HoleCards","Board","API_URL","App","constructor","props","handleCheck","players","state","turn","handleCall","stackSize","betOutstanding","newPotSize","potSize","setState","handleClickRaise","viewText","handleRaise","amount","raiseAmount","parseInt","newBetOutstanding","handleFold","finishHand","updateBlinds","sb","document","getElementById","value","bb","smallBlind","bigBlind","updateStack","ss","startingStack","i","length","botAction","betAmount","startGame","newPot","getDeck","dealHoleCards","dealFlop","dealTurn","dealRiver","alert","pauseGame","pause","isPaused","data","get","then","cards","deck_id","e","playerCards","slice","botCards","position","flop","river","id","name","componentDidMount","render"],"mappings":"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","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\n\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      players: [\n        {\n          id: 1,\n          name: \"Your name\",\n          stackSize: 1000,\n          viewText: false,\n          playerCards: [],\n          position: 0,\n          turn: false,\n          betAmount: 0,\n        },\n        {\n          id: 2,\n          name: \"Bot\",\n          stackSize: 1000,\n          botCards: [],\n          position: 1,\n          turn: false,\n          betAmount: 0,\n        },\n      ],\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0,\n    };\n  }\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    this.setState({ cards });\n  }\n\n  handleCheck = () => {\n    const players = this.state.players;\n    players[0].turn = false;\n  };\n\n  handleCall = () => {\n    const players = this.state.players;\n    players[0].stackSize -= this.state.betOutstanding;\n    players[0].turn = false;\n    const newPotSize = this.state.potSize + this.state.betOutstanding;\n    this.setState({ potSize: newPotSize });\n  };\n\n  handleClickRaise = () => {\n    const players = this.state.players;\n    players[0].viewText = !players[0].viewText;\n    this.setState({ players });\n  };\n\n  handleRaise = (amount) => {\n    const raiseAmount = parseInt(amount);\n    const players = this.state.players;\n    players[0].stackSize -= raiseAmount;\n    players[0].viewText = !players[0].viewText;\n    players[0].turn = false;\n    const newBetOutstanding = raiseAmount - this.state.betOutstanding;\n    const newPotSize = this.state.potSize + raiseAmount;\n    this.setState({ betOutstanding: newBetOutstanding });\n    this.setState({ potSize: newPotSize });\n    this.setState({ players });\n  };\n\n  handleFold = () => {\n    const players = this.state.players;\n    players[0].turn = false;\n    this.finishHand();\n  };\n\n  updateBlinds = () => {\n    const sb = parseInt(document.getElementById(\"sb\").value);\n    const bb = parseInt(document.getElementById(\"bb\").value);\n    this.setState({ smallBlind: sb, bigBlind: bb });\n  };\n\n  updateStack = () => {\n    const ss = parseInt(document.getElementById(\"ss\").value);\n    this.setState({ startingStack: ss });\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].stackSize = ss;\n    }\n    this.setState({ players });\n  };\n\n  botAction = () => {\n    if (this.state.betOutstanding === 0){\n      this.state.players[0].turn = true;\n    }\n    else {\n      this.state.players[1].stackSize -= this.state.betOutstanding;\n      this.state.players[1].betAmount = this.state.players[0].betAmount;\n      this.state.potSize += this.state.betOutstanding;\n      this.state.players[0].turn = true;\n      this.setState({betOutstanding: 0});\n    }\n  }\n\n  startGame = () => {\n    if (\n      this.state.bigBlind > this.state.smallBlind &&\n      this.state.startingStack >= this.state.bigBlind\n    ) {\n      //while (!this.state.isPaused){\n      const newPot = this.state.smallBlind + this.state.bigBlind;\n      this.setState({ potSize: newPot });\n      this.getDeck();\n      this.dealHoleCards();\n      this.dealFlop();\n      this.dealTurn();\n      this.dealRiver();\n      //this.finishHand();\n      //continue;\n\n      //}\n    } else {\n      alert(\"Please make sure game settings are valid.\");\n    }\n  };\n\n  pauseGame = () => {\n    const pause = !this.state.isPaused;\n    this.setState({ isPaused: pause });\n  };\n\n  getDeck = async () => {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    this.setState({ cards });\n  };\n\n  dealHoleCards = () => {\n    this.setState({ betOutstanding: this.state.smallBlind });\n    if (this.state.cards.length !== 0) {\n      const playerCards = this.state.cards.slice(0, 2);\n      const players = this.state.players;\n      players[0].playerCards = playerCards;\n\n      const botCards = this.state.cards.slice(2, 4);\n      players[1].botCards = botCards;\n\n      if (players[0].position === 0) {\n        players[0].turn = true;\n      }\n      else {\n        this.botAction();\n      }      \n    }\n  };\n\n  dealFlop = () => {\n    const flop = this.state.cards.slice(4, 7);\n    this.setState({ flop: flop });\n  };\n\n  dealTurn = () => {\n    const turn = this.state.cards.slice(7, 8);\n    this.setState({ turn: turn });\n  };\n\n  dealRiver = () => {\n    const river = this.state.cards.slice(8, 9);\n    this.setState({ river: river });\n  };\n\n  finishHand = () => {\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].turn = false;\n      players[i].position = 1 - players[i].position;\n    }\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <header>\n          <h1>HUPoker</h1>\n          <div>\n            <b>Game settings:</b>\n            <br></br>\n            <label htmlFor=\"sb\">Small blind:</label>\n            <input type=\"text\" id=\"sb\" name=\"sb\" defaultValue=\"5\"></input>\n            <br></br>\n            <label htmlFor=\"bb\">Big blind:</label>\n            <input type=\"text\" id=\"bb\" name=\"bb\" defaultValue=\"10\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateBlinds}\n            >\n              Update Blinds\n            </button>\n            <br></br>\n            <label htmlFor=\"ss\">Stack size:</label>\n            <input type=\"text\" id=\"ss\" name=\"ss\" defaultValue=\"1000\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateStack}\n            >\n              Update Stack\n            </button>\n            <br></br>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              onClick={this.startGame}\n            >\n              Start Game\n            </button>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              onClick={this.pauseGame}\n            >\n              Pause\n            </button>\n          </div>\n        </header>\n        <main className=\"container\">\n          <Players\n            players={this.state.players}\n            onCheck={this.handleCheck}\n            onCall={this.handleCall}\n            onRaise={this.handleClickRaise}\n            onFold={this.handleFold}\n            onRaised={this.handleRaise}\n          />\n          <p id=\"pot\">{\"Pot size: \" + this.state.potSize}</p>\n        </main>\n        <HoleCards holeCards={this.state.players[0].playerCards}></HoleCards>\n        <Board\n          dealFlop={this.state.dealFlop}\n          dealTurn={this.state.dealTurn}\n          dealRiver={this.state.dealRiver}\n          flop={this.state.flop}\n          turn={this.state.turn}\n          river={this.state.river}\n        ></Board>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}