{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/App.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  // Constructor that initializes all state variables\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = () => {\n      // If it is postflop\n      if (this.state.dealFlop) {\n        // Only handle checks when betOutstanding = 0\n        // If player is BB\n        if (this.state.betOutstanding === 0 && this.state.players[0].position === 1) {\n          // It is now the bot's turn\n          const players = this.state.players;\n          players[0].turn = false;\n          players[1].turn = true;\n          this.setState({\n            players\n          });\n          setTimeout(() => {\n            this.botAction();\n          }, 3000); // If player is D\n        } else if (this.state.betOutstanding === 0 && this.state.players[0].position === 0) {\n          // Deal next card and have the bot act because this means the bot is BB\n          const players = this.state.players;\n          players[0].turn = false;\n          players[1].turn = true;\n          this.setState({\n            players\n          });\n          setTimeout(() => {\n            this.dealNext();\n          }, 1500);\n          setTimeout(() => {\n            this.botAction();\n          }, 3000);\n        }\n      } // If it is preflop\n      else if (this.state.betOutstanding === 0 && this.state.players[0].position === 1) {\n          // Deal next card and it is also player's turn next since they are out of position\n          const players = this.state.players;\n          players[0].turn = true;\n          players[1].turn = false;\n          this.setState({\n            players\n          }, () => {\n            setTimeout(() => {\n              this.dealNext();\n            }, 1500);\n          });\n        }\n    };\n\n    this.handleCall = () => {\n      // Only handle call if betOutstanding != 0\n      if (this.state.betOutstanding !== 0) {\n        const players = this.state.players; // If call amount is greater than player stack size then just go all in\n\n        if (this.state.betOutstanding > players[0].stackSize) {\n          players[0].betAmount = players[0].stackSize;\n          players[0].stackSize = 0;\n        } // Else remove call amount from player stack size\n        else {\n            players[0].stackSize -= this.state.betOutstanding;\n            players[0].betAmount = players[1].betAmount;\n          } // Update state and variables, deal next card(s), and have either bot or player go\n\n\n        if (players[0].position === 0) {\n          players[0].turn = false;\n          players[1].turn = true;\n        } else {\n          players[0].turn = true;\n          players[1].turn = false;\n        }\n\n        const newPotSize = this.state.potSize + this.state.betOutstanding;\n        this.setState({\n          potSize: newPotSize\n        }, () => {\n          this.setState({\n            betOutstanding: 0\n          }, () => {\n            setTimeout(() => {\n              this.dealNext();\n            }, 1500);\n\n            if (players[0].position === 0) {\n              setTimeout(() => {\n                this.botAction();\n              }, 3000);\n            }\n          });\n        });\n      }\n    };\n\n    this.handleClickRaise = () => {\n      const players = this.state.players; // Display raise amount input textbox\n\n      players[0].viewText = !players[0].viewText;\n      this.setState({\n        players\n      });\n    };\n\n    this.handleRaise = amount => {\n      const raiseAmount = parseInt(amount);\n      const players = this.state.players; // Can only raise max of stack size\n\n      if (raiseAmount > players[0].stackSize) raiseAmount = players[0].stackSize; // Update state and various variables, then call botAction()\n\n      players[0].stackSize -= raiseAmount;\n      players[0].stackSize += players[0].betAmount;\n      players[0].viewText = !players[0].viewText;\n      players[0].turn = false;\n      players[1].turn = true;\n      const newBetOutstanding = raiseAmount - this.state.players[1].betAmount;\n      const newPotSize = this.state.potSize + raiseAmount - players[0].betAmount;\n      players[0].betAmount = raiseAmount;\n      this.setState({\n        betOutstanding: newBetOutstanding\n      }, () => {\n        this.setState({\n          potSize: newPotSize\n        }, () => {\n          this.setState({\n            players\n          }, () => {\n            setTimeout(() => {\n              this.botAction();\n            }, 3000);\n          });\n        });\n      });\n    };\n\n    this.handleFold = () => {\n      if (this.state.betOutstanding !== 0) {\n        const players = this.state.players;\n        players[0].turn = false;\n        players[1].stackSize += this.state.potSize;\n        this.setState({\n          players\n        }, () => {\n          this.setState({\n            potSize: 0\n          }, () => {\n            this.finishHand();\n          });\n        });\n      }\n    };\n\n    this.updateBlinds = () => {\n      const sb = parseInt(document.getElementById(\"sb\").value);\n      const bb = parseInt(document.getElementById(\"bb\").value);\n      this.setState({\n        smallBlind: sb,\n        bigBlind: bb\n      });\n    };\n\n    this.updateStack = () => {\n      const ss = parseInt(document.getElementById(\"ss\").value);\n      this.setState({\n        startingStack: ss\n      });\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].stackSize = ss;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.botAction = () => {\n      const players = this.state.players;\n\n      if (this.state.betOutstanding === 0 && players[1].position === 1) {\n        players[0].turn = true;\n        players[1].turn = false;\n        this.setState({\n          players\n        });\n      } else if (this.state.betOutstanding === 0 && players[1].position === 0) {\n        players[0].turn = true;\n        players[1].turn = false;\n        this.setState({\n          players\n        });\n        setTimeout(() => {\n          this.dealNext();\n        }, 1500);\n      } else {\n        players[1].stackSize -= this.state.betOutstanding;\n        players[1].betAmount = players[0].betAmount;\n        players[0].turn = true;\n        const newPotSize = this.state.potSize + this.state.betOutstanding;\n        this.setState({\n          potSize: newPotSize\n        });\n        this.setState({\n          players\n        });\n        this.setState({\n          betOutstanding: 0\n        });\n\n        if (this.state.dealFlop) {\n          setTimeout(() => {\n            this.dealNext();\n          }, 1500);\n        }\n      }\n    };\n\n    this.startGame = () => {\n      this.setState({\n        startedGame: true\n      }, () => {\n        if (this.state.bigBlind > this.state.smallBlind && this.state.startingStack >= this.state.bigBlind) {\n          this.dealHoleCards(); //while (!this.state.isPaused){\n          //this.dealFlop();\n          //this.dealTurn();\n          //this.dealRiver();\n          //this.finishHand();\n          //continue;\n          //}\n        } else {\n          alert(\"Please make sure game settings are valid.\");\n        }\n      });\n    };\n\n    this.pauseGame = () => {\n      const pause = !this.state.isPaused;\n      this.setState({\n        isPaused: pause\n      });\n    };\n\n    this.dealHoleCards = () => {\n      this.setState({\n        dealFlop: false\n      }, () => {\n        this.setState({\n          dealTurn: false\n        }, () => {\n          this.setState({\n            dealRiver: false\n          }, () => {\n            this.setState({\n              showBotCards: false\n            }, () => {\n              //this.getDeck();\n              const newPot = this.state.smallBlind + this.state.bigBlind;\n              const sb = this.state.smallBlind;\n              this.setState({\n                potSize: newPot\n              }, () => {\n                this.setState({\n                  betOutstanding: sb\n                }, () => {\n                  this.setState({\n                    finishedHand: false\n                  }, () => {\n                    this.setState({\n                      flop: []\n                    }, () => {\n                      this.setState({\n                        turn: []\n                      }, () => {\n                        this.setState({\n                          river: []\n                        }, () => {\n                          if (this.state.cards.length !== 0) {\n                            const playerCards = this.state.cards.slice(0, 2);\n                            const players = this.state.players;\n                            players[0].playerCards = playerCards;\n                            const botCards = this.state.cards.slice(2, 4);\n                            players[1].botCards = botCards;\n                            this.setState({\n                              players\n                            });\n                            this.preFlopBetting();\n                          }\n                        });\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    };\n\n    this.preFlopBetting = () => {\n      const players = this.state.players;\n\n      if (players[0].position === 0) {\n        players[0].turn = true;\n        players[0].stackSize -= this.state.smallBlind;\n        players[0].betAmount = this.state.smallBlind;\n        players[1].betAmount = this.state.bigBlind;\n        players[1].stackSize -= this.state.bigBlind;\n        this.setState({\n          players\n        });\n      } else {\n        players[1].turn = true;\n        players[0].betAmount = this.state.bigBlind;\n        players[0].stackSize -= this.state.bigBlind;\n        players[1].betAmount = this.state.smallBlind;\n        players[1].stackSize -= this.state.smallBlind;\n        this.setState({\n          players\n        });\n        setTimeout(() => {\n          this.botAction();\n        }, 3000);\n      } //this.dealFlop();\n\n    };\n\n    this.dealNext = () => {\n      const players = this.state.players;\n      players[0].betAmount = 0;\n      players[1].betAmount = 0;\n      this.setState({\n        players\n      }, () => {\n        this.setState({\n          betOutstanding: 0\n        }, () => {\n          if (this.state.flop.length === 0) this.dealFlop();else if (this.state.turn.length === 0) this.dealTurn();else if (this.state.river.length === 0) this.dealRiver();else this.showDown();\n        });\n      });\n    };\n\n    this.dealFlop = () => {\n      this.resetBetAmount();\n      const flop = this.state.cards.slice(4, 7);\n      this.setState({\n        dealFlop: true\n      });\n      this.setState({\n        flop: flop\n      });\n    };\n\n    this.dealTurn = () => {\n      this.resetBetAmount();\n      const turn = this.state.cards.slice(7, 8);\n      this.setState({\n        dealTurn: true\n      });\n      this.setState({\n        turn: turn\n      });\n    };\n\n    this.dealRiver = () => {\n      this.resetBetAmount();\n      const river = this.state.cards.slice(8, 9);\n      this.setState({\n        dealRiver: true\n      });\n      this.setState({\n        river: river\n      });\n    };\n\n    this.showDown = () => {\n      this.setState({\n        showBotCards: true\n      }, () => {\n        this.setState({\n          finishedHand: true\n        }, () => {//this.finishHand();\n        });\n      });\n    };\n\n    this.finishHand = () => {\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].turn = false;\n        players[i].position = 1 - players[i].position;\n      }\n\n      this.setState({\n        players\n      }, () => {\n        this.setState({\n          finishedHand: true\n        }, () => {//this.componentDidMount();\n        });\n      });\n    };\n\n    this.resetBetAmount = () => {\n      const players = this.state.players;\n\n      for (var i = 0; i < players.length; i++) {\n        players[i].betAmount = 0;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.state = {\n      // Game specifications\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      // List of players and attributes\n      players: [{\n        id: 1,\n        name: \"Your name\",\n        stackSize: 1000,\n        viewText: false,\n        playerCards: [],\n        position: 0,\n        turn: false,\n        betAmount: 0\n      }, {\n        id: 2,\n        name: \"Bot\",\n        stackSize: 1000,\n        botCards: [],\n        position: 1,\n        turn: false,\n        betAmount: 0\n      }],\n      // Arrays to store cards\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      // Various attributes to determine when to perform specific actions\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0,\n      showBotCards: false,\n      finishedHand: false,\n      startedGame: false\n    };\n  } // Retrieve initial shuffled deck of cards upon component mount using DeckOfCards API\n\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({\n      data\n    }) => data);\n    const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n    this.setState({\n      cards\n    });\n  } // Handle check from player\n\n\n  async dealNextHand() {\n    const data = await axios.get(API_URL).then(({\n      data\n    }) => data);\n    const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n    this.setState({\n      cards\n    }, () => {\n      this.finishHand();\n      this.dealHoleCards();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"HUPoker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Game settings:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"sb\",\n            children: \"Small blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"sb\",\n            name: \"sb\",\n            defaultValue: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bb\",\n            children: \"Big blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"bb\",\n            name: \"bb\",\n            defaultValue: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 449,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateBlinds,\n            children: \"Update Blinds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 457,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"ss\",\n            children: \"Stack size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 458,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"ss\",\n            name: \"ss\",\n            defaultValue: \"1000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateStack,\n            children: \"Update Stack\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            disabled: this.state.startedGame ? 1 : 0,\n            onClick: this.startGame,\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            onClick: this.pauseGame,\n            children: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: this.state.finishedHand ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.dealNextHand(),\n              className: \"btn btn-primary btn-sm m-2\",\n              children: \"Deal Next Hand\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 17\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Players, {\n          players: this.state.players,\n          onCheck: this.handleCheck,\n          onCall: this.handleCall,\n          onRaise: this.handleClickRaise,\n          onFold: this.handleFold,\n          onRaised: this.handleRaise\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"pot\",\n          children: \"Pot size: \" + this.state.potSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HoleCards, {\n        holeCards: this.state.players[0].playerCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        dealFlop: this.state.dealFlop,\n        dealTurn: this.state.dealTurn,\n        dealRiver: this.state.dealRiver,\n        flop: this.state.flop,\n        turn: this.state.turn,\n        river: this.state.river\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.showBotCards ? /*#__PURE__*/_jsxDEV(HoleCards, {\n          holeCards: this.state.players[1].botCards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 515,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/App.js"],"names":["PlayerBanner","Players","React","Component","axios","Card","HoleCards","Board","API_URL","App","constructor","props","handleCheck","state","dealFlop","betOutstanding","players","position","turn","setState","setTimeout","botAction","dealNext","handleCall","stackSize","betAmount","newPotSize","potSize","handleClickRaise","viewText","handleRaise","amount","raiseAmount","parseInt","newBetOutstanding","handleFold","finishHand","updateBlinds","sb","document","getElementById","value","bb","smallBlind","bigBlind","updateStack","ss","startingStack","i","length","startGame","startedGame","dealHoleCards","alert","pauseGame","pause","isPaused","dealTurn","dealRiver","showBotCards","newPot","finishedHand","flop","river","cards","playerCards","slice","botCards","preFlopBetting","showDown","resetBetAmount","id","name","componentDidMount","data","get","then","deck_id","e","dealNextHand","render"],"mappings":"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","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\n\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n\n  // Constructor that initializes all state variables\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Game specifications\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      // List of players and attributes\n      players: [\n        {\n          id: 1,\n          name: \"Your name\",\n          stackSize: 1000,\n          viewText: false,\n          playerCards: [],\n          position: 0,\n          turn: false,\n          betAmount: 0,\n        },\n        {\n          id: 2,\n          name: \"Bot\",\n          stackSize: 1000,\n          botCards: [],\n          position: 1,\n          turn: false,\n          betAmount: 0,\n        },\n      ],\n      // Arrays to store cards\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      // Various attributes to determine when to perform specific actions\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0,\n      showBotCards: false,\n      finishedHand: false,\n      startedGame: false,\n    };\n  }\n\n  // Retrieve initial shuffled deck of cards upon component mount using DeckOfCards API\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    this.setState({ cards });\n  }\n\n  // Handle check from player\n  handleCheck = () => {\n    // If it is postflop\n    if (this.state.dealFlop){\n      // Only handle checks when betOutstanding = 0\n      // If player is BB\n      if (\n        this.state.betOutstanding === 0 &&\n        this.state.players[0].position === 1\n      ) {\n        // It is now the bot's turn\n        const players = this.state.players;\n        players[0].turn = false;\n        players[1].turn = true;\n        this.setState({ players });\n        setTimeout(() => {\n          this.botAction()\n        }, 3000);\n        // If player is D\n      } else if (\n        this.state.betOutstanding === 0 &&\n        this.state.players[0].position === 0\n      ) {\n        // Deal next card and have the bot act because this means the bot is BB\n        const players = this.state.players;\n        players[0].turn = false;\n        players[1].turn = true;\n        this.setState({ players });\n        setTimeout(() => {\n          this.dealNext()\n        }, 1500);\n        setTimeout(() => {\n          this.botAction()\n        }, 3000);\n      }\n    }\n    // If it is preflop\n    else if (this.state.betOutstanding === 0 && this.state.players[0].position === 1) {\n      // Deal next card and it is also player's turn next since they are out of position\n      const players = this.state.players;\n      players[0].turn = true;\n      players[1].turn = false;\n      this.setState({players}, () => {\n        setTimeout(() => {\n          this.dealNext()\n        }, 1500);\n      })\n    }\n    \n  };\n\n  // Handle call from player\n  handleCall = () => {\n    // Only handle call if betOutstanding != 0\n    if (this.state.betOutstanding !== 0) {\n      const players = this.state.players;\n      // If call amount is greater than player stack size then just go all in\n      if (this.state.betOutstanding > players[0].stackSize) {\n        players[0].betAmount = players[0].stackSize;\n        players[0].stackSize = 0;\n      }\n      // Else remove call amount from player stack size\n      else {\n        players[0].stackSize -= this.state.betOutstanding;\n        players[0].betAmount = players[1].betAmount;\n      }\n      // Update state and variables, deal next card(s), and have either bot or player go\n      if (players[0].position === 0){\n        players[0].turn = false;\n        players[1].turn = true;\n      }\n      else {\n        players[0].turn = true;\n        players[1].turn = false;\n      }\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({ potSize: newPotSize }, () => {\n        this.setState({ betOutstanding: 0 }, () => {\n          setTimeout(() => {\n            this.dealNext()\n          }, 1500);\n          if (players[0].position === 0){\n            setTimeout(() => {\n              this.botAction()\n            }, 3000);\n          }\n        });\n      });\n    }\n  };\n\n  // Handle click of raise button \n  handleClickRaise = () => {\n    const players = this.state.players;\n    // Display raise amount input textbox\n    players[0].viewText = !players[0].viewText;\n    this.setState({ players });\n  };\n\n  // Handle raise from player\n  handleRaise = (amount) => {\n    const raiseAmount = parseInt(amount);\n    const players = this.state.players;\n    // Can only raise max of stack size\n    if (raiseAmount > players[0].stackSize) raiseAmount = players[0].stackSize;\n    // Update state and various variables, then call botAction()\n    players[0].stackSize -= raiseAmount;\n    players[0].stackSize += players[0].betAmount;\n    players[0].viewText = !players[0].viewText;\n    players[0].turn = false;\n    players[1].turn = true;\n    const newBetOutstanding = raiseAmount - this.state.players[1].betAmount;\n    const newPotSize = this.state.potSize + raiseAmount - players[0].betAmount;\n    players[0].betAmount = raiseAmount;\n\n    this.setState({ betOutstanding: newBetOutstanding }, () => {\n      this.setState({ potSize: newPotSize }, () => {\n        this.setState({ players }, () => {\n          setTimeout(() => {\n            this.botAction()\n          }, 3000);\n        });\n      });\n    });\n  };\n\n  handleFold = () => {\n    if (this.state.betOutstanding !== 0){\n      const players = this.state.players;\n      players[0].turn = false;\n      players[1].stackSize += this.state.potSize;\n      this.setState({ players }, () => {\n        this.setState({ potSize: 0 }, () => {\n          this.finishHand();\n        });\n      });\n    }\n  };\n\n  updateBlinds = () => {\n    const sb = parseInt(document.getElementById(\"sb\").value);\n    const bb = parseInt(document.getElementById(\"bb\").value);\n    this.setState({ smallBlind: sb, bigBlind: bb });\n  };\n\n  updateStack = () => {\n    const ss = parseInt(document.getElementById(\"ss\").value);\n    this.setState({ startingStack: ss });\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].stackSize = ss;\n    }\n    this.setState({ players });\n  };\n\n  botAction = () => {\n    const players = this.state.players;\n    if (this.state.betOutstanding === 0 && players[1].position === 1) {\n      players[0].turn = true;\n      players[1].turn = false;\n      this.setState({ players });\n    } else if (this.state.betOutstanding === 0 && players[1].position === 0) {\n      players[0].turn = true;\n      players[1].turn = false;\n      this.setState({ players });\n      setTimeout(() => {\n        this.dealNext()\n      }, 1500);\n    } else {\n      players[1].stackSize -= this.state.betOutstanding;\n      players[1].betAmount = players[0].betAmount;\n      players[0].turn = true;\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({ potSize: newPotSize });\n      this.setState({ players });\n      this.setState({ betOutstanding: 0 });\n      if (this.state.dealFlop){\n        setTimeout(() => {\n          this.dealNext()\n        }, 1500);\n      }\n    }\n  };\n\n  startGame = () => {\n    this.setState({startedGame: true}, () => {\n      if (\n        this.state.bigBlind > this.state.smallBlind &&\n        this.state.startingStack >= this.state.bigBlind\n      ) {\n        this.dealHoleCards();\n        //while (!this.state.isPaused){\n  \n        //this.dealFlop();\n        //this.dealTurn();\n        //this.dealRiver();\n        //this.finishHand();\n        //continue;\n  \n        //}\n      } else {\n        alert(\"Please make sure game settings are valid.\");\n      }\n    })\n  };\n\n  async dealNextHand() {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    this.setState({ cards }, () => {\n      this.finishHand();\n      this.dealHoleCards();\n    });\n  };\n\n  pauseGame = () => {\n    const pause = !this.state.isPaused;\n    this.setState({ isPaused: pause });\n  };\n\n  // getDeck = async () => {\n  //   const data = await axios.get(API_URL).then(({ data }) => data);\n\n  //   const cards = await axios\n  //     .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n  //     .then((e) => e.data.cards);\n\n  //   this.setState({ cards });\n  // };\n\n  dealHoleCards = () => {\n    this.setState({ dealFlop: false }, () => {\n      this.setState({ dealTurn: false }, () => {\n        this.setState({ dealRiver: false }, () => {\n          this.setState({ showBotCards: false }, () => {\n            \n            //this.getDeck();\n            const newPot = this.state.smallBlind + this.state.bigBlind;\n            const sb = this.state.smallBlind;\n            this.setState({ potSize: newPot }, () => {\n              this.setState({ betOutstanding: sb }, () => {\n                this.setState({finishedHand: false}, () => {\n                  this.setState({flop: []}, () => {\n                    this.setState({turn: []}, () => {\n                      this.setState({river: []}, () => {\n                        if (this.state.cards.length !== 0) {\n                          const playerCards = this.state.cards.slice(0, 2);\n                          const players = this.state.players;\n                          players[0].playerCards = playerCards;\n            \n                          const botCards = this.state.cards.slice(2, 4);\n                          players[1].botCards = botCards;\n            \n                          this.setState({ players });\n            \n                          this.preFlopBetting();\n                        }\n                      })\n                    })\n                  })\n                });\n                });\n              });\n            });\n\n            \n          });\n        });\n      });\n  };\n\n  preFlopBetting = () => {\n    const players = this.state.players;\n    if (players[0].position === 0) {\n      players[0].turn = true;\n      players[0].stackSize -= this.state.smallBlind;\n      players[0].betAmount = this.state.smallBlind;\n      players[1].betAmount = this.state.bigBlind;\n      players[1].stackSize -= this.state.bigBlind;\n      this.setState({ players });\n    } else {\n      players[1].turn = true;\n      players[0].betAmount = this.state.bigBlind;\n      players[0].stackSize -= this.state.bigBlind;\n      players[1].betAmount = this.state.smallBlind;\n      players[1].stackSize -= this.state.smallBlind;\n      this.setState({ players });\n      setTimeout(() => {\n        this.botAction()\n      }, 3000);\n    }\n\n    //this.dealFlop();\n  };\n\n  dealNext = () => {\n    const players = this.state.players;\n    players[0].betAmount = 0;\n    players[1].betAmount = 0;\n    this.setState({ players }, () => {\n      this.setState({betOutstanding: 0}, () => {\n        if (this.state.flop.length === 0) this.dealFlop();\n        else if (this.state.turn.length === 0) this.dealTurn();\n        else if (this.state.river.length === 0) this.dealRiver();\n        else this.showDown();\n      })\n    });    \n  };\n\n  dealFlop = () => {\n    this.resetBetAmount();\n    const flop = this.state.cards.slice(4, 7);\n    this.setState({ dealFlop: true });\n    this.setState({ flop: flop });\n  };\n\n  dealTurn = () => {\n    this.resetBetAmount();\n    const turn = this.state.cards.slice(7, 8);\n    this.setState({ dealTurn: true });\n    this.setState({ turn: turn });\n  };\n\n  dealRiver = () => {\n    this.resetBetAmount();\n    const river = this.state.cards.slice(8, 9);\n    this.setState({ dealRiver: true });\n    this.setState({ river: river });\n  };\n\n  showDown = () => {\n    this.setState({ showBotCards: true }, () => {\n      this.setState({ finishedHand: true }, () => {\n        //this.finishHand();\n      });\n    });\n  };\n\n  finishHand = () => {\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].turn = false;\n      players[i].position = 1 - players[i].position;\n    }\n    this.setState({ players }, () => {\n      this.setState({ finishedHand: true }, () => {\n        //this.componentDidMount();\n      });\n    });\n  };\n\n  resetBetAmount = () => {\n    const players = this.state.players;\n    for (var i = 0; i < players.length; i++) {\n      players[i].betAmount = 0;\n    }\n    this.setState({ players });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <header>\n          <h1>HUPoker</h1>\n          <div>\n            <b>Game settings:</b>\n            <br></br>\n            <label htmlFor=\"sb\">Small blind:</label>\n            <input type=\"text\" id=\"sb\" name=\"sb\" defaultValue=\"5\"></input>\n            <br></br>\n            <label htmlFor=\"bb\">Big blind:</label>\n            <input type=\"text\" id=\"bb\" name=\"bb\" defaultValue=\"10\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateBlinds}\n            >\n              Update Blinds\n            </button>\n            <br></br>\n            <label htmlFor=\"ss\">Stack size:</label>\n            <input type=\"text\" id=\"ss\" name=\"ss\" defaultValue=\"1000\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateStack}\n            >\n              Update Stack\n            </button>\n            <br></br>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              disabled={this.state.startedGame? 1: 0}\n              onClick={this.startGame}\n            >\n              Start Game\n            </button>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              onClick={this.pauseGame}\n            >\n              Pause\n            </button>\n            <span>\n              {this.state.finishedHand ? (\n                <button\n                  onClick={() => this.dealNextHand()}\n                  className=\"btn btn-primary btn-sm m-2\"\n                >\n                  Deal Next Hand\n                </button>\n              ) : null}\n            </span>\n          </div>\n        </header>\n        <main className=\"container\">\n          <Players\n            players={this.state.players}\n            onCheck={this.handleCheck}\n            onCall={this.handleCall}\n            onRaise={this.handleClickRaise}\n            onFold={this.handleFold}\n            onRaised={this.handleRaise}\n          />\n          <p id=\"pot\">{\"Pot size: \" + this.state.potSize}</p>\n        </main>\n        <HoleCards holeCards={this.state.players[0].playerCards}></HoleCards>\n        <Board\n          dealFlop={this.state.dealFlop}\n          dealTurn={this.state.dealTurn}\n          dealRiver={this.state.dealRiver}\n          flop={this.state.flop}\n          turn={this.state.turn}\n          river={this.state.river}\n        ></Board>\n        <div>\n          {this.state.showBotCards ? (\n            <HoleCards holeCards={this.state.players[1].botCards}></HoleCards>\n          ) : null}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}