{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\";\n\nclass Hand extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      holeCards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"]\n    };\n\n    this.handName = (holeCards, flop, turn, river) => {\n      if (flop.length === 0) return this.evaluateHoleCards(holeCards);else if (turn.length === 0) return this.evaluateFlop(holeCards, flop);else if (river.length === 0) return this.evaluateTurn(holeCards, flop, turn);else return this.evaluateRiver(holeCards, flop, turn, river);\n    };\n\n    this.evaluateHoleCards = holeCards => {\n      if (holeCards[0].substr(0, 1) === holeCards[1].substr(0, 1)) return \"Pair of \" + holeCards[0].substr(0, 1);\n    };\n\n    this.evaluateFlop = (holeCards, flop) => {};\n\n    this.evaluateTurn = (holeCards, flop, turn) => {};\n\n    this.evaluateRiver = (holeCards, flop, turn, river) => {};\n  }\n\n  render() {\n    const {\n      dealHoleCards,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.handName()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 32\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","Hand","state","holeCards","flop","turn","river","values","handName","length","evaluateHoleCards","evaluateFlop","evaluateTurn","evaluateRiver","substr","render","dealHoleCards","props"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,IAAN,SAAmBD,SAAnB,CAA6B;AAAA;AAAA;AAAA,SAC3BE,KAD2B,GACnB;AACNC,MAAAA,SAAS,EAAE,EADL;AAENC,MAAAA,IAAI,EAAE,EAFA;AAGNC,MAAAA,IAAI,EAAE,EAHA;AAINC,MAAAA,KAAK,EAAE,EAJD;AAKNC,MAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D;AALF,KADmB;;AAAA,SAQ3BC,QAR2B,GAQhB,CAACL,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,KAAxB,KAAkC;AAC3C,UAAIF,IAAI,CAACK,MAAL,KAAgB,CAApB,EAAuB,OAAO,KAAKC,iBAAL,CAAuBP,SAAvB,CAAP,CAAvB,KACK,IAAIE,IAAI,CAACI,MAAL,KAAgB,CAApB,EAAuB,OAAO,KAAKE,YAAL,CAAkBR,SAAlB,EAA6BC,IAA7B,CAAP,CAAvB,KACA,IAAIE,KAAK,CAACG,MAAN,KAAiB,CAArB,EACH,OAAO,KAAKG,YAAL,CAAkBT,SAAlB,EAA6BC,IAA7B,EAAmCC,IAAnC,CAAP,CADG,KAEA,OAAO,KAAKQ,aAAL,CAAmBV,SAAnB,EAA8BC,IAA9B,EAAoCC,IAApC,EAA0CC,KAA1C,CAAP;AACN,KAd0B;;AAAA,SAgB3BI,iBAhB2B,GAgBNP,SAAD,IAAe;AACjC,UAAIA,SAAS,CAAC,CAAD,CAAT,CAAaW,MAAb,CAAoB,CAApB,EAAuB,CAAvB,MAA8BX,SAAS,CAAC,CAAD,CAAT,CAAaW,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAAlC,EACE,OAAO,aAAaX,SAAS,CAAC,CAAD,CAAT,CAAaW,MAAb,CAAoB,CAApB,EAAuB,CAAvB,CAApB;AACH,KAnB0B;;AAAA,SAqB3BH,YArB2B,GAqBZ,CAACR,SAAD,EAAYC,IAAZ,KAAqB,CAAE,CArBX;;AAAA,SAuB3BQ,YAvB2B,GAuBZ,CAACT,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,KAA2B,CAAE,CAvBjB;;AAAA,SAyB3BQ,aAzB2B,GAyBX,CAACV,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,KAAxB,KAAkC,CAAE,CAzBzB;AAAA;;AA2B3BS,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA,aAAF;AAAiBb,MAAAA,SAAjB;AAA4BC,MAAAA,IAA5B;AAAkCC,MAAAA,IAAlC;AAAwCC,MAAAA;AAAxC,QAAkD,KAAKW,KAA7D;AACA,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,6BACE;AAAA,kBAAOD,aAAa,gBAAG;AAAA,oBAAI,KAAKR,QAAL;AAAJ;AAAA;AAAA;AAAA;AAAA,gBAAH,GAA8B;AAAlD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAlC0B;;AAqC7B,eAAeP,IAAf","sourcesContent":["import React, { Component } from \"react\";\n\nclass Hand extends Component {\n  state = {\n    holeCards: [],\n    flop: [],\n    turn: [],\n    river: [],\n    values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n  };\n  handName = (holeCards, flop, turn, river) => {\n    if (flop.length === 0) return this.evaluateHoleCards(holeCards);\n    else if (turn.length === 0) return this.evaluateFlop(holeCards, flop);\n    else if (river.length === 0)\n      return this.evaluateTurn(holeCards, flop, turn);\n    else return this.evaluateRiver(holeCards, flop, turn, river);\n  };\n\n  evaluateHoleCards = (holeCards) => {\n    if (holeCards[0].substr(0, 1) === holeCards[1].substr(0, 1))\n      return \"Pair of \" + holeCards[0].substr(0, 1);\n  };\n\n  evaluateFlop = (holeCards, flop) => {};\n\n  evaluateTurn = (holeCards, flop, turn) => {};\n\n  evaluateRiver = (holeCards, flop, turn, river) => {};\n\n  render() {\n    const { dealHoleCards, holeCards, flop, turn, river } = this.props;\n    return (\n      <React.Fragment>\n        <span>{dealHoleCards ? <p>{this.handName()}</p> : null}</span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}