{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\";\nimport { evaluateHoleCards } from \"./HandEvaluator\"; // Component to represent each player's hand\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n\n    this.evaluateFiveCardHand = cards => {\n      if (this.isRoyalFlush(cards)) return 9;\n      if (this.isStraightFlush(cards)) return 8;\n      if (this.isFourOfAKind(cards)) return 7;\n      if (this.isFullHouse(cards)) return 6;\n      if (this.isFlush(cards)) return 5;\n      if (this.isStraight(cards)) return 4;\n      if (this.isTrips(cards)) return 3;\n      if (this.isTwoPair(cards)) return 2;\n      if (this.isPair(cards)) return 1;else return 0;\n    };\n\n    this.evaluateFlop = (holeCards, flop) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var j = 0; j < flop.length; j++) {\n        cards.push(flop[j].code);\n      }\n\n      return this.state.rank[this.evaluateFiveCardHand(cards)];\n    };\n\n    this.evaluateTurn = (holeCards, flop, turn) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var j = 0; j < flop.length; j++) {\n        cards.push(flop[j].code);\n      }\n\n      cards.push(turn[0].code); // Loop through possible 5 hand combos and return hand with highest strength\n\n      var high = 0;\n\n      for (var k = 0; k < 6; k++) {\n        var tempCards = cards.slice();\n        tempCards.splice(k, 1);\n        if (this.evaluateFiveCardHand(tempCards) > high) high = this.evaluateFiveCardHand(tempCards);\n      }\n\n      return this.state.rank[high];\n    };\n\n    this.evaluateRiver = (holeCards, flop, turn, river) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var j = 0; j < flop.length; j++) {\n        cards.push(flop[j].code);\n      }\n\n      cards.push(turn[0].code);\n      cards.push(river[0].code);\n      var high = 0; // Loop through possible 5 hand combos and return hand with highest strength\n\n      for (var k = 0; k < cards.length - 1; k++) {\n        for (var l = 1; l < cards.length; l++) {\n          var tempCards = cards.slice();\n          tempCards.splice(k, 1);\n          tempCards.splice(l - 1, 1);\n          if (this.evaluateFiveCardHand(tempCards) > high) high = this.evaluateFiveCardHand(tempCards);\n        }\n      }\n\n      return this.state.rank[high];\n    };\n\n    this.displayHand = (dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river) => {\n      // If hole cards haven't been dealt yet don't display anything\n      if (!dealHoleCards) return null; // If flop hasn't been dealt yet only evaluate hole cards\n      else if (!dealFlop) {\n          return evaluateHoleCards(holeCards);\n        } // If turn hasn't been dealt yet only evaluate hole cards and flop\n        else if (!dealTurn) {\n            return this.evaluateFlop(holeCards, flop);\n          } // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n          else if (!dealRiver) {\n              return this.evaluateTurn(holeCards, flop, turn);\n            } // Otherwise evaluate all cards\n            else {\n                return this.evaluateRiver(holeCards, flop, turn, river);\n              }\n    };\n\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]\n    };\n  } // Evaluate strength of hole cards\n  // evaluateHoleCards = (holeCards) => {\n  //   var card1 = holeCards[0].code;\n  //   var card2 = holeCards[1].code;\n  //   if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n  //   else {\n  //     return \"High card\";\n  //   }\n  // };\n  // Evaluate any given 5 card hand\n\n\n  // Check if given cards represent a royal flush\n  isRoyalFlush(cards) {\n    // Must be a straight flush and contain an Ace and 10\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) {\n          for (var j = 0; j < cards.length; j++) {\n            if (cards[j].includes(\"0\")) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a straight flush\n\n\n  isStraightFlush(cards) {\n    // Must be a straight and a flush\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n\n    return false;\n  } // Check if given cards represent a four of a kind\n\n\n  isFourOfAKind(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be four of a kind if size of set is 2\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 4 times then it is four of a kind\n\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n\n          if (valCount === 4) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a full house\n\n\n  isFullHouse(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be full house if size of set is 2\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is full house\n\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a flush\n\n\n  isFlush(cards) {\n    // Add all suits of the cards to array 'suits'\n    var suits = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    } // Create a set from array 'suits'\n\n\n    var set = new Set(suits); // Can only be flush if size of set is 1\n\n    if (set.size === 1) {\n      return true;\n    } else return false;\n  } // Check if given cards represent a straight\n\n\n  isStraight(cards) {\n    // Add indices of values of all cards to array 'indices'\n    var indices = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    } // Sort 'indices'\n\n\n    indices.sort(function (a, b) {\n      return a - b;\n    }); // Check if it is a wheel straight\n\n    var wheel = [0, 1, 2, 3, 12];\n\n    if (indices.length === wheel.length && indices.every((value, index) => value === wheel[index])) {\n      return true;\n    } // If not a wheel straight determine if it's a regular straight\n    // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n\n\n    for (var j = 0; j < indices.length - 1; j++) {\n      if (indices[j] + 1 !== indices[j + 1]) return false;\n    }\n\n    return true;\n  } // Check if given cards represent trips\n\n\n  isTrips(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var k = 0; k < cards.length; k++) {\n      vals.push(cards[k].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be trips if size of set is 3\n\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is trips\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent two pair\n\n\n  isTwoPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be two pair of size of set is 3\n\n    if (set.size === 3) {\n      // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n      return true;\n    }\n\n    return false;\n  } // Check if given cards represent a pair\n\n\n  isPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be a pair of size of set is 4\n\n    if (set.size === 4) {\n      return true;\n    }\n\n    return false;\n  } // Method to display hand strength\n\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.displayHand(dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","evaluateHoleCards","Hand","constructor","props","evaluateFiveCardHand","cards","isRoyalFlush","isStraightFlush","isFourOfAKind","isFullHouse","isFlush","isStraight","isTrips","isTwoPair","isPair","evaluateFlop","holeCards","flop","i","length","push","code","j","state","rank","evaluateTurn","turn","high","k","tempCards","slice","splice","evaluateRiver","river","l","displayHand","dealHoleCards","dealFlop","dealTurn","dealRiver","values","includes","vals","substr","set","Set","size","uniqueVals","Array","from","valCount","suits","indices","indexOf","sort","a","b","wheel","every","value","index","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { evaluateHoleCards } from \"./HandEvaluator\";\n\n// Component to represent each player's hand\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\n        \"High card\",\n        \"Pair\",\n        \"Two pair\",\n        \"Three of a kind\",\n        \"Straight\",\n        \"Flush\",\n        \"Full House\",\n        \"Four of a kind\",\n        \"Straight Flush\",\n        \"Royal Flush\",\n      ],\n    };\n  }\n\n  // Evaluate strength of hole cards\n  // evaluateHoleCards = (holeCards) => {\n  //   var card1 = holeCards[0].code;\n  //   var card2 = holeCards[1].code;\n  //   if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n  //   else {\n  //     return \"High card\";\n  //   }\n  // };\n\n  // Evaluate any given 5 card hand\n  evaluateFiveCardHand = (cards) => {\n    if (this.isRoyalFlush(cards)) return 9;\n    if (this.isStraightFlush(cards)) return 8;\n    if (this.isFourOfAKind(cards)) return 7;\n    if (this.isFullHouse(cards)) return 6;\n    if (this.isFlush(cards)) return 5;\n    if (this.isStraight(cards)) return 4;\n    if (this.isTrips(cards)) return 3;\n    if (this.isTwoPair(cards)) return 2;\n    if (this.isPair(cards)) return 1;\n    else return 0;\n  };\n\n  // Evaluate hand after flop\n  evaluateFlop = (holeCards, flop) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    return this.state.rank[this.evaluateFiveCardHand(cards)];\n  };\n\n  // Evaluate hand after turn\n  evaluateTurn = (holeCards, flop, turn) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    cards.push(turn[0].code);\n    // Loop through possible 5 hand combos and return hand with highest strength\n    var high = 0;\n    for (var k = 0; k < 6; k++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      if (this.evaluateFiveCardHand(tempCards) > high)\n        high = this.evaluateFiveCardHand(tempCards);\n    }\n    return this.state.rank[high];\n  };\n\n  // Evaluate hand after river\n  evaluateRiver = (holeCards, flop, turn, river) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    cards.push(turn[0].code);\n    cards.push(river[0].code);\n    var high = 0;\n    // Loop through possible 5 hand combos and return hand with highest strength\n    for (var k = 0; k < cards.length - 1; k++) {\n      for (var l = 1; l < cards.length; l++) {\n        var tempCards = cards.slice();\n        tempCards.splice(k, 1);\n        tempCards.splice(l - 1, 1);\n        if (this.evaluateFiveCardHand(tempCards) > high)\n          high = this.evaluateFiveCardHand(tempCards);\n      }\n    }\n    return this.state.rank[high];\n  };\n\n  // Check if given cards represent a royal flush\n  isRoyalFlush(cards) {\n    // Must be a straight flush and contain an Ace and 10\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) {\n          for (var j = 0; j < cards.length; j++) {\n            if (cards[j].includes(\"0\")) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a straight flush\n  isStraightFlush(cards) {\n    // Must be a straight and a flush\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n    return false;\n  }\n\n  // Check if given cards represent a four of a kind\n  isFourOfAKind(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be four of a kind if size of set is 2\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 4 times then it is four of a kind\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n          if (valCount === 4) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a full house\n  isFullHouse(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be full house if size of set is 2\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 3 times then it is full house\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a flush\n  isFlush(cards) {\n    // Add all suits of the cards to array 'suits'\n    var suits = [];\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    }\n    // Create a set from array 'suits'\n    var set = new Set(suits);\n    // Can only be flush if size of set is 1\n    if (set.size === 1) {\n      return true;\n    } else return false;\n  }\n\n  // Check if given cards represent a straight\n  isStraight(cards) {\n    // Add indices of values of all cards to array 'indices'\n    var indices = [];\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    }\n    // Sort 'indices'\n    indices.sort(function (a, b) {\n      return a - b;\n    });\n    // Check if it is a wheel straight\n    var wheel = [0, 1, 2, 3, 12];\n    if (\n      indices.length === wheel.length &&\n      indices.every((value, index) => value === wheel[index])\n    ) {\n      return true;\n    }\n    // If not a wheel straight determine if it's a regular straight\n    // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n    for (var j = 0; j < indices.length - 1; j++) {\n      if (indices[j] + 1 !== indices[j + 1]) return false;\n    }\n    return true;\n  }\n\n  // Check if given cards represent trips\n  isTrips(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var k = 0; k < cards.length; k++) {\n      vals.push(cards[k].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be trips if size of set is 3\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 3 times then it is trips\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent two pair\n  isTwoPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be two pair of size of set is 3\n    if (set.size === 3) {\n      // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n      return true;\n    }\n    return false;\n  }\n\n  // Check if given cards represent a pair\n  isPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be a pair of size of set is 4\n    if (set.size === 4) {\n      return true;\n    }\n    return false;\n  }\n\n  // Method to display hand strength\n  displayHand = (\n    dealHoleCards,\n    dealFlop,\n    dealTurn,\n    dealRiver,\n    holeCards,\n    flop,\n    turn,\n    river\n  ) => {\n    // If hole cards haven't been dealt yet don't display anything\n    if (!dealHoleCards) return null;\n    // If flop hasn't been dealt yet only evaluate hole cards\n    else if (!dealFlop) {\n      return evaluateHoleCards(holeCards);\n    }\n    // If turn hasn't been dealt yet only evaluate hole cards and flop\n    else if (!dealTurn) {\n      return this.evaluateFlop(holeCards, flop);\n    }\n    // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n    else if (!dealRiver) {\n      return this.evaluateTurn(holeCards, flop, turn);\n    }\n    // Otherwise evaluate all cards\n    else {\n      return this.evaluateRiver(holeCards, flop, turn, river);\n    }\n  };\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <span>\n          {dealHoleCards ? (\n            <p>\n              {this.displayHand(\n                dealHoleCards,\n                dealFlop,\n                dealTurn,\n                dealRiver,\n                holeCards,\n                flop,\n                turn,\n                river\n              )}\n            </p>\n          ) : null}\n        </span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}