{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\";\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n\n    this.evaluateHoleCards = holeCards => {\n      var card1 = holeCards[0].code;\n      var card2 = holeCards[1].code;\n      if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";else {\n        return \"High card\";\n      }\n    };\n\n    this.evaluateFiveCardHand = cards => {\n      if (this.isRoyalFlush(cards)) return 9;\n      if (this.isStraightFlush(cards)) return 8;\n      if (this.isFourOfAKind(cards)) return 7;\n      if (this.isFullHouse(cards)) return 6;\n      if (this.isFlush(cards)) return 5;\n      if (this.isStraight(cards)) return 4;\n      if (this.isTrips(cards)) return 3;\n      if (this.isTwoPair(cards)) return 2;\n      if (this.isPair(cards)) return 1;else return 0;\n    };\n\n    this.evaluateFlop = (holeCards, flop) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var i = 0; i < flop.length; i++) {\n        cards.push(flop[i].code);\n      }\n\n      return this.state.rank[this.evaluateFiveCardHand(cards)];\n    };\n\n    this.evaluateTurn = (holeCards, flop, turn) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var i = 0; i < flop.length; i++) {\n        cards.push(flop[i].code);\n      }\n\n      cards.push(turn[0].code);\n      var high = 0;\n\n      for (var i = 0; i < 6; i++) {\n        var tempCards = cards.slice();\n        tempCards.splice(i, 1);\n        if (this.evaluateFiveCardHand(tempCards) > high) high = this.evaluateFiveCardHand(tempCards);\n      }\n\n      return this.state.rank[high];\n    };\n\n    this.evaluateRiver = (holeCards, flop, turn, river) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var i = 0; i < flop.length; i++) {\n        cards.push(flop[i].code);\n      }\n\n      cards.push(turn[0].code);\n      cards.push(river[0].code);\n      var high = 0;\n\n      for (var i = 0; i < cards.length - 1; i++) {\n        for (var j = 1; j < cards.length; j++) {\n          var tempCards = cards.slice();\n          tempCards.splice(i, 1);\n          tempCards.splice(j - 1, 1);\n          if (this.evaluateFiveCardHand(tempCards) > high) high = this.evaluateFiveCardHand(tempCards);\n        }\n      }\n\n      return this.state.rank[high];\n    };\n\n    this.displayHand = (dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river) => {\n      if (!dealHoleCards) return null;else if (!dealFlop) {\n        return this.evaluateHoleCards(holeCards);\n      } else if (!dealTurn) {\n        return this.evaluateFlop(holeCards, flop);\n      } else if (!dealRiver) {\n        return this.evaluateTurn(holeCards, flop, turn);\n      } else {\n        return this.evaluateRiver(holeCards, flop, turn, river);\n      }\n    };\n\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]\n    };\n  } // handName = (holeCards, flop, turn, river) => {\n  //   console.log(flop);\n  //   this.setState({\n  //     holeCards: this.props.holeCards,\n  //     flop: this.props.flop,\n  //     turn: this.props.turn,\n  //     river: this.props.river,\n  //   });\n  //   if (this.state.flop.length === 0) {\n  //     return this.evaluateHoleCards(this.state.holeCards);\n  //   } else if (this.state.turn.length === 0) {\n  //     return this.evaluateFlop(this.state.holeCards, this.state.flop);\n  //   } else if (this.state.river.length === 0) {\n  //     return this.evaluateTurn(\n  //       this.state.holeCards,\n  //       this.state.flop,\n  //       this.state.turn\n  //     );\n  //   } else {\n  //     return this.evaluateRiver(\n  //       this.state.holeCards,\n  //       this.state.flop,\n  //       this.state.turn,\n  //       this.state.river\n  //     );\n  //   }\n  // };\n\n\n  isRoyalFlush(cards) {\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) return true;\n      }\n    }\n\n    return false;\n  }\n\n  isStraightFlush(cards) {\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isFourOfAKind(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 4) return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isFullHouse(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isFlush(cards) {\n    var suits = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    }\n\n    var set = new Set(suits);\n\n    if (set.size === 1) {\n      console.log(cards);\n      console.log(set);\n      console.log(suits);\n      return true;\n    } else return false;\n  }\n\n  isStraight(cards) {\n    var indices = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    }\n\n    indices.sort(function (a, b) {\n      return a - b;\n    });\n\n    if (indices[indices.length - 1] - indices[0] === indices.length - 1) {\n      console.log(cards);\n      console.log(indices);\n      return true;\n    } else if (indices[indices.length - 1] - indices[0] === 12 && indices[indices.length - 2] - indices[0] === 3) return true;else return false;\n  }\n\n  isTrips(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set);\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isTwoPair(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 3) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isPair(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 4) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.displayHand(dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","Hand","constructor","props","evaluateHoleCards","holeCards","card1","code","card2","substring","evaluateFiveCardHand","cards","isRoyalFlush","isStraightFlush","isFourOfAKind","isFullHouse","isFlush","isStraight","isTrips","isTwoPair","isPair","evaluateFlop","flop","i","length","push","state","rank","evaluateTurn","turn","high","tempCards","slice","splice","evaluateRiver","river","j","displayHand","dealHoleCards","dealFlop","dealTurn","dealRiver","values","includes","vals","substr","set","Set","size","uniqueVals","Array","from","valCount","suits","console","log","indices","indexOf","sort","a","b","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\n        \"High card\",\n        \"Pair\",\n        \"Two pair\",\n        \"Three of a kind\",\n        \"Straight\",\n        \"Flush\",\n        \"Full House\",\n        \"Four of a kind\",\n        \"Straight Flush\",\n        \"Royal Flush\",\n      ],\n    };\n  }\n\n  // handName = (holeCards, flop, turn, river) => {\n  //   console.log(flop);\n  //   this.setState({\n  //     holeCards: this.props.holeCards,\n  //     flop: this.props.flop,\n  //     turn: this.props.turn,\n  //     river: this.props.river,\n  //   });\n  //   if (this.state.flop.length === 0) {\n  //     return this.evaluateHoleCards(this.state.holeCards);\n  //   } else if (this.state.turn.length === 0) {\n  //     return this.evaluateFlop(this.state.holeCards, this.state.flop);\n  //   } else if (this.state.river.length === 0) {\n  //     return this.evaluateTurn(\n  //       this.state.holeCards,\n  //       this.state.flop,\n  //       this.state.turn\n  //     );\n  //   } else {\n  //     return this.evaluateRiver(\n  //       this.state.holeCards,\n  //       this.state.flop,\n  //       this.state.turn,\n  //       this.state.river\n  //     );\n  //   }\n  // };\n\n  evaluateHoleCards = (holeCards) => {\n    var card1 = holeCards[0].code;\n    var card2 = holeCards[1].code;\n    if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n    else {\n      return \"High card\";\n    }\n  };\n\n  evaluateFiveCardHand = (cards) => {\n    if (this.isRoyalFlush(cards)) return 9;\n    if (this.isStraightFlush(cards)) return 8;\n    if (this.isFourOfAKind(cards)) return 7;\n    if (this.isFullHouse(cards)) return 6;\n    if (this.isFlush(cards)) return 5;\n    if (this.isStraight(cards)) return 4;\n    if (this.isTrips(cards)) return 3;\n    if (this.isTwoPair(cards)) return 2;\n    if (this.isPair(cards)) return 1;\n    else return 0;\n  };\n\n  evaluateFlop = (holeCards, flop) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var i = 0; i < flop.length; i++) {\n      cards.push(flop[i].code);\n    }\n    return this.state.rank[this.evaluateFiveCardHand(cards)];\n  };\n\n  evaluateTurn = (holeCards, flop, turn) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var i = 0; i < flop.length; i++) {\n      cards.push(flop[i].code);\n    }\n    cards.push(turn[0].code);\n    var high = 0;\n    for (var i = 0; i < 6; i++) {\n      var tempCards = cards.slice();\n      tempCards.splice(i, 1);\n      if (this.evaluateFiveCardHand(tempCards) > high)\n        high = this.evaluateFiveCardHand(tempCards);\n    }\n    return this.state.rank[high];\n  };\n\n  evaluateRiver = (holeCards, flop, turn, river) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var i = 0; i < flop.length; i++) {\n      cards.push(flop[i].code);\n    }\n    cards.push(turn[0].code);\n    cards.push(river[0].code);\n    var high = 0;\n    for (var i = 0; i < cards.length - 1; i++) {\n      for (var j = 1; j < cards.length; j++) {\n        var tempCards = cards.slice();\n        tempCards.splice(i, 1);\n        tempCards.splice(j - 1, 1);\n        if (this.evaluateFiveCardHand(tempCards) > high)\n          high = this.evaluateFiveCardHand(tempCards);\n      }\n    }\n    return this.state.rank[high];\n  };\n\n  isRoyalFlush(cards) {\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) return true;\n      }\n    }\n    return false;\n  }\n\n  isStraightFlush(cards) {\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n    return false;\n  }\n\n  isFourOfAKind(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 4) return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  isFullHouse(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  isFlush(cards) {\n    var suits = [];\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    }\n    var set = new Set(suits);\n    if (set.size === 1) {\n      console.log(cards);\n      console.log(set);\n      console.log(suits);\n      return true;\n    } else return false;\n  }\n\n  isStraight(cards) {\n    var indices = [];\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    }\n    indices.sort(function (a, b) {\n      return a - b;\n    });\n    if (indices[indices.length - 1] - indices[0] === indices.length - 1) {\n      console.log(cards);\n      console.log(indices);\n      return true;\n    } else if (\n      indices[indices.length - 1] - indices[0] === 12 &&\n      indices[indices.length - 2] - indices[0] === 3\n    )\n      return true;\n    else return false;\n  }\n\n  isTrips(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set);\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  isTwoPair(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 3) {\n      return true;\n    }\n    return false;\n  }\n\n  isPair(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 4) {\n      return true;\n    }\n    return false;\n  }\n\n  displayHand = (\n    dealHoleCards,\n    dealFlop,\n    dealTurn,\n    dealRiver,\n    holeCards,\n    flop,\n    turn,\n    river\n  ) => {\n    if (!dealHoleCards) return null;\n    else if (!dealFlop) {\n      return this.evaluateHoleCards(holeCards);\n    } else if (!dealTurn) {\n      return this.evaluateFlop(holeCards, flop);\n    } else if (!dealRiver) {\n      return this.evaluateTurn(holeCards, flop, turn);\n    } else {\n      return this.evaluateRiver(holeCards, flop, turn, river);\n    }\n  };\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <span>\n          {dealHoleCards ? (\n            <p>\n              {this.displayHand(\n                dealHoleCards,\n                dealFlop,\n                dealTurn,\n                dealRiver,\n                holeCards,\n                flop,\n                turn,\n                river\n              )}\n            </p>\n          ) : null}\n        </span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}