{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\";\nimport { evaluateHoleCards, evaluateFlop, evaluateRiver, evaluateTurn } from \"./HandEvaluator.js\"; // Component to represent each player's hand\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n\n    this.displayHand = (dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river) => {\n      // If hole cards haven't been dealt yet don't display anything\n      if (!dealHoleCards) return null; // If flop hasn't been dealt yet only evaluate hole cards\n      else if (!dealFlop) {\n          return evaluateHoleCards(holeCards);\n        } // If turn hasn't been dealt yet only evaluate hole cards and flop\n        else if (!dealTurn) {\n            return evaluateFlop(holeCards, flop)[0];\n          } // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n          else if (!dealRiver) {\n              return evaluateTurn(holeCards, flop, turn)[0];\n            } // Otherwise evaluate all cards\n            else {\n                return evaluateRiver(holeCards, flop, turn, river)[0];\n              }\n    };\n\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]\n    };\n  } // Method to display hand strength\n\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.displayHand(dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","evaluateHoleCards","evaluateFlop","evaluateRiver","evaluateTurn","Hand","constructor","props","displayHand","dealHoleCards","dealFlop","dealTurn","dealRiver","holeCards","flop","turn","river","state","values","rank","render"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACEC,iBADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,YAJF,QAKO,oBALP,C,CAOA;;AACA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAC3BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAwBnBC,WAxBmB,GAwBL,CACZC,aADY,EAEZC,QAFY,EAGZC,QAHY,EAIZC,SAJY,EAKZC,SALY,EAMZC,IANY,EAOZC,IAPY,EAQZC,KARY,KAST;AACH;AACA,UAAI,CAACP,aAAL,EAAoB,OAAO,IAAP,CAApB,CACA;AADA,WAEK,IAAI,CAACC,QAAL,EAAe;AAClB,iBAAOT,iBAAiB,CAACY,SAAD,CAAxB;AACD,SAFI,CAGL;AAHK,aAIA,IAAI,CAACF,QAAL,EAAe;AAClB,mBAAOT,YAAY,CAACW,SAAD,EAAYC,IAAZ,CAAZ,CAA8B,CAA9B,CAAP;AACD,WAFI,CAGL;AAHK,eAIA,IAAI,CAACF,SAAL,EAAgB;AACnB,qBAAOR,YAAY,CAACS,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,CAAZ,CAAoC,CAApC,CAAP;AACD,aAFI,CAGL;AAHK,iBAIA;AACH,uBAAOZ,aAAa,CAACU,SAAD,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,KAAxB,CAAb,CAA4C,CAA5C,CAAP;AACD;AACF,KApDkB;;AAEjB,SAAKC,KAAL,GAAa;AACXJ,MAAAA,SAAS,EAAE,KAAKN,KAAL,CAAWM,SADX;AAEXC,MAAAA,IAAI,EAAE,KAAKP,KAAL,CAAWO,IAFN;AAGXC,MAAAA,IAAI,EAAE,KAAKR,KAAL,CAAWQ,IAHN;AAIXC,MAAAA,KAAK,EAAE,KAAKT,KAAL,CAAWS,KAJP;AAKXE,MAAAA,MAAM,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,EAAoC,GAApC,EAAyC,GAAzC,EAA8C,GAA9C,EAAmD,GAAnD,EAAwD,GAAxD,EAA6D,GAA7D,CALG;AAMXC,MAAAA,IAAI,EAAE,CACJ,WADI,EAEJ,MAFI,EAGJ,UAHI,EAIJ,iBAJI,EAKJ,UALI,EAMJ,OANI,EAOJ,YAPI,EAQJ,gBARI,EASJ,gBATI,EAUJ,aAVI;AANK,KAAb;AAmBD,GAtB0B,CAwB3B;;;AA+BAC,EAAAA,MAAM,GAAG;AACP,UAAM;AACJX,MAAAA,aADI;AAEJC,MAAAA,QAFI;AAGJC,MAAAA,QAHI;AAIJC,MAAAA,SAJI;AAKJC,MAAAA,SALI;AAMJC,MAAAA,IANI;AAOJC,MAAAA,IAPI;AAQJC,MAAAA;AARI,QASF,KAAKT,KATT;AAUA,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,6BACE;AAAA,kBACGE,aAAa,gBACZ;AAAA,oBACG,KAAKD,WAAL,CACCC,aADD,EAECC,QAFD,EAGCC,QAHD,EAICC,SAJD,EAKCC,SALD,EAMCC,IAND,EAOCC,IAPD,EAQCC,KARD;AADH;AAAA;AAAA;AAAA;AAAA,gBADY,GAaV;AAdN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD;;AAtF0B;;AAyF7B,eAAeX,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  evaluateHoleCards,\n  evaluateFlop,\n  evaluateRiver,\n  evaluateTurn,\n} from \"./HandEvaluator.js\";\n\n// Component to represent each player's hand\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\n        \"High card\",\n        \"Pair\",\n        \"Two pair\",\n        \"Three of a kind\",\n        \"Straight\",\n        \"Flush\",\n        \"Full House\",\n        \"Four of a kind\",\n        \"Straight Flush\",\n        \"Royal Flush\",\n      ],\n    };\n  }\n\n  // Method to display hand strength\n  displayHand = (\n    dealHoleCards,\n    dealFlop,\n    dealTurn,\n    dealRiver,\n    holeCards,\n    flop,\n    turn,\n    river\n  ) => {\n    // If hole cards haven't been dealt yet don't display anything\n    if (!dealHoleCards) return null;\n    // If flop hasn't been dealt yet only evaluate hole cards\n    else if (!dealFlop) {\n      return evaluateHoleCards(holeCards);\n    }\n    // If turn hasn't been dealt yet only evaluate hole cards and flop\n    else if (!dealTurn) {\n      return evaluateFlop(holeCards, flop)[0];\n    }\n    // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n    else if (!dealRiver) {\n      return evaluateTurn(holeCards, flop, turn)[0];\n    }\n    // Otherwise evaluate all cards\n    else {\n      return evaluateRiver(holeCards, flop, turn, river)[0];\n    }\n  };\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <span>\n          {dealHoleCards ? (\n            <p>\n              {this.displayHand(\n                dealHoleCards,\n                dealFlop,\n                dealTurn,\n                dealRiver,\n                holeCards,\n                flop,\n                turn,\n                river\n              )}\n            </p>\n          ) : null}\n        </span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}