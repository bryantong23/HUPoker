{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\";\nimport { evaluateHoleCards, evaluateFiveCardHand, evaluateFlop, evaluateRiver, evaluateTurn, isRoyalFlush, isStraightFlush, isFourOfAKind, isFullHouse, isFlush, isStraight, isTrips, isTwoPair, isPair } from \"./HandEvaluator.js\"; // Component to represent each player's hand\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n\n    this.evaluateFiveCardHand = cards => {\n      if (this.isRoyalFlush(cards)) return 9;\n      if (this.isStraightFlush(cards)) return 8;\n      if (this.isFourOfAKind(cards)) return 7;\n      if (this.isFullHouse(cards)) return 6;\n      if (this.isFlush(cards)) return 5;\n      if (this.isStraight(cards)) return 4;\n      if (this.isTrips(cards)) return 3;\n      if (this.isTwoPair(cards)) return 2;\n      if (this.isPair(cards)) return 1;else return 0;\n    };\n\n    this.evaluateFlop = (holeCards, flop) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var j = 0; j < flop.length; j++) {\n        cards.push(flop[j].code);\n      }\n\n      return this.state.rank[this.evaluateFiveCardHand(cards)];\n    };\n\n    this.evaluateTurn = (holeCards, flop, turn) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var j = 0; j < flop.length; j++) {\n        cards.push(flop[j].code);\n      }\n\n      cards.push(turn[0].code); // Loop through possible 5 hand combos and return hand with highest strength\n\n      var high = 0;\n\n      for (var k = 0; k < 6; k++) {\n        var tempCards = cards.slice();\n        tempCards.splice(k, 1);\n        if (this.evaluateFiveCardHand(tempCards) > high) high = this.evaluateFiveCardHand(tempCards);\n      }\n\n      return this.state.rank[high];\n    };\n\n    this.evaluateRiver = (holeCards, flop, turn, river) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var j = 0; j < flop.length; j++) {\n        cards.push(flop[j].code);\n      }\n\n      cards.push(turn[0].code);\n      cards.push(river[0].code);\n      var high = 0; // Loop through possible 5 hand combos and return hand with highest strength\n\n      for (var k = 0; k < cards.length - 1; k++) {\n        for (var l = 1; l < cards.length; l++) {\n          var tempCards = cards.slice();\n          tempCards.splice(k, 1);\n          tempCards.splice(l - 1, 1);\n          if (this.evaluateFiveCardHand(tempCards) > high) high = this.evaluateFiveCardHand(tempCards);\n        }\n      }\n\n      return this.state.rank[high];\n    };\n\n    this.displayHand = (dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river) => {\n      // If hole cards haven't been dealt yet don't display anything\n      if (!dealHoleCards) return null; // If flop hasn't been dealt yet only evaluate hole cards\n      else if (!dealFlop) {\n          return evaluateHoleCards(holeCards);\n        } // If turn hasn't been dealt yet only evaluate hole cards and flop\n        else if (!dealTurn) {\n            return this.evaluateFlop(holeCards, flop);\n          } // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n          else if (!dealRiver) {\n              return this.evaluateTurn(holeCards, flop, turn);\n            } // Otherwise evaluate all cards\n            else {\n                return this.evaluateRiver(holeCards, flop, turn, river);\n              }\n    };\n\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]\n    };\n  } // Evaluate strength of hole cards\n  // evaluateHoleCards = (holeCards) => {\n  //   var card1 = holeCards[0].code;\n  //   var card2 = holeCards[1].code;\n  //   if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n  //   else {\n  //     return \"High card\";\n  //   }\n  // };\n  // Evaluate any given 5 card hand\n\n\n  // Check if given cards represent a royal flush\n  isRoyalFlush(cards) {\n    // Must be a straight flush and contain an Ace and 10\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) {\n          for (var j = 0; j < cards.length; j++) {\n            if (cards[j].includes(\"0\")) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a straight flush\n\n\n  isStraightFlush(cards) {\n    // Must be a straight and a flush\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n\n    return false;\n  } // Check if given cards represent a four of a kind\n\n\n  isFourOfAKind(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be four of a kind if size of set is 2\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 4 times then it is four of a kind\n\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n\n          if (valCount === 4) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a full house\n\n\n  isFullHouse(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be full house if size of set is 2\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is full house\n\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a flush\n\n\n  isFlush(cards) {\n    // Add all suits of the cards to array 'suits'\n    var suits = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    } // Create a set from array 'suits'\n\n\n    var set = new Set(suits); // Can only be flush if size of set is 1\n\n    if (set.size === 1) {\n      return true;\n    } else return false;\n  } // Check if given cards represent a straight\n\n\n  isStraight(cards) {\n    // Add indices of values of all cards to array 'indices'\n    var indices = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    } // Sort 'indices'\n\n\n    indices.sort(function (a, b) {\n      return a - b;\n    }); // Check if it is a wheel straight\n\n    var wheel = [0, 1, 2, 3, 12];\n\n    if (indices.length === wheel.length && indices.every((value, index) => value === wheel[index])) {\n      return true;\n    } // If not a wheel straight determine if it's a regular straight\n    // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n\n\n    for (var j = 0; j < indices.length - 1; j++) {\n      if (indices[j] + 1 !== indices[j + 1]) return false;\n    }\n\n    return true;\n  } // Check if given cards represent trips\n\n\n  isTrips(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var k = 0; k < cards.length; k++) {\n      vals.push(cards[k].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be trips if size of set is 3\n\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is trips\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent two pair\n\n\n  isTwoPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be two pair of size of set is 3\n\n    if (set.size === 3) {\n      // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n      return true;\n    }\n\n    return false;\n  } // Check if given cards represent a pair\n\n\n  isPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be a pair of size of set is 4\n\n    if (set.size === 4) {\n      return true;\n    }\n\n    return false;\n  } // Method to display hand strength\n\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.displayHand(dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","evaluateHoleCards","evaluateFiveCardHand","evaluateFlop","evaluateRiver","evaluateTurn","isRoyalFlush","isStraightFlush","isFourOfAKind","isFullHouse","isFlush","isStraight","isTrips","isTwoPair","isPair","Hand","constructor","props","cards","holeCards","flop","i","length","push","code","j","state","rank","turn","high","k","tempCards","slice","splice","river","l","displayHand","dealHoleCards","dealFlop","dealTurn","dealRiver","values","includes","vals","substr","set","Set","size","uniqueVals","Array","from","valCount","suits","indices","indexOf","sort","a","b","wheel","every","value","index","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  evaluateHoleCards,\n  evaluateFiveCardHand,\n  evaluateFlop,\n  evaluateRiver,\n  evaluateTurn,\n  isRoyalFlush,\n  isStraightFlush,\n  isFourOfAKind,\n  isFullHouse,\n  isFlush,\n  isStraight,\n  isTrips,\n  isTwoPair,\n  isPair,\n} from \"./HandEvaluator.js\";\n\n// Component to represent each player's hand\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\n        \"High card\",\n        \"Pair\",\n        \"Two pair\",\n        \"Three of a kind\",\n        \"Straight\",\n        \"Flush\",\n        \"Full House\",\n        \"Four of a kind\",\n        \"Straight Flush\",\n        \"Royal Flush\",\n      ],\n    };\n  }\n\n  // Evaluate strength of hole cards\n  // evaluateHoleCards = (holeCards) => {\n  //   var card1 = holeCards[0].code;\n  //   var card2 = holeCards[1].code;\n  //   if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n  //   else {\n  //     return \"High card\";\n  //   }\n  // };\n\n  // Evaluate any given 5 card hand\n  evaluateFiveCardHand = (cards) => {\n    if (this.isRoyalFlush(cards)) return 9;\n    if (this.isStraightFlush(cards)) return 8;\n    if (this.isFourOfAKind(cards)) return 7;\n    if (this.isFullHouse(cards)) return 6;\n    if (this.isFlush(cards)) return 5;\n    if (this.isStraight(cards)) return 4;\n    if (this.isTrips(cards)) return 3;\n    if (this.isTwoPair(cards)) return 2;\n    if (this.isPair(cards)) return 1;\n    else return 0;\n  };\n\n  // Evaluate hand after flop\n  evaluateFlop = (holeCards, flop) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    return this.state.rank[this.evaluateFiveCardHand(cards)];\n  };\n\n  // Evaluate hand after turn\n  evaluateTurn = (holeCards, flop, turn) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    cards.push(turn[0].code);\n    // Loop through possible 5 hand combos and return hand with highest strength\n    var high = 0;\n    for (var k = 0; k < 6; k++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      if (this.evaluateFiveCardHand(tempCards) > high)\n        high = this.evaluateFiveCardHand(tempCards);\n    }\n    return this.state.rank[high];\n  };\n\n  // Evaluate hand after river\n  evaluateRiver = (holeCards, flop, turn, river) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    cards.push(turn[0].code);\n    cards.push(river[0].code);\n    var high = 0;\n    // Loop through possible 5 hand combos and return hand with highest strength\n    for (var k = 0; k < cards.length - 1; k++) {\n      for (var l = 1; l < cards.length; l++) {\n        var tempCards = cards.slice();\n        tempCards.splice(k, 1);\n        tempCards.splice(l - 1, 1);\n        if (this.evaluateFiveCardHand(tempCards) > high)\n          high = this.evaluateFiveCardHand(tempCards);\n      }\n    }\n    return this.state.rank[high];\n  };\n\n  // Check if given cards represent a royal flush\n  isRoyalFlush(cards) {\n    // Must be a straight flush and contain an Ace and 10\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) {\n          for (var j = 0; j < cards.length; j++) {\n            if (cards[j].includes(\"0\")) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a straight flush\n  isStraightFlush(cards) {\n    // Must be a straight and a flush\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n    return false;\n  }\n\n  // Check if given cards represent a four of a kind\n  isFourOfAKind(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be four of a kind if size of set is 2\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 4 times then it is four of a kind\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n          if (valCount === 4) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a full house\n  isFullHouse(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be full house if size of set is 2\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 3 times then it is full house\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a flush\n  isFlush(cards) {\n    // Add all suits of the cards to array 'suits'\n    var suits = [];\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    }\n    // Create a set from array 'suits'\n    var set = new Set(suits);\n    // Can only be flush if size of set is 1\n    if (set.size === 1) {\n      return true;\n    } else return false;\n  }\n\n  // Check if given cards represent a straight\n  isStraight(cards) {\n    // Add indices of values of all cards to array 'indices'\n    var indices = [];\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    }\n    // Sort 'indices'\n    indices.sort(function (a, b) {\n      return a - b;\n    });\n    // Check if it is a wheel straight\n    var wheel = [0, 1, 2, 3, 12];\n    if (\n      indices.length === wheel.length &&\n      indices.every((value, index) => value === wheel[index])\n    ) {\n      return true;\n    }\n    // If not a wheel straight determine if it's a regular straight\n    // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n    for (var j = 0; j < indices.length - 1; j++) {\n      if (indices[j] + 1 !== indices[j + 1]) return false;\n    }\n    return true;\n  }\n\n  // Check if given cards represent trips\n  isTrips(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var k = 0; k < cards.length; k++) {\n      vals.push(cards[k].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be trips if size of set is 3\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 3 times then it is trips\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent two pair\n  isTwoPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be two pair of size of set is 3\n    if (set.size === 3) {\n      // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n      return true;\n    }\n    return false;\n  }\n\n  // Check if given cards represent a pair\n  isPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be a pair of size of set is 4\n    if (set.size === 4) {\n      return true;\n    }\n    return false;\n  }\n\n  // Method to display hand strength\n  displayHand = (\n    dealHoleCards,\n    dealFlop,\n    dealTurn,\n    dealRiver,\n    holeCards,\n    flop,\n    turn,\n    river\n  ) => {\n    // If hole cards haven't been dealt yet don't display anything\n    if (!dealHoleCards) return null;\n    // If flop hasn't been dealt yet only evaluate hole cards\n    else if (!dealFlop) {\n      return evaluateHoleCards(holeCards);\n    }\n    // If turn hasn't been dealt yet only evaluate hole cards and flop\n    else if (!dealTurn) {\n      return this.evaluateFlop(holeCards, flop);\n    }\n    // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n    else if (!dealRiver) {\n      return this.evaluateTurn(holeCards, flop, turn);\n    }\n    // Otherwise evaluate all cards\n    else {\n      return this.evaluateRiver(holeCards, flop, turn, river);\n    }\n  };\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <span>\n          {dealHoleCards ? (\n            <p>\n              {this.displayHand(\n                dealHoleCards,\n                dealFlop,\n                dealTurn,\n                dealRiver,\n                holeCards,\n                flop,\n                turn,\n                river\n              )}\n            </p>\n          ) : null}\n        </span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}