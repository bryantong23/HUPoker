{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\";\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n\n    this.evaluateHoleCards = holeCards => {\n      var card1 = holeCards[0].code;\n      var card2 = holeCards[1].code;\n      if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair of \" + card1.substring(0, 1) + \"s\";else {\n        if (this.state.values.indexOf(card1.substring(0, 1)) > this.state.values.indexOf(card2.substring(0, 1))) {\n          return card1.substring(0, 1) + \" high\";\n        } else return card2.substring(0, 1) + \" high\";\n      }\n    };\n\n    this.evaluateFiveCardHand = cards => {\n      if (this.isRoyalFlush(cards)) return 9;\n      if (this.isStraightFlush(cards)) return 8;\n      if (this.isFourOfAKind(cards)) return 7;\n      if (this.isFullHouse(cards)) return 6;\n      if (this.isFlush(cards)) return 5;\n      if (this.isStraight(cards)) return 4;\n      if (this.isTrips(cards)) return 3;\n      if (this.isTwoPair(cards)) return 2;\n      if (this.isPair(cards)) return 1;else return 0;\n    };\n\n    this.evaluateFlop = (holeCards, flop) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var i = 0; i < flop.length; i++) {\n        cards.push(flop[i].code);\n      }\n\n      return this.state.rank[this.evaluateFiveCardHand(cards)];\n    };\n\n    this.evaluateTurn = (holeCards, flop, turn) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var i = 0; i < flop.length; i++) {\n        cards.push(flop[i].code);\n      }\n\n      cards.push(turn[0].code);\n      var high = 0;\n\n      for (var i = 0; i < 2; i++) {\n        var tempCards = cards.slice(i, cards.length - 1 + i);\n        if (this.evaluateFiveCardHand(tempCards) > high) high = this.evaluateFiveCardHand(tempCards);\n      }\n\n      return this.state.rank[high];\n    };\n\n    this.evaluateRiver = (holeCards, flop, turn, river) => {};\n\n    this.displayHand = (dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river) => {\n      if (!dealHoleCards) return null;else if (!dealFlop) {\n        return this.evaluateHoleCards(holeCards);\n      } else if (!dealTurn) {\n        return this.evaluateFlop(holeCards, flop);\n      } else if (!dealRiver) {\n        return this.evaluateTurn(holeCards, flop, turn);\n      } else {\n        return this.evaluateRiver(holeCards, flop, turn, river);\n      }\n    };\n\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]\n    };\n  } // handName = (holeCards, flop, turn, river) => {\n  //   console.log(flop);\n  //   this.setState({\n  //     holeCards: this.props.holeCards,\n  //     flop: this.props.flop,\n  //     turn: this.props.turn,\n  //     river: this.props.river,\n  //   });\n  //   if (this.state.flop.length === 0) {\n  //     return this.evaluateHoleCards(this.state.holeCards);\n  //   } else if (this.state.turn.length === 0) {\n  //     return this.evaluateFlop(this.state.holeCards, this.state.flop);\n  //   } else if (this.state.river.length === 0) {\n  //     return this.evaluateTurn(\n  //       this.state.holeCards,\n  //       this.state.flop,\n  //       this.state.turn\n  //     );\n  //   } else {\n  //     return this.evaluateRiver(\n  //       this.state.holeCards,\n  //       this.state.flop,\n  //       this.state.turn,\n  //       this.state.river\n  //     );\n  //   }\n  // };\n\n\n  isRoyalFlush(cards) {\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) return true;\n      }\n    }\n\n    return false;\n  }\n\n  isStraightFlush(cards) {\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isFourOfAKind(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 4) return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isFullHouse(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isFlush(cards) {\n    for (var i = 0; i < cards.length - 1; i++) {\n      if (cards[i].substr(1) !== cards[i + 1].substr(1)) return false;\n    }\n\n    return true;\n  } // NEED TO ACCOUNT FOR WHEEL\n\n\n  isStraight(cards) {\n    var indices = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    }\n\n    indices = indices.sort();\n    console.log(indices);\n    if (indices[indices.length - 1] - indices[0] === indices.length - 1) return true;else return false;\n  }\n\n  isTrips(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set);\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  isTwoPair(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 3) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isPair(cards) {\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n\n    var set = new Set(vals);\n\n    if (set.size === 4) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.displayHand(dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","Hand","constructor","props","evaluateHoleCards","holeCards","card1","code","card2","substring","state","values","indexOf","evaluateFiveCardHand","cards","isRoyalFlush","isStraightFlush","isFourOfAKind","isFullHouse","isFlush","isStraight","isTrips","isTwoPair","isPair","evaluateFlop","flop","i","length","push","rank","evaluateTurn","turn","high","tempCards","slice","evaluateRiver","river","displayHand","dealHoleCards","dealFlop","dealTurn","dealRiver","includes","vals","substr","set","Set","size","uniqueVals","Array","from","valCount","j","indices","sort","console","log","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\n        \"High card\",\n        \"Pair\",\n        \"Two pair\",\n        \"Three of a kind\",\n        \"Straight\",\n        \"Flush\",\n        \"Full House\",\n        \"Four of a kind\",\n        \"Straight Flush\",\n        \"Royal Flush\",\n      ],\n    };\n  }\n\n  // handName = (holeCards, flop, turn, river) => {\n  //   console.log(flop);\n  //   this.setState({\n  //     holeCards: this.props.holeCards,\n  //     flop: this.props.flop,\n  //     turn: this.props.turn,\n  //     river: this.props.river,\n  //   });\n  //   if (this.state.flop.length === 0) {\n  //     return this.evaluateHoleCards(this.state.holeCards);\n  //   } else if (this.state.turn.length === 0) {\n  //     return this.evaluateFlop(this.state.holeCards, this.state.flop);\n  //   } else if (this.state.river.length === 0) {\n  //     return this.evaluateTurn(\n  //       this.state.holeCards,\n  //       this.state.flop,\n  //       this.state.turn\n  //     );\n  //   } else {\n  //     return this.evaluateRiver(\n  //       this.state.holeCards,\n  //       this.state.flop,\n  //       this.state.turn,\n  //       this.state.river\n  //     );\n  //   }\n  // };\n\n  evaluateHoleCards = (holeCards) => {\n    var card1 = holeCards[0].code;\n    var card2 = holeCards[1].code;\n    if (card1.substring(0, 1) === card2.substring(0, 1))\n      return \"Pair of \" + card1.substring(0, 1) + \"s\";\n    else {\n      if (\n        this.state.values.indexOf(card1.substring(0, 1)) >\n        this.state.values.indexOf(card2.substring(0, 1))\n      ) {\n        return card1.substring(0, 1) + \" high\";\n      } else return card2.substring(0, 1) + \" high\";\n    }\n  };\n\n  evaluateFiveCardHand = (cards) => {\n    if (this.isRoyalFlush(cards)) return 9;\n    if (this.isStraightFlush(cards)) return 8;\n    if (this.isFourOfAKind(cards)) return 7;\n    if (this.isFullHouse(cards)) return 6;\n    if (this.isFlush(cards)) return 5;\n    if (this.isStraight(cards)) return 4;\n    if (this.isTrips(cards)) return 3;\n    if (this.isTwoPair(cards)) return 2;\n    if (this.isPair(cards)) return 1;\n    else return 0;\n  };\n\n  evaluateFlop = (holeCards, flop) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var i = 0; i < flop.length; i++) {\n      cards.push(flop[i].code);\n    }\n    return this.state.rank[this.evaluateFiveCardHand(cards)];\n  };\n\n  evaluateTurn = (holeCards, flop, turn) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var i = 0; i < flop.length; i++) {\n      cards.push(flop[i].code);\n    }\n    cards.push(turn[0].code);\n    var high = 0;\n    for (var i = 0; i < 2; i++) {\n      var tempCards = cards.slice(i, cards.length - 1 + i);\n      if (this.evaluateFiveCardHand(tempCards) > high)\n        high = this.evaluateFiveCardHand(tempCards);\n    }\n    return this.state.rank[high];\n  };\n\n  evaluateRiver = (holeCards, flop, turn, river) => {};\n\n  isRoyalFlush(cards) {\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) return true;\n      }\n    }\n    return false;\n  }\n\n  isStraightFlush(cards) {\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n    return false;\n  }\n\n  isFourOfAKind(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 4) return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  isFullHouse(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  isFlush(cards) {\n    for (var i = 0; i < cards.length - 1; i++) {\n      if (cards[i].substr(1) !== cards[i + 1].substr(1)) return false;\n    }\n    return true;\n  }\n\n  // NEED TO ACCOUNT FOR WHEEL\n  isStraight(cards) {\n    var indices = [];\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    }\n    indices = indices.sort();\n    console.log(indices);\n    if (indices[indices.length - 1] - indices[0] === indices.length - 1)\n      return true;\n    else return false;\n  }\n\n  isTrips(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set);\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  isTwoPair(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 3) {\n      return true;\n    }\n    return false;\n  }\n\n  isPair(cards) {\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    var set = new Set(vals);\n    if (set.size === 4) {\n      return true;\n    }\n    return false;\n  }\n\n  displayHand = (\n    dealHoleCards,\n    dealFlop,\n    dealTurn,\n    dealRiver,\n    holeCards,\n    flop,\n    turn,\n    river\n  ) => {\n    if (!dealHoleCards) return null;\n    else if (!dealFlop) {\n      return this.evaluateHoleCards(holeCards);\n    } else if (!dealTurn) {\n      return this.evaluateFlop(holeCards, flop);\n    } else if (!dealRiver) {\n      return this.evaluateTurn(holeCards, flop, turn);\n    } else {\n      return this.evaluateRiver(holeCards, flop, turn, river);\n    }\n  };\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <span>\n          {dealHoleCards ? (\n            <p>\n              {this.displayHand(\n                dealHoleCards,\n                dealFlop,\n                dealTurn,\n                dealRiver,\n                holeCards,\n                flop,\n                turn,\n                river\n              )}\n            </p>\n          ) : null}\n        </span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}