{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/App.js\";\nimport \"./App.css\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\nimport Hand from \"./components/hand\";\nimport { evaluateHoleCards, evaluateFiveCardHand, evaluateFlop, evaluateRiver, evaluateTurn, isRoyalFlush, isStraightFlush, isFourOfAKind, isFullHouse, isFlush, isStraight, isTrips, isTwoPair, isPair } from \"./components/HandEvaluator.js\";\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  // Constructor that initializes all state variables\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = () => {\n      // If it is postflop\n      if (this.state.dealFlop) {\n        // Only handle checks when betOutstanding = 0\n        // If player is BB\n        if (this.state.betOutstanding === 0 && this.state.players[0].position === 1) {\n          // It is now the bot's turn\n          const players = this.state.players;\n          players[0].turn = false;\n          players[1].turn = true;\n          this.setState({\n            players\n          });\n          setTimeout(() => {\n            this.botAction();\n          }, 3000); // If player is D\n        } else if (this.state.betOutstanding === 0 && this.state.players[0].position === 0) {\n          // Deal next card and have the bot act because this means the bot is BB\n          const players = this.state.players;\n          players[0].turn = false;\n          players[1].turn = true;\n          this.setState({\n            players\n          });\n          setTimeout(() => {\n            this.dealNext();\n          }, 1500);\n          setTimeout(() => {\n            this.botAction();\n          }, 3000);\n        }\n      } // If it is preflop\n      else if (this.state.betOutstanding === 0 && this.state.players[0].position === 1) {\n          // Deal next card and it is also player's turn next since they are out of position\n          const players = this.state.players;\n          players[0].turn = true;\n          players[1].turn = false;\n          this.setState({\n            players\n          }, () => {\n            setTimeout(() => {\n              this.dealNext();\n            }, 1500);\n          });\n        }\n    };\n\n    this.handleCall = () => {\n      // Only handle call if betOutstanding != 0\n      if (this.state.betOutstanding !== 0) {\n        const players = this.state.players; // If call amount is greater than player stack size then just go all in\n\n        if (this.state.betOutstanding > players[0].stackSize) {\n          players[0].betAmount = players[0].stackSize;\n          players[0].stackSize = 0;\n        } // Else remove call amount from player stack size\n        else {\n            players[0].stackSize -= this.state.betOutstanding;\n            players[0].betAmount = players[1].betAmount;\n          } // Update state and variables, deal next card(s), and have either bot or player go\n\n\n        if (players[0].position === 0) {\n          players[0].turn = false;\n          players[1].turn = true;\n        } else {\n          players[0].turn = true;\n          players[1].turn = false;\n        }\n\n        const newPotSize = this.state.potSize + this.state.betOutstanding;\n        this.setState({\n          potSize: newPotSize\n        }, () => {\n          this.setState({\n            betOutstanding: 0\n          }, () => {\n            setTimeout(() => {\n              this.dealNext();\n            }, 1500);\n\n            if (players[0].position === 0) {\n              setTimeout(() => {\n                this.botAction();\n              }, 3000);\n            }\n          });\n        });\n      }\n    };\n\n    this.handleClickRaise = () => {\n      const players = this.state.players; // Display raise amount input textbox\n\n      players[0].viewText = !players[0].viewText;\n      this.setState({\n        players\n      });\n    };\n\n    this.handleRaise = amount => {\n      var raiseAmount = parseInt(amount);\n      const players = this.state.players; // Can only raise max of stack size\n\n      if (raiseAmount > players[0].stackSize) raiseAmount = players[0].stackSize; // Update state and various variables, then call botAction()\n\n      players[0].stackSize -= raiseAmount;\n      players[0].stackSize += players[0].betAmount;\n      players[0].viewText = !players[0].viewText;\n      players[0].turn = false;\n      players[1].turn = true;\n      const newBetOutstanding = raiseAmount - this.state.players[1].betAmount;\n      const newPotSize = this.state.potSize + raiseAmount - players[0].betAmount;\n      players[0].betAmount = raiseAmount;\n      this.setState({\n        betOutstanding: newBetOutstanding\n      }, () => {\n        this.setState({\n          potSize: newPotSize\n        }, () => {\n          this.setState({\n            players\n          }, () => {\n            setTimeout(() => {\n              this.botAction();\n            }, 3000);\n          });\n        });\n      });\n    };\n\n    this.handleFold = () => {\n      // Only fold when there is a bet\n      if (this.state.betOutstanding !== 0) {\n        // Update state and various variables\n        const players = this.state.players;\n        players[0].turn = false;\n        players[1].stackSize += this.state.potSize;\n        this.setState({\n          players\n        }, () => {\n          this.setState({\n            potSize: 0\n          }, () => {\n            this.finishHand();\n          });\n        });\n      }\n    };\n\n    this.updateBlinds = () => {\n      const sb = parseInt(document.getElementById(\"sb\").value);\n      const bb = parseInt(document.getElementById(\"bb\").value);\n      this.setState({\n        smallBlind: sb,\n        bigBlind: bb\n      });\n    };\n\n    this.updateStack = () => {\n      const ss = parseInt(document.getElementById(\"ss\").value);\n      this.setState({\n        startingStack: ss\n      });\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].stackSize = ss;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.botAction = () => {\n      const players = this.state.players; // Check if out of position\n\n      if (this.state.betOutstanding === 0 && players[1].position === 1) {\n        players[0].turn = true;\n        players[1].turn = false;\n        this.setState({\n          players\n        });\n      } // Check if no bet and in position and deal next card(s)\n      else if (this.state.betOutstanding === 0 && players[1].position === 0) {\n          players[0].turn = true;\n          players[1].turn = false;\n          this.setState({\n            players\n          });\n          setTimeout(() => {\n            this.dealNext();\n          }, 1500);\n        } // Otherwise just call and deal next card\n        else {\n            players[1].stackSize -= this.state.betOutstanding;\n            players[1].betAmount = players[0].betAmount;\n            players[0].turn = true;\n            const newPotSize = this.state.potSize + this.state.betOutstanding;\n            this.setState({\n              potSize: newPotSize\n            });\n            this.setState({\n              players\n            });\n            this.setState({\n              betOutstanding: 0\n            });\n\n            if (this.state.dealFlop) {\n              setTimeout(() => {\n                this.dealNext();\n              }, 1500);\n            } else if (players[1].position === 1) {\n              setTimeout(() => {\n                this.dealNext();\n              }, 1500);\n            }\n          }\n    };\n\n    this.startGame = () => {\n      this.setState({\n        startedGame: true\n      }, () => {\n        // Only start game if values of blinds and stack are valid\n        if (this.state.bigBlind > this.state.smallBlind && this.state.startingStack >= this.state.bigBlind) {\n          // Begin game by dealing hole cards\n          this.dealHoleCards();\n        } else {\n          alert(\"Please make sure game settings are valid.\");\n        }\n      });\n    };\n\n    this.pauseGame = () => {\n      const pause = !this.state.isPaused;\n      this.setState({\n        isPaused: pause\n      });\n    };\n\n    this.dealHoleCards = () => {\n      // Make sure no other cards are dealt and displayed besides hole cards\n      this.setState({\n        dealFlop: false\n      }, () => {\n        this.setState({\n          dealTurn: false\n        }, () => {\n          this.setState({\n            dealRiver: false\n          }, () => {\n            this.setState({\n              showBotCards: false\n            }, () => {\n              // Initialize pot size to just the blinds\n              const newPot = this.state.smallBlind + this.state.bigBlind;\n              const sb = this.state.smallBlind;\n              this.setState({\n                potSize: newPot\n              }, () => {\n                this.setState({\n                  betOutstanding: sb\n                }, () => {\n                  this.setState({\n                    finishedHand: false\n                  }, () => {\n                    this.setState({\n                      flop: []\n                    }, () => {\n                      this.setState({\n                        turn: []\n                      }, () => {\n                        this.setState({\n                          river: []\n                        }, () => {\n                          this.setState({\n                            dealHoleCards: true\n                          }); // Deal hole cards if API call returned deck with non zero length\n\n                          if (this.state.cards.length !== 0) {\n                            const playerCards = this.state.cards.slice(0, 2);\n                            const players = this.state.players;\n                            players[0].playerCards = playerCards;\n                            const botCards = this.state.cards.slice(2, 4);\n                            players[1].botCards = botCards;\n                            this.setState({\n                              players\n                            }); // Go to preflop betting\n\n                            this.preFlopBetting();\n                          }\n                        });\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    };\n\n    this.preFlopBetting = () => {\n      const players = this.state.players; // If player is D, initialize stack sizes and bet amounts accordingly\n\n      if (players[0].position === 0) {\n        players[0].turn = true;\n        players[0].stackSize -= this.state.smallBlind;\n        players[0].betAmount = this.state.smallBlind;\n        players[1].betAmount = this.state.bigBlind;\n        players[1].stackSize -= this.state.bigBlind;\n        this.setState({\n          players\n        });\n      } // If player is BB, initialize stack sizes and bet amounts accordingly and call botAction()\n      else {\n          players[1].turn = true;\n          players[0].betAmount = this.state.bigBlind;\n          players[0].stackSize -= this.state.bigBlind;\n          players[1].betAmount = this.state.smallBlind;\n          players[1].stackSize -= this.state.smallBlind;\n          this.setState({\n            players\n          });\n          setTimeout(() => {\n            this.botAction();\n          }, 3000);\n        }\n    };\n\n    this.dealNext = () => {\n      // Set betOutstanding to 0 and determine which street to deal and display\n      this.setState({\n        betOutstanding: 0\n      }, () => {\n        if (this.state.flop.length === 0) this.dealFlop();else if (this.state.turn.length === 0) this.dealTurn();else if (this.state.river.length === 0) this.dealRiver();else this.showDown();\n      });\n    };\n\n    this.dealFlop = () => {\n      this.resetBetAmount();\n      const flop = this.state.cards.slice(4, 7);\n      this.setState({\n        dealFlop: true\n      });\n      this.setState({\n        flop: flop\n      });\n    };\n\n    this.dealTurn = () => {\n      this.resetBetAmount();\n      const turn = this.state.cards.slice(7, 8);\n      this.setState({\n        dealTurn: true\n      });\n      this.setState({\n        turn: turn\n      });\n    };\n\n    this.dealRiver = () => {\n      this.resetBetAmount();\n      const river = this.state.cards.slice(8, 9);\n      this.setState({\n        dealRiver: true\n      });\n      this.setState({\n        river: river\n      });\n    };\n\n    this.showDown = () => {\n      // Display bot cards\n      this.setState({\n        showBotCards: true\n      }, () => {\n        this.setState({\n          finishedHand: true\n        }, () => {\n          // If player had a stronger unique hand\n          if (evaluateRiver(this.state.players[0].playerCards, this.state.flop, this.state.turn, this.state.river) > evaluateRiver(this.state.players[1].botCards, this.state.flop, this.state.turn, this.state.river)) {\n            const players = this.state.players;\n            players[0].turn = false;\n            players[0].stackSize += this.state.potSize;\n            this.setState({\n              players\n            }, () => {\n              this.setState({\n                potSize: 0\n              }, () => {\n                console.log(\"player won\");\n                this.finishHand();\n              });\n            }); // If bot had a stronger unique hand\n          } else if (evaluateRiver(this.state.players[0].playerCards, this.state.flop, this.state.turn, this.state.river) < evaluateRiver(this.state.players[1].botCards, this.state.flop, this.state.turn, this.state.river)) {\n            const players = this.state.players;\n            players[0].turn = false;\n            players[1].stackSize += this.state.potSize;\n            this.setState({\n              players\n            }, () => {\n              this.setState({\n                potSize: 0\n              }, () => {\n                console.log(\"bot won\");\n                this.finishHand();\n              });\n            }); // If both players had same main hand, look for kickers\n          } else {\n            this.splitPot();\n            const players = this.state.players;\n            players[0].turn = false;\n            this.setState({\n              players\n            }, () => {\n              this.setState({\n                potSize: 0\n              }, () => {\n                console.log(\"tie\");\n                this.finishHand();\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.breakTie = () => {\n      if (document.getElementById(\"playerHand\").textContent === \"Royal Flush\") {\n        this.splitPot();\n      }\n    };\n\n    this.splitPot = () => {\n      const players = this.state.players;\n\n      if (this.state.potSize % 2 === 0) {\n        players[0].stackSize += this.state.potSize / 2;\n        players[1].stackSize += this.state.potSize / 2;\n      } else {\n        players[0].stackSize += Math.ceil(this.state.potSize / 2);\n        players[1].stackSize += Math.ceil(this.state.potSize / 2) - 1;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.finishHand = () => {\n      const players = this.state.players; // Switch positions\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].turn = false;\n        players[i].position = 1 - players[i].position;\n      }\n\n      this.setState({\n        players\n      }, () => {\n        this.setState({\n          finishedHand: true\n        }, () => {});\n      });\n    };\n\n    this.resetBetAmount = () => {\n      const players = this.state.players;\n\n      for (var i = 0; i < players.length; i++) {\n        players[i].betAmount = 0;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.state = {\n      // Game specifications\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      // List of players and attributes\n      players: [{\n        id: 1,\n        name: \"Your name\",\n        stackSize: 1000,\n        viewText: false,\n        playerCards: [],\n        position: 0,\n        turn: false,\n        betAmount: 0\n      }, {\n        id: 2,\n        name: \"Bot\",\n        stackSize: 1000,\n        botCards: [],\n        position: 1,\n        turn: false,\n        betAmount: 0\n      }],\n      // Arrays to store cards\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      // Various attributes to determine when to perform specific actions\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      dealHoleCards: false,\n      betOutstanding: 0,\n      showBotCards: false,\n      finishedHand: false,\n      startedGame: false,\n      rank: [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]\n    };\n  } // Retrieve initial shuffled deck of cards upon component mount using DeckOfCards API\n\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({\n      data\n    }) => data);\n    const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n    this.setState({\n      cards\n    });\n  } // Handle check from player\n\n\n  // Method to deal next hand by performing API call and getting new shuffled deck\n  async dealNextHand() {\n    const data = await axios.get(API_URL).then(({\n      data\n    }) => data);\n    const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n    this.setState({\n      cards\n    }, () => {\n      this.dealHoleCards();\n    });\n  } // Method to handle click of Pause Game button\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"HUPoker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Game settings:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"sb\",\n            children: \"Small blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"sb\",\n            name: \"sb\",\n            defaultValue: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 557,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 558,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bb\",\n            children: \"Big blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"bb\",\n            name: \"bb\",\n            defaultValue: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateBlinds,\n            children: \"Update Blinds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"ss\",\n            children: \"Stack size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"ss\",\n            name: \"ss\",\n            defaultValue: \"1000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateStack,\n            children: \"Update Stack\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 578,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            disabled: this.state.startedGame ? 1 : 0,\n            onClick: this.startGame,\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            onClick: this.pauseGame,\n            children: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: this.state.finishedHand ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.dealNextHand(),\n              className: \"btn btn-primary btn-sm m-2\",\n              children: \"Deal Next Hand\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 17\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 592,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Players, {\n          players: this.state.players,\n          onCheck: this.handleCheck,\n          onCall: this.handleCall,\n          onRaise: this.handleClickRaise,\n          onFold: this.handleFold,\n          onRaised: this.handleRaise\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"pot\",\n          children: \"Pot size: \" + this.state.potSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"playerHand\",\n        children: this.state.dealHoleCards ? /*#__PURE__*/_jsxDEV(Hand, {\n          holeCards: this.state.players[0].playerCards,\n          flop: this.state.flop,\n          turn: this.state.turn,\n          river: this.state.river,\n          dealHoleCards: this.state.dealHoleCards,\n          dealFlop: this.state.dealFlop,\n          dealTurn: this.state.dealTurn,\n          dealRiver: this.state.dealRiver\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HoleCards, {\n        holeCards: this.state.players[0].playerCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        dealFlop: this.state.dealFlop,\n        dealTurn: this.state.dealTurn,\n        dealRiver: this.state.dealRiver,\n        flop: this.state.flop,\n        turn: this.state.turn,\n        river: this.state.river\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"botHand\",\n          children: this.state.showBotCards ? /*#__PURE__*/_jsxDEV(Hand, {\n            holeCards: this.state.players[1].botCards,\n            flop: this.state.flop,\n            turn: this.state.turn,\n            river: this.state.river,\n            dealHoleCards: this.state.dealHoleCards,\n            dealFlop: this.state.dealFlop,\n            dealTurn: this.state.dealTurn,\n            dealRiver: this.state.dealRiver\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 15\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 11\n        }, this), this.state.showBotCards ? /*#__PURE__*/_jsxDEV(HoleCards, {\n          holeCards: this.state.players[1].botCards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 654,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/App.js"],"names":["Players","React","Component","axios","HoleCards","Board","Hand","evaluateHoleCards","evaluateFiveCardHand","evaluateFlop","evaluateRiver","evaluateTurn","isRoyalFlush","isStraightFlush","isFourOfAKind","isFullHouse","isFlush","isStraight","isTrips","isTwoPair","isPair","API_URL","App","constructor","props","handleCheck","state","dealFlop","betOutstanding","players","position","turn","setState","setTimeout","botAction","dealNext","handleCall","stackSize","betAmount","newPotSize","potSize","handleClickRaise","viewText","handleRaise","amount","raiseAmount","parseInt","newBetOutstanding","handleFold","finishHand","updateBlinds","sb","document","getElementById","value","bb","smallBlind","bigBlind","updateStack","ss","startingStack","i","length","startGame","startedGame","dealHoleCards","alert","pauseGame","pause","isPaused","dealTurn","dealRiver","showBotCards","newPot","finishedHand","flop","river","cards","playerCards","slice","botCards","preFlopBetting","showDown","resetBetAmount","console","log","splitPot","breakTie","textContent","Math","ceil","id","name","rank","componentDidMount","data","get","then","deck_id","e","dealNextHand","render"],"mappings":";;AAAA,OAAO,WAAP;AACA,OAAOA,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,SACEC,iBADF,EAEEC,oBAFF,EAGEC,YAHF,EAIEC,aAJF,EAKEC,YALF,EAMEC,YANF,EAOEC,eAPF,EAQEC,aARF,EASEC,WATF,EAUEC,OAVF,EAWEC,UAXF,EAYEC,OAZF,EAaEC,SAbF,EAcEC,MAdF,QAeO,+BAfP;AAiBA,MAAMC,OAAO,GAAG,kDAAhB;;AAEA,MAAMC,GAAN,SAAkBpB,SAAlB,CAA4B;AAC1B;AACAqB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAyEnBC,WAzEmB,GAyEL,MAAM;AAClB;AACA,UAAI,KAAKC,KAAL,CAAWC,QAAf,EAAyB;AACvB;AACA;AACA,YACE,KAAKD,KAAL,CAAWE,cAAX,KAA8B,CAA9B,IACA,KAAKF,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBC,QAAtB,KAAmC,CAFrC,EAGE;AACA;AACA,gBAAMD,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;AACAA,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACAF,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACA,eAAKC,QAAL,CAAc;AAAEH,YAAAA;AAAF,WAAd;AACAI,UAAAA,UAAU,CAAC,MAAM;AACf,iBAAKC,SAAL;AACD,WAFS,EAEP,IAFO,CAAV,CANA,CASA;AACD,SAbD,MAaO,IACL,KAAKR,KAAL,CAAWE,cAAX,KAA8B,CAA9B,IACA,KAAKF,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBC,QAAtB,KAAmC,CAF9B,EAGL;AACA;AACA,gBAAMD,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;AACAA,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACAF,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACA,eAAKC,QAAL,CAAc;AAAEH,YAAAA;AAAF,WAAd;AACAI,UAAAA,UAAU,CAAC,MAAM;AACf,iBAAKE,QAAL;AACD,WAFS,EAEP,IAFO,CAAV;AAGAF,UAAAA,UAAU,CAAC,MAAM;AACf,iBAAKC,SAAL;AACD,WAFS,EAEP,IAFO,CAAV;AAGD;AACF,OAhCD,CAiCA;AAjCA,WAkCK,IACH,KAAKR,KAAL,CAAWE,cAAX,KAA8B,CAA9B,IACA,KAAKF,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBC,QAAtB,KAAmC,CAFhC,EAGH;AACA;AACA,gBAAMD,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;AACAA,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACAF,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACA,eAAKC,QAAL,CAAc;AAAEH,YAAAA;AAAF,WAAd,EAA2B,MAAM;AAC/BI,YAAAA,UAAU,CAAC,MAAM;AACf,mBAAKE,QAAL;AACD,aAFS,EAEP,IAFO,CAAV;AAGD,WAJD;AAKD;AACF,KA3HkB;;AAAA,SA8HnBC,UA9HmB,GA8HN,MAAM;AACjB;AACA,UAAI,KAAKV,KAAL,CAAWE,cAAX,KAA8B,CAAlC,EAAqC;AACnC,cAAMC,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B,CADmC,CAEnC;;AACA,YAAI,KAAKH,KAAL,CAAWE,cAAX,GAA4BC,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAA3C,EAAsD;AACpDR,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAX,GAAuBT,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAlC;AACAR,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,GAAuB,CAAvB;AACD,SAHD,CAIA;AAJA,aAKK;AACHR,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAWE,cAAnC;AACAC,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAX,GAAuBT,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAlC;AACD,WAXkC,CAYnC;;;AACA,YAAIT,OAAO,CAAC,CAAD,CAAP,CAAWC,QAAX,KAAwB,CAA5B,EAA+B;AAC7BD,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACAF,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACD,SAHD,MAGO;AACLF,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACAF,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACD;;AACD,cAAMQ,UAAU,GAAG,KAAKb,KAAL,CAAWc,OAAX,GAAqB,KAAKd,KAAL,CAAWE,cAAnD;AACA,aAAKI,QAAL,CAAc;AAAEQ,UAAAA,OAAO,EAAED;AAAX,SAAd,EAAuC,MAAM;AAC3C,eAAKP,QAAL,CAAc;AAAEJ,YAAAA,cAAc,EAAE;AAAlB,WAAd,EAAqC,MAAM;AACzCK,YAAAA,UAAU,CAAC,MAAM;AACf,mBAAKE,QAAL;AACD,aAFS,EAEP,IAFO,CAAV;;AAGA,gBAAIN,OAAO,CAAC,CAAD,CAAP,CAAWC,QAAX,KAAwB,CAA5B,EAA+B;AAC7BG,cAAAA,UAAU,CAAC,MAAM;AACf,qBAAKC,SAAL;AACD,eAFS,EAEP,IAFO,CAAV;AAGD;AACF,WATD;AAUD,SAXD;AAYD;AACF,KAlKkB;;AAAA,SAqKnBO,gBArKmB,GAqKA,MAAM;AACvB,YAAMZ,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B,CADuB,CAEvB;;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWa,QAAX,GAAsB,CAACb,OAAO,CAAC,CAAD,CAAP,CAAWa,QAAlC;AACA,WAAKV,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD,KA1KkB;;AAAA,SA6KnBc,WA7KmB,GA6KJC,MAAD,IAAY;AACxB,UAAIC,WAAW,GAAGC,QAAQ,CAACF,MAAD,CAA1B;AACA,YAAMf,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B,CAFwB,CAGxB;;AACA,UAAIgB,WAAW,GAAGhB,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAA7B,EAAwCQ,WAAW,GAAGhB,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAzB,CAJhB,CAKxB;;AACAR,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwBQ,WAAxB;AACAhB,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwBR,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAnC;AACAT,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWa,QAAX,GAAsB,CAACb,OAAO,CAAC,CAAD,CAAP,CAAWa,QAAlC;AACAb,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACAF,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACA,YAAMgB,iBAAiB,GAAGF,WAAW,GAAG,KAAKnB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBS,SAA9D;AACA,YAAMC,UAAU,GAAG,KAAKb,KAAL,CAAWc,OAAX,GAAqBK,WAArB,GAAmChB,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAjE;AACAT,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAX,GAAuBO,WAAvB;AAEA,WAAKb,QAAL,CAAc;AAAEJ,QAAAA,cAAc,EAAEmB;AAAlB,OAAd,EAAqD,MAAM;AACzD,aAAKf,QAAL,CAAc;AAAEQ,UAAAA,OAAO,EAAED;AAAX,SAAd,EAAuC,MAAM;AAC3C,eAAKP,QAAL,CAAc;AAAEH,YAAAA;AAAF,WAAd,EAA2B,MAAM;AAC/BI,YAAAA,UAAU,CAAC,MAAM;AACf,mBAAKC,SAAL;AACD,aAFS,EAEP,IAFO,CAAV;AAGD,WAJD;AAKD,SAND;AAOD,OARD;AASD,KArMkB;;AAAA,SAwMnBc,UAxMmB,GAwMN,MAAM;AACjB;AACA,UAAI,KAAKtB,KAAL,CAAWE,cAAX,KAA8B,CAAlC,EAAqC;AACnC;AACA,cAAMC,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;AACAA,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACAF,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAWc,OAAnC;AACA,aAAKR,QAAL,CAAc;AAAEH,UAAAA;AAAF,SAAd,EAA2B,MAAM;AAC/B,eAAKG,QAAL,CAAc;AAAEQ,YAAAA,OAAO,EAAE;AAAX,WAAd,EAA8B,MAAM;AAClC,iBAAKS,UAAL;AACD,WAFD;AAGD,SAJD;AAKD;AACF,KArNkB;;AAAA,SAwNnBC,YAxNmB,GAwNJ,MAAM;AACnB,YAAMC,EAAE,GAAGL,QAAQ,CAACM,QAAQ,CAACC,cAAT,CAAwB,IAAxB,EAA8BC,KAA/B,CAAnB;AACA,YAAMC,EAAE,GAAGT,QAAQ,CAACM,QAAQ,CAACC,cAAT,CAAwB,IAAxB,EAA8BC,KAA/B,CAAnB;AACA,WAAKtB,QAAL,CAAc;AAAEwB,QAAAA,UAAU,EAAEL,EAAd;AAAkBM,QAAAA,QAAQ,EAAEF;AAA5B,OAAd;AACD,KA5NkB;;AAAA,SA+NnBG,WA/NmB,GA+NL,MAAM;AAClB,YAAMC,EAAE,GAAGb,QAAQ,CAACM,QAAQ,CAACC,cAAT,CAAwB,IAAxB,EAA8BC,KAA/B,CAAnB;AACA,WAAKtB,QAAL,CAAc;AAAE4B,QAAAA,aAAa,EAAED;AAAjB,OAAd;AACA,YAAM9B,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;;AACA,WAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnC,KAAL,CAAWG,OAAX,CAAmBiC,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClDhC,QAAAA,OAAO,CAACgC,CAAD,CAAP,CAAWxB,SAAX,GAAuBsB,EAAvB;AACD;;AACD,WAAK3B,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD,KAvOkB;;AAAA,SA0OnBK,SA1OmB,GA0OP,MAAM;AAChB,YAAML,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B,CADgB,CAEhB;;AACA,UAAI,KAAKH,KAAL,CAAWE,cAAX,KAA8B,CAA9B,IAAmCC,OAAO,CAAC,CAAD,CAAP,CAAWC,QAAX,KAAwB,CAA/D,EAAkE;AAChED,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACAF,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACA,aAAKC,QAAL,CAAc;AAAEH,UAAAA;AAAF,SAAd;AACD,OAJD,CAKA;AALA,WAMK,IAAI,KAAKH,KAAL,CAAWE,cAAX,KAA8B,CAA9B,IAAmCC,OAAO,CAAC,CAAD,CAAP,CAAWC,QAAX,KAAwB,CAA/D,EAAkE;AACrED,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACAF,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACA,eAAKC,QAAL,CAAc;AAAEH,YAAAA;AAAF,WAAd;AACAI,UAAAA,UAAU,CAAC,MAAM;AACf,iBAAKE,QAAL;AACD,WAFS,EAEP,IAFO,CAAV;AAGD,SAPI,CAQL;AARK,aASA;AACHN,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAWE,cAAnC;AACAC,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAX,GAAuBT,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAlC;AACAT,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACA,kBAAMQ,UAAU,GAAG,KAAKb,KAAL,CAAWc,OAAX,GAAqB,KAAKd,KAAL,CAAWE,cAAnD;AACA,iBAAKI,QAAL,CAAc;AAAEQ,cAAAA,OAAO,EAAED;AAAX,aAAd;AACA,iBAAKP,QAAL,CAAc;AAAEH,cAAAA;AAAF,aAAd;AACA,iBAAKG,QAAL,CAAc;AAAEJ,cAAAA,cAAc,EAAE;AAAlB,aAAd;;AACA,gBAAI,KAAKF,KAAL,CAAWC,QAAf,EAAyB;AACvBM,cAAAA,UAAU,CAAC,MAAM;AACf,qBAAKE,QAAL;AACD,eAFS,EAEP,IAFO,CAAV;AAGD,aAJD,MAIO,IAAIN,OAAO,CAAC,CAAD,CAAP,CAAWC,QAAX,KAAwB,CAA5B,EAA+B;AACpCG,cAAAA,UAAU,CAAC,MAAM;AACf,qBAAKE,QAAL;AACD,eAFS,EAEP,IAFO,CAAV;AAGD;AACF;AACF,KA9QkB;;AAAA,SAiRnB4B,SAjRmB,GAiRP,MAAM;AAChB,WAAK/B,QAAL,CAAc;AAAEgC,QAAAA,WAAW,EAAE;AAAf,OAAd,EAAqC,MAAM;AACzC;AACA,YACE,KAAKtC,KAAL,CAAW+B,QAAX,GAAsB,KAAK/B,KAAL,CAAW8B,UAAjC,IACA,KAAK9B,KAAL,CAAWkC,aAAX,IAA4B,KAAKlC,KAAL,CAAW+B,QAFzC,EAGE;AACA;AACA,eAAKQ,aAAL;AACD,SAND,MAMO;AACLC,UAAAA,KAAK,CAAC,2CAAD,CAAL;AACD;AACF,OAXD;AAYD,KA9RkB;;AAAA,SA8SnBC,SA9SmB,GA8SP,MAAM;AAChB,YAAMC,KAAK,GAAG,CAAC,KAAK1C,KAAL,CAAW2C,QAA1B;AACA,WAAKrC,QAAL,CAAc;AAAEqC,QAAAA,QAAQ,EAAED;AAAZ,OAAd;AACD,KAjTkB;;AAAA,SAoTnBH,aApTmB,GAoTH,MAAM;AACpB;AACA,WAAKjC,QAAL,CAAc;AAAEL,QAAAA,QAAQ,EAAE;AAAZ,OAAd,EAAmC,MAAM;AACvC,aAAKK,QAAL,CAAc;AAAEsC,UAAAA,QAAQ,EAAE;AAAZ,SAAd,EAAmC,MAAM;AACvC,eAAKtC,QAAL,CAAc;AAAEuC,YAAAA,SAAS,EAAE;AAAb,WAAd,EAAoC,MAAM;AACxC,iBAAKvC,QAAL,CAAc;AAAEwC,cAAAA,YAAY,EAAE;AAAhB,aAAd,EAAuC,MAAM;AAC3C;AACA,oBAAMC,MAAM,GAAG,KAAK/C,KAAL,CAAW8B,UAAX,GAAwB,KAAK9B,KAAL,CAAW+B,QAAlD;AACA,oBAAMN,EAAE,GAAG,KAAKzB,KAAL,CAAW8B,UAAtB;AACA,mBAAKxB,QAAL,CAAc;AAAEQ,gBAAAA,OAAO,EAAEiC;AAAX,eAAd,EAAmC,MAAM;AACvC,qBAAKzC,QAAL,CAAc;AAAEJ,kBAAAA,cAAc,EAAEuB;AAAlB,iBAAd,EAAsC,MAAM;AAC1C,uBAAKnB,QAAL,CAAc;AAAE0C,oBAAAA,YAAY,EAAE;AAAhB,mBAAd,EAAuC,MAAM;AAC3C,yBAAK1C,QAAL,CAAc;AAAE2C,sBAAAA,IAAI,EAAE;AAAR,qBAAd,EAA4B,MAAM;AAChC,2BAAK3C,QAAL,CAAc;AAAED,wBAAAA,IAAI,EAAE;AAAR,uBAAd,EAA4B,MAAM;AAChC,6BAAKC,QAAL,CAAc;AAAE4C,0BAAAA,KAAK,EAAE;AAAT,yBAAd,EAA6B,MAAM;AACjC,+BAAK5C,QAAL,CAAc;AAAEiC,4BAAAA,aAAa,EAAE;AAAjB,2BAAd,EADiC,CAEjC;;AACA,8BAAI,KAAKvC,KAAL,CAAWmD,KAAX,CAAiBf,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,kCAAMgB,WAAW,GAAG,KAAKpD,KAAL,CAAWmD,KAAX,CAAiBE,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAApB;AACA,kCAAMlD,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;AACAA,4BAAAA,OAAO,CAAC,CAAD,CAAP,CAAWiD,WAAX,GAAyBA,WAAzB;AAEA,kCAAME,QAAQ,GAAG,KAAKtD,KAAL,CAAWmD,KAAX,CAAiBE,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAjB;AACAlD,4BAAAA,OAAO,CAAC,CAAD,CAAP,CAAWmD,QAAX,GAAsBA,QAAtB;AAEA,iCAAKhD,QAAL,CAAc;AAAEH,8BAAAA;AAAF,6BAAd,EARiC,CASjC;;AACA,iCAAKoD,cAAL;AACD;AACF,yBAfD;AAgBD,uBAjBD;AAkBD,qBAnBD;AAoBD,mBArBD;AAsBD,iBAvBD;AAwBD,eAzBD;AA0BD,aA9BD;AA+BD,WAhCD;AAiCD,SAlCD;AAmCD,OApCD;AAqCD,KA3VkB;;AAAA,SA8VnBA,cA9VmB,GA8VF,MAAM;AACrB,YAAMpD,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B,CADqB,CAErB;;AACA,UAAIA,OAAO,CAAC,CAAD,CAAP,CAAWC,QAAX,KAAwB,CAA5B,EAA+B;AAC7BD,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACAF,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAW8B,UAAnC;AACA3B,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAX,GAAuB,KAAKZ,KAAL,CAAW8B,UAAlC;AACA3B,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAX,GAAuB,KAAKZ,KAAL,CAAW+B,QAAlC;AACA5B,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAW+B,QAAnC;AACA,aAAKzB,QAAL,CAAc;AAAEH,UAAAA;AAAF,SAAd;AACD,OAPD,CAQA;AARA,WASK;AACHA,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,IAAlB;AACAF,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAX,GAAuB,KAAKZ,KAAL,CAAW+B,QAAlC;AACA5B,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAW+B,QAAnC;AACA5B,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,SAAX,GAAuB,KAAKZ,KAAL,CAAW8B,UAAlC;AACA3B,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAW8B,UAAnC;AACA,eAAKxB,QAAL,CAAc;AAAEH,YAAAA;AAAF,WAAd;AACAI,UAAAA,UAAU,CAAC,MAAM;AACf,iBAAKC,SAAL;AACD,WAFS,EAEP,IAFO,CAAV;AAGD;AACF,KArXkB;;AAAA,SAwXnBC,QAxXmB,GAwXR,MAAM;AACf;AACA,WAAKH,QAAL,CAAc;AAAEJ,QAAAA,cAAc,EAAE;AAAlB,OAAd,EAAqC,MAAM;AACzC,YAAI,KAAKF,KAAL,CAAWiD,IAAX,CAAgBb,MAAhB,KAA2B,CAA/B,EAAkC,KAAKnC,QAAL,GAAlC,KACK,IAAI,KAAKD,KAAL,CAAWK,IAAX,CAAgB+B,MAAhB,KAA2B,CAA/B,EAAkC,KAAKQ,QAAL,GAAlC,KACA,IAAI,KAAK5C,KAAL,CAAWkD,KAAX,CAAiBd,MAAjB,KAA4B,CAAhC,EAAmC,KAAKS,SAAL,GAAnC,KACA,KAAKW,QAAL;AACN,OALD;AAMD,KAhYkB;;AAAA,SAmYnBvD,QAnYmB,GAmYR,MAAM;AACf,WAAKwD,cAAL;AACA,YAAMR,IAAI,GAAG,KAAKjD,KAAL,CAAWmD,KAAX,CAAiBE,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAb;AACA,WAAK/C,QAAL,CAAc;AAAEL,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACA,WAAKK,QAAL,CAAc;AAAE2C,QAAAA,IAAI,EAAEA;AAAR,OAAd;AACD,KAxYkB;;AAAA,SA2YnBL,QA3YmB,GA2YR,MAAM;AACf,WAAKa,cAAL;AACA,YAAMpD,IAAI,GAAG,KAAKL,KAAL,CAAWmD,KAAX,CAAiBE,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAb;AACA,WAAK/C,QAAL,CAAc;AAAEsC,QAAAA,QAAQ,EAAE;AAAZ,OAAd;AACA,WAAKtC,QAAL,CAAc;AAAED,QAAAA,IAAI,EAAEA;AAAR,OAAd;AACD,KAhZkB;;AAAA,SAmZnBwC,SAnZmB,GAmZP,MAAM;AAChB,WAAKY,cAAL;AACA,YAAMP,KAAK,GAAG,KAAKlD,KAAL,CAAWmD,KAAX,CAAiBE,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAd;AACA,WAAK/C,QAAL,CAAc;AAAEuC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACA,WAAKvC,QAAL,CAAc;AAAE4C,QAAAA,KAAK,EAAEA;AAAT,OAAd;AACD,KAxZkB;;AAAA,SA2ZnBM,QA3ZmB,GA2ZR,MAAM;AACf;AACA,WAAKlD,QAAL,CAAc;AAAEwC,QAAAA,YAAY,EAAE;AAAhB,OAAd,EAAsC,MAAM;AAC1C,aAAKxC,QAAL,CAAc;AAAE0C,UAAAA,YAAY,EAAE;AAAhB,SAAd,EAAsC,MAAM;AAC1C;AACA,cACEhE,aAAa,CACX,KAAKgB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBiD,WADX,EAEX,KAAKpD,KAAL,CAAWiD,IAFA,EAGX,KAAKjD,KAAL,CAAWK,IAHA,EAIX,KAAKL,KAAL,CAAWkD,KAJA,CAAb,GAMAlE,aAAa,CACX,KAAKgB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBmD,QADX,EAEX,KAAKtD,KAAL,CAAWiD,IAFA,EAGX,KAAKjD,KAAL,CAAWK,IAHA,EAIX,KAAKL,KAAL,CAAWkD,KAJA,CAPf,EAaE;AACA,kBAAM/C,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;AACAA,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACAF,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAWc,OAAnC;AACA,iBAAKR,QAAL,CAAc;AAAEH,cAAAA;AAAF,aAAd,EAA2B,MAAM;AAC/B,mBAAKG,QAAL,CAAc;AAAEQ,gBAAAA,OAAO,EAAE;AAAX,eAAd,EAA8B,MAAM;AAClC4C,gBAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,qBAAKpC,UAAL;AACD,eAHD;AAID,aALD,EAJA,CAUA;AACD,WAxBD,MAwBO,IACLvC,aAAa,CACX,KAAKgB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBiD,WADX,EAEX,KAAKpD,KAAL,CAAWiD,IAFA,EAGX,KAAKjD,KAAL,CAAWK,IAHA,EAIX,KAAKL,KAAL,CAAWkD,KAJA,CAAb,GAMAlE,aAAa,CACX,KAAKgB,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBmD,QADX,EAEX,KAAKtD,KAAL,CAAWiD,IAFA,EAGX,KAAKjD,KAAL,CAAWK,IAHA,EAIX,KAAKL,KAAL,CAAWkD,KAJA,CAPR,EAaL;AACA,kBAAM/C,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;AACAA,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACAF,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAWc,OAAnC;AACA,iBAAKR,QAAL,CAAc;AAAEH,cAAAA;AAAF,aAAd,EAA2B,MAAM;AAC/B,mBAAKG,QAAL,CAAc;AAAEQ,gBAAAA,OAAO,EAAE;AAAX,eAAd,EAA8B,MAAM;AAClC4C,gBAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,qBAAKpC,UAAL;AACD,eAHD;AAID,aALD,EAJA,CAUA;AACD,WAxBM,MAwBA;AACL,iBAAKqC,QAAL;AACA,kBAAMzD,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;AACAA,YAAAA,OAAO,CAAC,CAAD,CAAP,CAAWE,IAAX,GAAkB,KAAlB;AACA,iBAAKC,QAAL,CAAc;AAAEH,cAAAA;AAAF,aAAd,EAA2B,MAAM;AAC/B,mBAAKG,QAAL,CAAc;AAAEQ,gBAAAA,OAAO,EAAE;AAAX,eAAd,EAA8B,MAAM;AAClC4C,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AACA,qBAAKpC,UAAL;AACD,eAHD;AAID,aALD;AAMD;AACF,SA7DD;AA8DD,OA/DD;AAgED,KA7dkB;;AAAA,SA+dnBsC,QA/dmB,GA+dR,MAAM;AACf,UAAInC,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCmC,WAAtC,KAAsD,aAA1D,EAAyE;AACvE,aAAKF,QAAL;AACD;AACF,KAnekB;;AAAA,SAqenBA,QAremB,GAqeR,MAAM;AACf,YAAMzD,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;;AACA,UAAI,KAAKH,KAAL,CAAWc,OAAX,GAAqB,CAArB,KAA2B,CAA/B,EAAkC;AAChCX,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAWc,OAAX,GAAqB,CAA7C;AACAX,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwB,KAAKX,KAAL,CAAWc,OAAX,GAAqB,CAA7C;AACD,OAHD,MAGO;AACLX,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwBoD,IAAI,CAACC,IAAL,CAAU,KAAKhE,KAAL,CAAWc,OAAX,GAAqB,CAA/B,CAAxB;AACAX,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWQ,SAAX,IAAwBoD,IAAI,CAACC,IAAL,CAAU,KAAKhE,KAAL,CAAWc,OAAX,GAAqB,CAA/B,IAAoC,CAA5D;AACD;;AACD,WAAKR,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD,KA/ekB;;AAAA,SAkfnBoB,UAlfmB,GAkfN,MAAM;AACjB,YAAMpB,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B,CADiB,CAEjB;;AACA,WAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKnC,KAAL,CAAWG,OAAX,CAAmBiC,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClDhC,QAAAA,OAAO,CAACgC,CAAD,CAAP,CAAW9B,IAAX,GAAkB,KAAlB;AACAF,QAAAA,OAAO,CAACgC,CAAD,CAAP,CAAW/B,QAAX,GAAsB,IAAID,OAAO,CAACgC,CAAD,CAAP,CAAW/B,QAArC;AACD;;AACD,WAAKE,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd,EAA2B,MAAM;AAC/B,aAAKG,QAAL,CAAc;AAAE0C,UAAAA,YAAY,EAAE;AAAhB,SAAd,EAAsC,MAAM,CAAE,CAA9C;AACD,OAFD;AAGD,KA5fkB;;AAAA,SA+fnBS,cA/fmB,GA+fF,MAAM;AACrB,YAAMtD,OAAO,GAAG,KAAKH,KAAL,CAAWG,OAA3B;;AACA,WAAK,IAAIgC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhC,OAAO,CAACiC,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvChC,QAAAA,OAAO,CAACgC,CAAD,CAAP,CAAWvB,SAAX,GAAuB,CAAvB;AACD;;AACD,WAAKN,QAAL,CAAc;AAAEH,QAAAA;AAAF,OAAd;AACD,KArgBkB;;AAEjB,SAAKH,KAAL,GAAa;AACX;AACA8B,MAAAA,UAAU,EAAE,CAFD;AAGXC,MAAAA,QAAQ,EAAE,EAHC;AAIXG,MAAAA,aAAa,EAAE,IAJJ;AAKX;AACA/B,MAAAA,OAAO,EAAE,CACP;AACE8D,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,IAAI,EAAE,WAFR;AAGEvD,QAAAA,SAAS,EAAE,IAHb;AAIEK,QAAAA,QAAQ,EAAE,KAJZ;AAKEoC,QAAAA,WAAW,EAAE,EALf;AAMEhD,QAAAA,QAAQ,EAAE,CANZ;AAOEC,QAAAA,IAAI,EAAE,KAPR;AAQEO,QAAAA,SAAS,EAAE;AARb,OADO,EAWP;AACEqD,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEvD,QAAAA,SAAS,EAAE,IAHb;AAIE2C,QAAAA,QAAQ,EAAE,EAJZ;AAKElD,QAAAA,QAAQ,EAAE,CALZ;AAMEC,QAAAA,IAAI,EAAE,KANR;AAOEO,QAAAA,SAAS,EAAE;AAPb,OAXO,CANE;AA2BX;AACAuC,MAAAA,KAAK,EAAE,EA5BI;AA6BXF,MAAAA,IAAI,EAAE,EA7BK;AA8BX5C,MAAAA,IAAI,EAAE,EA9BK;AA+BX6C,MAAAA,KAAK,EAAE,EA/BI;AAgCXpC,MAAAA,OAAO,EAAE,CAhCE;AAiCX;AACA6B,MAAAA,QAAQ,EAAE,KAlCC;AAmCX1C,MAAAA,QAAQ,EAAE,KAnCC;AAoCX2C,MAAAA,QAAQ,EAAE,KApCC;AAqCXC,MAAAA,SAAS,EAAE,KArCA;AAsCXN,MAAAA,aAAa,EAAE,KAtCJ;AAuCXrC,MAAAA,cAAc,EAAE,CAvCL;AAwCX4C,MAAAA,YAAY,EAAE,KAxCH;AAyCXE,MAAAA,YAAY,EAAE,KAzCH;AA0CXV,MAAAA,WAAW,EAAE,KA1CF;AA4CX6B,MAAAA,IAAI,EAAE,CACJ,WADI,EAEJ,MAFI,EAGJ,UAHI,EAIJ,iBAJI,EAKJ,UALI,EAMJ,OANI,EAOJ,YAPI,EAQJ,gBARI,EASJ,gBATI,EAUJ,aAVI;AA5CK,KAAb;AAyDD,GA7DyB,CA+D1B;;;AACA,QAAMC,iBAAN,GAA0B;AACxB,UAAMC,IAAI,GAAG,MAAM5F,KAAK,CAAC6F,GAAN,CAAU3E,OAAV,EAAmB4E,IAAnB,CAAwB,CAAC;AAAEF,MAAAA;AAAF,KAAD,KAAcA,IAAtC,CAAnB;AAEA,UAAMlB,KAAK,GAAG,MAAM1E,KAAK,CACtB6F,GADiB,CACZ,uCAAsCD,IAAI,CAACG,OAAQ,iBADvC,EAEjBD,IAFiB,CAEXE,CAAD,IAAOA,CAAC,CAACJ,IAAF,CAAOlB,KAFF,CAApB;AAIA,SAAK7C,QAAL,CAAc;AAAE6C,MAAAA;AAAF,KAAd;AACD,GAxEyB,CA0E1B;;;AAwNA;AACA,QAAMuB,YAAN,GAAqB;AACnB,UAAML,IAAI,GAAG,MAAM5F,KAAK,CAAC6F,GAAN,CAAU3E,OAAV,EAAmB4E,IAAnB,CAAwB,CAAC;AAAEF,MAAAA;AAAF,KAAD,KAAcA,IAAtC,CAAnB;AAEA,UAAMlB,KAAK,GAAG,MAAM1E,KAAK,CACtB6F,GADiB,CACZ,uCAAsCD,IAAI,CAACG,OAAQ,iBADvC,EAEjBD,IAFiB,CAEXE,CAAD,IAAOA,CAAC,CAACJ,IAAF,CAAOlB,KAFF,CAApB;AAIA,SAAK7C,QAAL,CAAc;AAAE6C,MAAAA;AAAF,KAAd,EAAyB,MAAM;AAC7B,WAAKZ,aAAL;AACD,KAFD;AAGD,GA7SyB,CA+S1B;;;AA0NAoC,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,8BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAO,YAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,IAAtB;AAA2B,YAAA,IAAI,EAAC,IAAhC;AAAqC,YAAA,YAAY,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAO,YAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,IAAtB;AAA2B,YAAA,IAAI,EAAC,IAAhC;AAAqC,YAAA,YAAY,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAPF,eAQE;AAAA;AAAA;AAAA;AAAA,kBARF,eASE;AACE,YAAA,SAAS,EAAC,4BADZ;AAEE,YAAA,OAAO,EAAE,KAAKnD,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF,eAeE;AAAA;AAAA;AAAA;AAAA,kBAfF,eAgBE;AAAO,YAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBF,eAiBE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,IAAtB;AAA2B,YAAA,IAAI,EAAC,IAAhC;AAAqC,YAAA,YAAY,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAjBF,eAkBE;AAAA;AAAA;AAAA;AAAA,kBAlBF,eAmBE;AACE,YAAA,SAAS,EAAC,4BADZ;AAEE,YAAA,OAAO,EAAE,KAAKQ,WAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnBF,eAyBE;AAAA;AAAA;AAAA;AAAA,kBAzBF,eA0BE;AACE,YAAA,SAAS,EAAC,4BADZ;AAEE,YAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWsC,WAAX,GAAyB,CAAzB,GAA6B,CAFzC;AAGE,YAAA,OAAO,EAAE,KAAKD,SAHhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA1BF,eAiCE;AACE,YAAA,SAAS,EAAC,4BADZ;AAEE,YAAA,OAAO,EAAE,KAAKI,SAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjCF,eAuCE;AAAA,sBACG,KAAKzC,KAAL,CAAWgD,YAAX,gBACC;AACE,cAAA,OAAO,EAAE,MAAM,KAAK0B,YAAL,EADjB;AAEE,cAAA,SAAS,EAAC,4BAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,GAOG;AARN;AAAA;AAAA;AAAA;AAAA,kBAvCF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAsDE;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA,gCACE,QAAC,OAAD;AACE,UAAA,OAAO,EAAE,KAAK1E,KAAL,CAAWG,OADtB;AAEE,UAAA,OAAO,EAAE,KAAKJ,WAFhB;AAGE,UAAA,MAAM,EAAE,KAAKW,UAHf;AAIE,UAAA,OAAO,EAAE,KAAKK,gBAJhB;AAKE,UAAA,MAAM,EAAE,KAAKO,UALf;AAME,UAAA,QAAQ,EAAE,KAAKL;AANjB;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AAAG,UAAA,EAAE,EAAC,KAAN;AAAA,oBAAa,eAAe,KAAKjB,KAAL,CAAWc;AAAvC;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAtDF,eAiEE;AAAM,QAAA,EAAE,EAAC,YAAT;AAAA,kBACG,KAAKd,KAAL,CAAWuC,aAAX,gBACC,QAAC,IAAD;AACE,UAAA,SAAS,EAAE,KAAKvC,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBiD,WADnC;AAEE,UAAA,IAAI,EAAE,KAAKpD,KAAL,CAAWiD,IAFnB;AAGE,UAAA,IAAI,EAAE,KAAKjD,KAAL,CAAWK,IAHnB;AAIE,UAAA,KAAK,EAAE,KAAKL,KAAL,CAAWkD,KAJpB;AAKE,UAAA,aAAa,EAAE,KAAKlD,KAAL,CAAWuC,aAL5B;AAME,UAAA,QAAQ,EAAE,KAAKvC,KAAL,CAAWC,QANvB;AAOE,UAAA,QAAQ,EAAE,KAAKD,KAAL,CAAW4C,QAPvB;AAQE,UAAA,SAAS,EAAE,KAAK5C,KAAL,CAAW6C;AARxB;AAAA;AAAA;AAAA;AAAA,gBADD,GAWG;AAZN;AAAA;AAAA;AAAA;AAAA,cAjEF,eA+EE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAE,KAAK7C,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBiD;AAA5C;AAAA;AAAA;AAAA;AAAA,cA/EF,eAgFE,QAAC,KAAD;AACE,QAAA,QAAQ,EAAE,KAAKpD,KAAL,CAAWC,QADvB;AAEE,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAW4C,QAFvB;AAGE,QAAA,SAAS,EAAE,KAAK5C,KAAL,CAAW6C,SAHxB;AAIE,QAAA,IAAI,EAAE,KAAK7C,KAAL,CAAWiD,IAJnB;AAKE,QAAA,IAAI,EAAE,KAAKjD,KAAL,CAAWK,IALnB;AAME,QAAA,KAAK,EAAE,KAAKL,KAAL,CAAWkD;AANpB;AAAA;AAAA;AAAA;AAAA,cAhFF,eAwFE;AAAA,gCACE;AAAM,UAAA,EAAE,EAAC,SAAT;AAAA,oBACG,KAAKlD,KAAL,CAAW8C,YAAX,gBACC,QAAC,IAAD;AACE,YAAA,SAAS,EAAE,KAAK9C,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBmD,QADnC;AAEE,YAAA,IAAI,EAAE,KAAKtD,KAAL,CAAWiD,IAFnB;AAGE,YAAA,IAAI,EAAE,KAAKjD,KAAL,CAAWK,IAHnB;AAIE,YAAA,KAAK,EAAE,KAAKL,KAAL,CAAWkD,KAJpB;AAKE,YAAA,aAAa,EAAE,KAAKlD,KAAL,CAAWuC,aAL5B;AAME,YAAA,QAAQ,EAAE,KAAKvC,KAAL,CAAWC,QANvB;AAOE,YAAA,QAAQ,EAAE,KAAKD,KAAL,CAAW4C,QAPvB;AAQE,YAAA,SAAS,EAAE,KAAK5C,KAAL,CAAW6C;AARxB;AAAA;AAAA;AAAA;AAAA,kBADD,GAWG;AAZN;AAAA;AAAA;AAAA;AAAA,gBADF,EAeG,KAAK7C,KAAL,CAAW8C,YAAX,gBACC,QAAC,SAAD;AAAW,UAAA,SAAS,EAAE,KAAK9C,KAAL,CAAWG,OAAX,CAAmB,CAAnB,EAAsBmD;AAA5C;AAAA;AAAA;AAAA;AAAA,gBADD,GAEG,IAjBN;AAAA;AAAA;AAAA;AAAA;AAAA,cAxFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA8GD;;AAxnByB;;AA2nB5B,eAAe1D,GAAf","sourcesContent":["import \"./App.css\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\nimport Hand from \"./components/hand\";\nimport {\n  evaluateHoleCards,\n  evaluateFiveCardHand,\n  evaluateFlop,\n  evaluateRiver,\n  evaluateTurn,\n  isRoyalFlush,\n  isStraightFlush,\n  isFourOfAKind,\n  isFullHouse,\n  isFlush,\n  isStraight,\n  isTrips,\n  isTwoPair,\n  isPair,\n} from \"./components/HandEvaluator.js\";\n\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  // Constructor that initializes all state variables\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Game specifications\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      // List of players and attributes\n      players: [\n        {\n          id: 1,\n          name: \"Your name\",\n          stackSize: 1000,\n          viewText: false,\n          playerCards: [],\n          position: 0,\n          turn: false,\n          betAmount: 0,\n        },\n        {\n          id: 2,\n          name: \"Bot\",\n          stackSize: 1000,\n          botCards: [],\n          position: 1,\n          turn: false,\n          betAmount: 0,\n        },\n      ],\n      // Arrays to store cards\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      // Various attributes to determine when to perform specific actions\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      dealHoleCards: false,\n      betOutstanding: 0,\n      showBotCards: false,\n      finishedHand: false,\n      startedGame: false,\n\n      rank: [\n        \"High card\",\n        \"Pair\",\n        \"Two pair\",\n        \"Three of a kind\",\n        \"Straight\",\n        \"Flush\",\n        \"Full House\",\n        \"Four of a kind\",\n        \"Straight Flush\",\n        \"Royal Flush\",\n      ],\n    };\n  }\n\n  // Retrieve initial shuffled deck of cards upon component mount using DeckOfCards API\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    this.setState({ cards });\n  }\n\n  // Handle check from player\n  handleCheck = () => {\n    // If it is postflop\n    if (this.state.dealFlop) {\n      // Only handle checks when betOutstanding = 0\n      // If player is BB\n      if (\n        this.state.betOutstanding === 0 &&\n        this.state.players[0].position === 1\n      ) {\n        // It is now the bot's turn\n        const players = this.state.players;\n        players[0].turn = false;\n        players[1].turn = true;\n        this.setState({ players });\n        setTimeout(() => {\n          this.botAction();\n        }, 3000);\n        // If player is D\n      } else if (\n        this.state.betOutstanding === 0 &&\n        this.state.players[0].position === 0\n      ) {\n        // Deal next card and have the bot act because this means the bot is BB\n        const players = this.state.players;\n        players[0].turn = false;\n        players[1].turn = true;\n        this.setState({ players });\n        setTimeout(() => {\n          this.dealNext();\n        }, 1500);\n        setTimeout(() => {\n          this.botAction();\n        }, 3000);\n      }\n    }\n    // If it is preflop\n    else if (\n      this.state.betOutstanding === 0 &&\n      this.state.players[0].position === 1\n    ) {\n      // Deal next card and it is also player's turn next since they are out of position\n      const players = this.state.players;\n      players[0].turn = true;\n      players[1].turn = false;\n      this.setState({ players }, () => {\n        setTimeout(() => {\n          this.dealNext();\n        }, 1500);\n      });\n    }\n  };\n\n  // Handle call from player\n  handleCall = () => {\n    // Only handle call if betOutstanding != 0\n    if (this.state.betOutstanding !== 0) {\n      const players = this.state.players;\n      // If call amount is greater than player stack size then just go all in\n      if (this.state.betOutstanding > players[0].stackSize) {\n        players[0].betAmount = players[0].stackSize;\n        players[0].stackSize = 0;\n      }\n      // Else remove call amount from player stack size\n      else {\n        players[0].stackSize -= this.state.betOutstanding;\n        players[0].betAmount = players[1].betAmount;\n      }\n      // Update state and variables, deal next card(s), and have either bot or player go\n      if (players[0].position === 0) {\n        players[0].turn = false;\n        players[1].turn = true;\n      } else {\n        players[0].turn = true;\n        players[1].turn = false;\n      }\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({ potSize: newPotSize }, () => {\n        this.setState({ betOutstanding: 0 }, () => {\n          setTimeout(() => {\n            this.dealNext();\n          }, 1500);\n          if (players[0].position === 0) {\n            setTimeout(() => {\n              this.botAction();\n            }, 3000);\n          }\n        });\n      });\n    }\n  };\n\n  // Handle click of raise button\n  handleClickRaise = () => {\n    const players = this.state.players;\n    // Display raise amount input textbox\n    players[0].viewText = !players[0].viewText;\n    this.setState({ players });\n  };\n\n  // Handle raise from player\n  handleRaise = (amount) => {\n    var raiseAmount = parseInt(amount);\n    const players = this.state.players;\n    // Can only raise max of stack size\n    if (raiseAmount > players[0].stackSize) raiseAmount = players[0].stackSize;\n    // Update state and various variables, then call botAction()\n    players[0].stackSize -= raiseAmount;\n    players[0].stackSize += players[0].betAmount;\n    players[0].viewText = !players[0].viewText;\n    players[0].turn = false;\n    players[1].turn = true;\n    const newBetOutstanding = raiseAmount - this.state.players[1].betAmount;\n    const newPotSize = this.state.potSize + raiseAmount - players[0].betAmount;\n    players[0].betAmount = raiseAmount;\n\n    this.setState({ betOutstanding: newBetOutstanding }, () => {\n      this.setState({ potSize: newPotSize }, () => {\n        this.setState({ players }, () => {\n          setTimeout(() => {\n            this.botAction();\n          }, 3000);\n        });\n      });\n    });\n  };\n\n  // Handle fold from player\n  handleFold = () => {\n    // Only fold when there is a bet\n    if (this.state.betOutstanding !== 0) {\n      // Update state and various variables\n      const players = this.state.players;\n      players[0].turn = false;\n      players[1].stackSize += this.state.potSize;\n      this.setState({ players }, () => {\n        this.setState({ potSize: 0 }, () => {\n          this.finishHand();\n        });\n      });\n    }\n  };\n\n  // Update blinds based on user input\n  updateBlinds = () => {\n    const sb = parseInt(document.getElementById(\"sb\").value);\n    const bb = parseInt(document.getElementById(\"bb\").value);\n    this.setState({ smallBlind: sb, bigBlind: bb });\n  };\n\n  // Update starting stack based on user input\n  updateStack = () => {\n    const ss = parseInt(document.getElementById(\"ss\").value);\n    this.setState({ startingStack: ss });\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].stackSize = ss;\n    }\n    this.setState({ players });\n  };\n\n  // Method to handle bot action logic *CURRENTLY ONLY CHECKS WHEN NO BET AND CALLS WHEN THERE IS A BET*\n  botAction = () => {\n    const players = this.state.players;\n    // Check if out of position\n    if (this.state.betOutstanding === 0 && players[1].position === 1) {\n      players[0].turn = true;\n      players[1].turn = false;\n      this.setState({ players });\n    }\n    // Check if no bet and in position and deal next card(s)\n    else if (this.state.betOutstanding === 0 && players[1].position === 0) {\n      players[0].turn = true;\n      players[1].turn = false;\n      this.setState({ players });\n      setTimeout(() => {\n        this.dealNext();\n      }, 1500);\n    }\n    // Otherwise just call and deal next card\n    else {\n      players[1].stackSize -= this.state.betOutstanding;\n      players[1].betAmount = players[0].betAmount;\n      players[0].turn = true;\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({ potSize: newPotSize });\n      this.setState({ players });\n      this.setState({ betOutstanding: 0 });\n      if (this.state.dealFlop) {\n        setTimeout(() => {\n          this.dealNext();\n        }, 1500);\n      } else if (players[1].position === 1) {\n        setTimeout(() => {\n          this.dealNext();\n        }, 1500);\n      }\n    }\n  };\n\n  // Method to handle click of Start Game button\n  startGame = () => {\n    this.setState({ startedGame: true }, () => {\n      // Only start game if values of blinds and stack are valid\n      if (\n        this.state.bigBlind > this.state.smallBlind &&\n        this.state.startingStack >= this.state.bigBlind\n      ) {\n        // Begin game by dealing hole cards\n        this.dealHoleCards();\n      } else {\n        alert(\"Please make sure game settings are valid.\");\n      }\n    });\n  };\n\n  // Method to deal next hand by performing API call and getting new shuffled deck\n  async dealNextHand() {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    this.setState({ cards }, () => {\n      this.dealHoleCards();\n    });\n  }\n\n  // Method to handle click of Pause Game button\n  pauseGame = () => {\n    const pause = !this.state.isPaused;\n    this.setState({ isPaused: pause });\n  };\n\n  // Method to deal hole cards\n  dealHoleCards = () => {\n    // Make sure no other cards are dealt and displayed besides hole cards\n    this.setState({ dealFlop: false }, () => {\n      this.setState({ dealTurn: false }, () => {\n        this.setState({ dealRiver: false }, () => {\n          this.setState({ showBotCards: false }, () => {\n            // Initialize pot size to just the blinds\n            const newPot = this.state.smallBlind + this.state.bigBlind;\n            const sb = this.state.smallBlind;\n            this.setState({ potSize: newPot }, () => {\n              this.setState({ betOutstanding: sb }, () => {\n                this.setState({ finishedHand: false }, () => {\n                  this.setState({ flop: [] }, () => {\n                    this.setState({ turn: [] }, () => {\n                      this.setState({ river: [] }, () => {\n                        this.setState({ dealHoleCards: true });\n                        // Deal hole cards if API call returned deck with non zero length\n                        if (this.state.cards.length !== 0) {\n                          const playerCards = this.state.cards.slice(0, 2);\n                          const players = this.state.players;\n                          players[0].playerCards = playerCards;\n\n                          const botCards = this.state.cards.slice(2, 4);\n                          players[1].botCards = botCards;\n\n                          this.setState({ players });\n                          // Go to preflop betting\n                          this.preFlopBetting();\n                        }\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  };\n\n  // Method to handle preflop betting\n  preFlopBetting = () => {\n    const players = this.state.players;\n    // If player is D, initialize stack sizes and bet amounts accordingly\n    if (players[0].position === 0) {\n      players[0].turn = true;\n      players[0].stackSize -= this.state.smallBlind;\n      players[0].betAmount = this.state.smallBlind;\n      players[1].betAmount = this.state.bigBlind;\n      players[1].stackSize -= this.state.bigBlind;\n      this.setState({ players });\n    }\n    // If player is BB, initialize stack sizes and bet amounts accordingly and call botAction()\n    else {\n      players[1].turn = true;\n      players[0].betAmount = this.state.bigBlind;\n      players[0].stackSize -= this.state.bigBlind;\n      players[1].betAmount = this.state.smallBlind;\n      players[1].stackSize -= this.state.smallBlind;\n      this.setState({ players });\n      setTimeout(() => {\n        this.botAction();\n      }, 3000);\n    }\n  };\n\n  // Deal next card(s)\n  dealNext = () => {\n    // Set betOutstanding to 0 and determine which street to deal and display\n    this.setState({ betOutstanding: 0 }, () => {\n      if (this.state.flop.length === 0) this.dealFlop();\n      else if (this.state.turn.length === 0) this.dealTurn();\n      else if (this.state.river.length === 0) this.dealRiver();\n      else this.showDown();\n    });\n  };\n\n  // Method to determine and deal flop\n  dealFlop = () => {\n    this.resetBetAmount();\n    const flop = this.state.cards.slice(4, 7);\n    this.setState({ dealFlop: true });\n    this.setState({ flop: flop });\n  };\n\n  // Method to determine and deal turn\n  dealTurn = () => {\n    this.resetBetAmount();\n    const turn = this.state.cards.slice(7, 8);\n    this.setState({ dealTurn: true });\n    this.setState({ turn: turn });\n  };\n\n  // Method to determine and deal river\n  dealRiver = () => {\n    this.resetBetAmount();\n    const river = this.state.cards.slice(8, 9);\n    this.setState({ dealRiver: true });\n    this.setState({ river: river });\n  };\n\n  // Method to deal with hand if it goes to showdown\n  showDown = () => {\n    // Display bot cards\n    this.setState({ showBotCards: true }, () => {\n      this.setState({ finishedHand: true }, () => {\n        // If player had a stronger unique hand\n        if (\n          evaluateRiver(\n            this.state.players[0].playerCards,\n            this.state.flop,\n            this.state.turn,\n            this.state.river\n          ) >\n          evaluateRiver(\n            this.state.players[1].botCards,\n            this.state.flop,\n            this.state.turn,\n            this.state.river\n          )\n        ) {\n          const players = this.state.players;\n          players[0].turn = false;\n          players[0].stackSize += this.state.potSize;\n          this.setState({ players }, () => {\n            this.setState({ potSize: 0 }, () => {\n              console.log(\"player won\");\n              this.finishHand();\n            });\n          });\n          // If bot had a stronger unique hand\n        } else if (\n          evaluateRiver(\n            this.state.players[0].playerCards,\n            this.state.flop,\n            this.state.turn,\n            this.state.river\n          ) <\n          evaluateRiver(\n            this.state.players[1].botCards,\n            this.state.flop,\n            this.state.turn,\n            this.state.river\n          )\n        ) {\n          const players = this.state.players;\n          players[0].turn = false;\n          players[1].stackSize += this.state.potSize;\n          this.setState({ players }, () => {\n            this.setState({ potSize: 0 }, () => {\n              console.log(\"bot won\");\n              this.finishHand();\n            });\n          });\n          // If both players had same main hand, look for kickers\n        } else {\n          this.splitPot();\n          const players = this.state.players;\n          players[0].turn = false;\n          this.setState({ players }, () => {\n            this.setState({ potSize: 0 }, () => {\n              console.log(\"tie\");\n              this.finishHand();\n            });\n          });\n        }\n      });\n    });\n  };\n\n  breakTie = () => {\n    if (document.getElementById(\"playerHand\").textContent === \"Royal Flush\") {\n      this.splitPot();\n    }\n  };\n\n  splitPot = () => {\n    const players = this.state.players;\n    if (this.state.potSize % 2 === 0) {\n      players[0].stackSize += this.state.potSize / 2;\n      players[1].stackSize += this.state.potSize / 2;\n    } else {\n      players[0].stackSize += Math.ceil(this.state.potSize / 2);\n      players[1].stackSize += Math.ceil(this.state.potSize / 2) - 1;\n    }\n    this.setState({ players });\n  };\n\n  // Method to finish up hand\n  finishHand = () => {\n    const players = this.state.players;\n    // Switch positions\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].turn = false;\n      players[i].position = 1 - players[i].position;\n    }\n    this.setState({ players }, () => {\n      this.setState({ finishedHand: true }, () => {});\n    });\n  };\n\n  // Method to reset bet amounts for each player\n  resetBetAmount = () => {\n    const players = this.state.players;\n    for (var i = 0; i < players.length; i++) {\n      players[i].betAmount = 0;\n    }\n    this.setState({ players });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <header>\n          <h1>HUPoker</h1>\n          <div>\n            <b>Game settings:</b>\n            <br></br>\n            <label htmlFor=\"sb\">Small blind:</label>\n            <input type=\"text\" id=\"sb\" name=\"sb\" defaultValue=\"5\"></input>\n            <br></br>\n            <label htmlFor=\"bb\">Big blind:</label>\n            <input type=\"text\" id=\"bb\" name=\"bb\" defaultValue=\"10\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateBlinds}\n            >\n              Update Blinds\n            </button>\n            <br></br>\n            <label htmlFor=\"ss\">Stack size:</label>\n            <input type=\"text\" id=\"ss\" name=\"ss\" defaultValue=\"1000\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateStack}\n            >\n              Update Stack\n            </button>\n            <br></br>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              disabled={this.state.startedGame ? 1 : 0}\n              onClick={this.startGame}\n            >\n              Start Game\n            </button>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              onClick={this.pauseGame}\n            >\n              Pause\n            </button>\n            <span>\n              {this.state.finishedHand ? (\n                <button\n                  onClick={() => this.dealNextHand()}\n                  className=\"btn btn-primary btn-sm m-2\"\n                >\n                  Deal Next Hand\n                </button>\n              ) : null}\n            </span>\n          </div>\n        </header>\n        <main className=\"container\">\n          <Players\n            players={this.state.players}\n            onCheck={this.handleCheck}\n            onCall={this.handleCall}\n            onRaise={this.handleClickRaise}\n            onFold={this.handleFold}\n            onRaised={this.handleRaise}\n          />\n          <p id=\"pot\">{\"Pot size: \" + this.state.potSize}</p>\n        </main>\n        <span id=\"playerHand\">\n          {this.state.dealHoleCards ? (\n            <Hand\n              holeCards={this.state.players[0].playerCards}\n              flop={this.state.flop}\n              turn={this.state.turn}\n              river={this.state.river}\n              dealHoleCards={this.state.dealHoleCards}\n              dealFlop={this.state.dealFlop}\n              dealTurn={this.state.dealTurn}\n              dealRiver={this.state.dealRiver}\n            ></Hand>\n          ) : null}\n        </span>\n        <HoleCards holeCards={this.state.players[0].playerCards}></HoleCards>\n        <Board\n          dealFlop={this.state.dealFlop}\n          dealTurn={this.state.dealTurn}\n          dealRiver={this.state.dealRiver}\n          flop={this.state.flop}\n          turn={this.state.turn}\n          river={this.state.river}\n        ></Board>\n        <div>\n          <span id=\"botHand\">\n            {this.state.showBotCards ? (\n              <Hand\n                holeCards={this.state.players[1].botCards}\n                flop={this.state.flop}\n                turn={this.state.turn}\n                river={this.state.river}\n                dealHoleCards={this.state.dealHoleCards}\n                dealFlop={this.state.dealFlop}\n                dealTurn={this.state.dealTurn}\n                dealRiver={this.state.dealRiver}\n              ></Hand>\n            ) : null}\n          </span>\n          {this.state.showBotCards ? (\n            <HoleCards holeCards={this.state.players[1].botCards}></HoleCards>\n          ) : null}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}