{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/App.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = () => {\n      if (this.state.betOutstanding === 0) {\n        const players = this.state.players;\n        players[0].turn = false;\n        this.setState({\n          players\n        });\n      }\n    };\n\n    this.handleCall = () => {\n      const players = this.state.players;\n      players[0].stackSize -= this.state.betOutstanding;\n      players[0].turn = false;\n      players[0].betAmount = players[1].betAmount;\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({\n        potSize: newPotSize\n      });\n      this.setState({\n        betOutstanding: 0\n      });\n    };\n\n    this.handleClickRaise = () => {\n      const players = this.state.players;\n      players[0].viewText = !players[0].viewText;\n      this.setState({\n        players\n      });\n    };\n\n    this.handleRaise = amount => {\n      const raiseAmount = parseInt(amount);\n      const players = this.state.players;\n      players[0].stackSize -= raiseAmount;\n      players[0].viewText = !players[0].viewText;\n      players[0].turn = false;\n      players[0].betAmount = raiseAmount;\n      const newBetOutstanding = raiseAmount - this.state.betOutstanding;\n      const newPotSize = this.state.potSize + raiseAmount;\n      this.setState({\n        betOutstanding: newBetOutstanding\n      });\n      this.setState({\n        potSize: newPotSize\n      });\n      this.setState({\n        players\n      });\n    };\n\n    this.handleFold = () => {\n      const players = this.state.players;\n      players[0].turn = false;\n      this.finishHand();\n    };\n\n    this.updateBlinds = () => {\n      const sb = parseInt(document.getElementById(\"sb\").value);\n      const bb = parseInt(document.getElementById(\"bb\").value);\n      this.setState({\n        smallBlind: sb,\n        bigBlind: bb\n      });\n    };\n\n    this.updateStack = () => {\n      const ss = parseInt(document.getElementById(\"ss\").value);\n      this.setState({\n        startingStack: ss\n      });\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].stackSize = ss;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.botAction = () => {\n      const players = this.state.players;\n\n      if (this.state.betOutstanding === 0) {\n        players[0].turn = true;\n        this.setState({\n          players\n        });\n      } else {\n        players[1].stackSize -= this.state.betOutstanding;\n        players[1].betAmount = players[0].betAmount;\n        players[0].turn = true;\n        const newPotSize = this.state.potSize + this.state.betOutstanding;\n        this.setState({\n          potSize: newPotSize\n        });\n        this.setState({\n          players\n        });\n        this.setState({\n          betOutstanding: 0\n        });\n      }\n    };\n\n    this.startGame = () => {\n      if (this.state.bigBlind > this.state.smallBlind && this.state.startingStack >= this.state.bigBlind) {\n        //while (!this.state.isPaused){\n        const newPot = this.state.smallBlind + this.state.bigBlind;\n        const sb = this.state.smallBlind;\n        this.setState({\n          potSize: newPot\n        }, () => {\n          this.setState({\n            betOutstanding: sb\n          }, () => {\n            this.getDeck();\n            this.dealHoleCards();\n          });\n        }); //this.dealFlop();\n        //this.dealTurn();\n        //this.dealRiver();\n        //this.finishHand();\n        //continue;\n        //}\n      } else {\n        alert(\"Please make sure game settings are valid.\");\n      }\n    };\n\n    this.pauseGame = () => {\n      const pause = !this.state.isPaused;\n      this.setState({\n        isPaused: pause\n      });\n    };\n\n    this.getDeck = async () => {\n      const data = await axios.get(API_URL).then(({\n        data\n      }) => data);\n      const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n      this.setState({\n        cards\n      });\n    };\n\n    this.dealHoleCards = () => {\n      this.resetBetAmount();\n\n      if (this.state.cards.length !== 0) {\n        const playerCards = this.state.cards.slice(0, 2);\n        const players = this.state.players;\n        players[0].playerCards = playerCards;\n        const botCards = this.state.cards.slice(2, 4);\n        players[1].botCards = botCards;\n        this.setState({\n          players\n        });\n\n        if (players[0].position === 0) {\n          players[0].turn = true;\n        } // while (this.state.betOutstanding !== 0){\n        //   if (players[0].position === 0) {\n        //     players[0].turn = true;\n        //     while (players[0].turn){\n        //       continue;\n        //     }\n        //     this.botAction();\n        //     break;\n        //   }\n        //   else {\n        //     this.botAction();\n        //     break;\n        //   }\n        // }\n\n\n        this.dealFlop();\n      }\n    };\n\n    this.dealFlop = () => {\n      this.resetBetAmount();\n      const flop = this.state.cards.slice(4, 7);\n      this.setState({\n        dealFlop: true\n      });\n      this.setState({\n        flop: flop\n      });\n    };\n\n    this.dealTurn = () => {\n      this.resetBetAmount();\n      const turn = this.state.cards.slice(7, 8);\n      this.setState({\n        dealTurn: true\n      });\n      this.setState({\n        turn: turn\n      });\n    };\n\n    this.dealRiver = () => {\n      this.resetBetAmount();\n      const river = this.state.cards.slice(8, 9);\n      this.setState({\n        dealRiver: true\n      });\n      this.setState({\n        river: river\n      });\n    };\n\n    this.finishHand = () => {\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].turn = false;\n        players[i].position = 1 - players[i].position;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.resetBetAmount = () => {\n      const players = this.state.players;\n\n      for (var i = 0; i < players.length; i++) {\n        players[i].betAmount = 0;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.state = {\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      players: [{\n        id: 1,\n        name: \"Your name\",\n        stackSize: 1000,\n        viewText: false,\n        playerCards: [],\n        position: 0,\n        turn: false,\n        betAmount: 0\n      }, {\n        id: 2,\n        name: \"Bot\",\n        stackSize: 1000,\n        botCards: [],\n        position: 1,\n        turn: false,\n        betAmount: 0\n      }],\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0\n    };\n  }\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({\n      data\n    }) => data);\n    const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n    this.setState({\n      cards\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"HUPoker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Game settings:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"sb\",\n            children: \"Small blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"sb\",\n            name: \"sb\",\n            defaultValue: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bb\",\n            children: \"Big blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"bb\",\n            name: \"bb\",\n            defaultValue: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateBlinds,\n            children: \"Update Blinds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"ss\",\n            children: \"Stack size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"ss\",\n            name: \"ss\",\n            defaultValue: \"1000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 280,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateStack,\n            children: \"Update Stack\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            onClick: this.startGame,\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            onClick: this.pauseGame,\n            children: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Players, {\n          players: this.state.players,\n          onCheck: this.handleCheck,\n          onCall: this.handleCall,\n          onRaise: this.handleClickRaise,\n          onFold: this.handleFold,\n          onRaised: this.handleRaise\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"pot\",\n          children: \"Pot size: \" + this.state.potSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HoleCards, {\n        holeCards: this.state.players[0].playerCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        dealFlop: this.state.dealFlop,\n        dealTurn: this.state.dealTurn,\n        dealRiver: this.state.dealRiver,\n        flop: this.state.flop,\n        turn: this.state.turn,\n        river: this.state.river\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/App.js"],"names":["PlayerBanner","Players","React","Component","axios","Card","HoleCards","Board","API_URL","App","constructor","props","handleCheck","state","betOutstanding","players","turn","setState","handleCall","stackSize","betAmount","newPotSize","potSize","handleClickRaise","viewText","handleRaise","amount","raiseAmount","parseInt","newBetOutstanding","handleFold","finishHand","updateBlinds","sb","document","getElementById","value","bb","smallBlind","bigBlind","updateStack","ss","startingStack","i","length","botAction","startGame","newPot","getDeck","dealHoleCards","alert","pauseGame","pause","isPaused","data","get","then","cards","deck_id","e","resetBetAmount","playerCards","slice","botCards","position","dealFlop","flop","dealTurn","dealRiver","river","id","name","componentDidMount","render"],"mappings":";;;AACA,OAAO,WAAP;AACA,OAAOA,YAAP,MAAyB,2BAAzB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,MAAMC,OAAO,GAAG,kDAAhB;;AAEA,MAAMC,GAAN,SAAkBN,SAAlB,CAA4B;AAC1BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAkDnBC,WAlDmB,GAkDL,MAAM;AAClB,UAAI,KAAKC,KAAL,CAAWC,cAAX,KAA8B,CAAlC,EAAoC;AAClC,cAAMC,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;AACAA,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,GAAkB,KAAlB;AACA,aAAKC,QAAL,CAAc;AAACF,UAAAA;AAAD,SAAd;AACD;AACF,KAxDkB;;AAAA,SA0DnBG,UA1DmB,GA0DN,MAAM;AACjB,YAAMH,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWI,SAAX,IAAwB,KAAKN,KAAL,CAAWC,cAAnC;AACAC,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,GAAkB,KAAlB;AACAD,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWK,SAAX,GAAuBL,OAAO,CAAC,CAAD,CAAP,CAAWK,SAAlC;AACA,YAAMC,UAAU,GAAG,KAAKR,KAAL,CAAWS,OAAX,GAAqB,KAAKT,KAAL,CAAWC,cAAnD;AACA,WAAKG,QAAL,CAAc;AAAEK,QAAAA,OAAO,EAAED;AAAX,OAAd;AACA,WAAKJ,QAAL,CAAc;AAACH,QAAAA,cAAc,EAAE;AAAjB,OAAd;AACD,KAlEkB;;AAAA,SAoEnBS,gBApEmB,GAoEA,MAAM;AACvB,YAAMR,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,QAAX,GAAsB,CAACT,OAAO,CAAC,CAAD,CAAP,CAAWS,QAAlC;AACA,WAAKP,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACD,KAxEkB;;AAAA,SA0EnBU,WA1EmB,GA0EJC,MAAD,IAAY;AACxB,YAAMC,WAAW,GAAGC,QAAQ,CAACF,MAAD,CAA5B;AACA,YAAMX,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWI,SAAX,IAAwBQ,WAAxB;AACAZ,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWS,QAAX,GAAsB,CAACT,OAAO,CAAC,CAAD,CAAP,CAAWS,QAAlC;AACAT,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,GAAkB,KAAlB;AACAD,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWK,SAAX,GAAuBO,WAAvB;AACA,YAAME,iBAAiB,GAAGF,WAAW,GAAG,KAAKd,KAAL,CAAWC,cAAnD;AACA,YAAMO,UAAU,GAAG,KAAKR,KAAL,CAAWS,OAAX,GAAqBK,WAAxC;AACA,WAAKV,QAAL,CAAc;AAAEH,QAAAA,cAAc,EAAEe;AAAlB,OAAd;AACA,WAAKZ,QAAL,CAAc;AAAEK,QAAAA,OAAO,EAAED;AAAX,OAAd;AACA,WAAKJ,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACD,KAtFkB;;AAAA,SAwFnBe,UAxFmB,GAwFN,MAAM;AACjB,YAAMf,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;AACAA,MAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,GAAkB,KAAlB;AACA,WAAKe,UAAL;AACD,KA5FkB;;AAAA,SA8FnBC,YA9FmB,GA8FJ,MAAM;AACnB,YAAMC,EAAE,GAAGL,QAAQ,CAACM,QAAQ,CAACC,cAAT,CAAwB,IAAxB,EAA8BC,KAA/B,CAAnB;AACA,YAAMC,EAAE,GAAGT,QAAQ,CAACM,QAAQ,CAACC,cAAT,CAAwB,IAAxB,EAA8BC,KAA/B,CAAnB;AACA,WAAKnB,QAAL,CAAc;AAAEqB,QAAAA,UAAU,EAAEL,EAAd;AAAkBM,QAAAA,QAAQ,EAAEF;AAA5B,OAAd;AACD,KAlGkB;;AAAA,SAoGnBG,WApGmB,GAoGL,MAAM;AAClB,YAAMC,EAAE,GAAGb,QAAQ,CAACM,QAAQ,CAACC,cAAT,CAAwB,IAAxB,EAA8BC,KAA/B,CAAnB;AACA,WAAKnB,QAAL,CAAc;AAAEyB,QAAAA,aAAa,EAAED;AAAjB,OAAd;AACA,YAAM1B,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;;AACA,WAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK9B,KAAL,CAAWE,OAAX,CAAmB6B,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD5B,QAAAA,OAAO,CAAC4B,CAAD,CAAP,CAAWxB,SAAX,GAAuBsB,EAAvB;AACD;;AACD,WAAKxB,QAAL,CAAc;AAAEF,QAAAA;AAAF,OAAd;AACD,KA5GkB;;AAAA,SA8GnB8B,SA9GmB,GA8GP,MAAM;AAChB,YAAM9B,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;;AACA,UAAI,KAAKF,KAAL,CAAWC,cAAX,KAA8B,CAAlC,EAAoC;AAClCC,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,GAAkB,IAAlB;AACA,aAAKC,QAAL,CAAc;AAACF,UAAAA;AAAD,SAAd;AACD,OAHD,MAIK;AACHA,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWI,SAAX,IAAwB,KAAKN,KAAL,CAAWC,cAAnC;AACAC,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWK,SAAX,GAAuBL,OAAO,CAAC,CAAD,CAAP,CAAWK,SAAlC;AACAL,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,GAAkB,IAAlB;AACA,cAAMK,UAAU,GAAG,KAAKR,KAAL,CAAWS,OAAX,GAAqB,KAAKT,KAAL,CAAWC,cAAnD;AACA,aAAKG,QAAL,CAAc;AAACK,UAAAA,OAAO,EAAED;AAAV,SAAd;AACA,aAAKJ,QAAL,CAAc;AAACF,UAAAA;AAAD,SAAd;AACA,aAAKE,QAAL,CAAc;AAACH,UAAAA,cAAc,EAAE;AAAjB,SAAd;AACD;AACF,KA7HkB;;AAAA,SA+HnBgC,SA/HmB,GA+HP,MAAM;AAChB,UACE,KAAKjC,KAAL,CAAW0B,QAAX,GAAsB,KAAK1B,KAAL,CAAWyB,UAAjC,IACA,KAAKzB,KAAL,CAAW6B,aAAX,IAA4B,KAAK7B,KAAL,CAAW0B,QAFzC,EAGE;AACA;AACA,cAAMQ,MAAM,GAAG,KAAKlC,KAAL,CAAWyB,UAAX,GAAwB,KAAKzB,KAAL,CAAW0B,QAAlD;AACA,cAAMN,EAAE,GAAG,KAAKpB,KAAL,CAAWyB,UAAtB;AACA,aAAKrB,QAAL,CAAc;AAAEK,UAAAA,OAAO,EAAEyB;AAAX,SAAd,EAAmC,MAAM;AACvC,eAAK9B,QAAL,CAAc;AAAEH,YAAAA,cAAc,EAAEmB;AAAlB,WAAd,EAAsC,MAAM;AAC1C,iBAAKe,OAAL;AACJ,iBAAKC,aAAL;AACG,WAHD;AAID,SALD,EAJA,CAYA;AACA;AACA;AACA;AACA;AAEA;AACD,OAtBD,MAsBO;AACLC,QAAAA,KAAK,CAAC,2CAAD,CAAL;AACD;AACF,KAzJkB;;AAAA,SA2JnBC,SA3JmB,GA2JP,MAAM;AAChB,YAAMC,KAAK,GAAG,CAAC,KAAKvC,KAAL,CAAWwC,QAA1B;AACA,WAAKpC,QAAL,CAAc;AAAEoC,QAAAA,QAAQ,EAAED;AAAZ,OAAd;AACD,KA9JkB;;AAAA,SAgKnBJ,OAhKmB,GAgKT,YAAY;AACpB,YAAMM,IAAI,GAAG,MAAMlD,KAAK,CAACmD,GAAN,CAAU/C,OAAV,EAAmBgD,IAAnB,CAAwB,CAAC;AAAEF,QAAAA;AAAF,OAAD,KAAcA,IAAtC,CAAnB;AAEA,YAAMG,KAAK,GAAG,MAAMrD,KAAK,CACtBmD,GADiB,CACZ,uCAAsCD,IAAI,CAACI,OAAQ,iBADvC,EAEjBF,IAFiB,CAEXG,CAAD,IAAOA,CAAC,CAACL,IAAF,CAAOG,KAFF,CAApB;AAIA,WAAKxC,QAAL,CAAc;AAAEwC,QAAAA;AAAF,OAAd;AACD,KAxKkB;;AAAA,SA0KnBR,aA1KmB,GA0KH,MAAM;AACpB,WAAKW,cAAL;;AAEA,UAAI,KAAK/C,KAAL,CAAW4C,KAAX,CAAiBb,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,cAAMiB,WAAW,GAAG,KAAKhD,KAAL,CAAW4C,KAAX,CAAiBK,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAApB;AACA,cAAM/C,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;AACAA,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAW8C,WAAX,GAAyBA,WAAzB;AAEA,cAAME,QAAQ,GAAG,KAAKlD,KAAL,CAAW4C,KAAX,CAAiBK,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAjB;AACA/C,QAAAA,OAAO,CAAC,CAAD,CAAP,CAAWgD,QAAX,GAAsBA,QAAtB;AAEA,aAAK9C,QAAL,CAAc;AAACF,UAAAA;AAAD,SAAd;;AAEA,YAAIA,OAAO,CAAC,CAAD,CAAP,CAAWiD,QAAX,KAAwB,CAA5B,EAA8B;AAC5BjD,UAAAA,OAAO,CAAC,CAAD,CAAP,CAAWC,IAAX,GAAkB,IAAlB;AACD,SAZgC,CAcjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,aAAKiD,QAAL;AACD;AACF,KA3MkB;;AAAA,SA6MnBA,QA7MmB,GA6MR,MAAM;AACf,WAAKL,cAAL;AACA,YAAMM,IAAI,GAAG,KAAKrD,KAAL,CAAW4C,KAAX,CAAiBK,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAb;AACA,WAAK7C,QAAL,CAAc;AAACgD,QAAAA,QAAQ,EAAE;AAAX,OAAd;AACA,WAAKhD,QAAL,CAAc;AAAEiD,QAAAA,IAAI,EAAEA;AAAR,OAAd;AACD,KAlNkB;;AAAA,SAoNnBC,QApNmB,GAoNR,MAAM;AACf,WAAKP,cAAL;AACA,YAAM5C,IAAI,GAAG,KAAKH,KAAL,CAAW4C,KAAX,CAAiBK,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAb;AACA,WAAK7C,QAAL,CAAc;AAACkD,QAAAA,QAAQ,EAAE;AAAX,OAAd;AACA,WAAKlD,QAAL,CAAc;AAAED,QAAAA,IAAI,EAAEA;AAAR,OAAd;AACD,KAzNkB;;AAAA,SA2NnBoD,SA3NmB,GA2NP,MAAM;AAChB,WAAKR,cAAL;AACA,YAAMS,KAAK,GAAG,KAAKxD,KAAL,CAAW4C,KAAX,CAAiBK,KAAjB,CAAuB,CAAvB,EAA0B,CAA1B,CAAd;AACA,WAAK7C,QAAL,CAAc;AAACmD,QAAAA,SAAS,EAAE;AAAZ,OAAd;AACA,WAAKnD,QAAL,CAAc;AAAEoD,QAAAA,KAAK,EAAEA;AAAT,OAAd;AACD,KAhOkB;;AAAA,SAkOnBtC,UAlOmB,GAkON,MAAM;AACjB,YAAMhB,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;;AACA,WAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAK9B,KAAL,CAAWE,OAAX,CAAmB6B,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD5B,QAAAA,OAAO,CAAC4B,CAAD,CAAP,CAAW3B,IAAX,GAAkB,KAAlB;AACAD,QAAAA,OAAO,CAAC4B,CAAD,CAAP,CAAWqB,QAAX,GAAsB,IAAIjD,OAAO,CAAC4B,CAAD,CAAP,CAAWqB,QAArC;AACD;;AACD,WAAK/C,QAAL,CAAc;AAACF,QAAAA;AAAD,OAAd;AACD,KAzOkB;;AAAA,SA2OnB6C,cA3OmB,GA2OF,MAAM;AACrB,YAAM7C,OAAO,GAAG,KAAKF,KAAL,CAAWE,OAA3B;;AACA,WAAK,IAAI4B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG5B,OAAO,CAAC6B,MAA5B,EAAoCD,CAAC,EAArC,EAAwC;AACtC5B,QAAAA,OAAO,CAAC4B,CAAD,CAAP,CAAWvB,SAAX,GAAuB,CAAvB;AACD;;AACD,WAAKH,QAAL,CAAc;AAACF,QAAAA;AAAD,OAAd;AACD,KAjPkB;;AAEjB,SAAKF,KAAL,GAAa;AACXyB,MAAAA,UAAU,EAAE,CADD;AAEXC,MAAAA,QAAQ,EAAE,EAFC;AAGXG,MAAAA,aAAa,EAAE,IAHJ;AAIX3B,MAAAA,OAAO,EAAE,CACP;AACEuD,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,IAAI,EAAE,WAFR;AAGEpD,QAAAA,SAAS,EAAE,IAHb;AAIEK,QAAAA,QAAQ,EAAE,KAJZ;AAKEqC,QAAAA,WAAW,EAAE,EALf;AAMEG,QAAAA,QAAQ,EAAE,CANZ;AAOEhD,QAAAA,IAAI,EAAE,KAPR;AAQEI,QAAAA,SAAS,EAAE;AARb,OADO,EAWP;AACEkD,QAAAA,EAAE,EAAE,CADN;AAEEC,QAAAA,IAAI,EAAE,KAFR;AAGEpD,QAAAA,SAAS,EAAE,IAHb;AAIE4C,QAAAA,QAAQ,EAAE,EAJZ;AAKEC,QAAAA,QAAQ,EAAE,CALZ;AAMEhD,QAAAA,IAAI,EAAE,KANR;AAOEI,QAAAA,SAAS,EAAE;AAPb,OAXO,CAJE;AAyBXqC,MAAAA,KAAK,EAAE,EAzBI;AA0BXS,MAAAA,IAAI,EAAE,EA1BK;AA2BXlD,MAAAA,IAAI,EAAE,EA3BK;AA4BXqD,MAAAA,KAAK,EAAE,EA5BI;AA6BX/C,MAAAA,OAAO,EAAE,CA7BE;AA8BX+B,MAAAA,QAAQ,EAAE,KA9BC;AA+BXY,MAAAA,QAAQ,EAAE,KA/BC;AAgCXE,MAAAA,QAAQ,EAAE,KAhCC;AAiCXC,MAAAA,SAAS,EAAE,KAjCA;AAkCXtD,MAAAA,cAAc,EAAE;AAlCL,KAAb;AAoCD;;AAED,QAAM0D,iBAAN,GAA0B;AACxB,UAAMlB,IAAI,GAAG,MAAMlD,KAAK,CAACmD,GAAN,CAAU/C,OAAV,EAAmBgD,IAAnB,CAAwB,CAAC;AAAEF,MAAAA;AAAF,KAAD,KAAcA,IAAtC,CAAnB;AAEA,UAAMG,KAAK,GAAG,MAAMrD,KAAK,CACtBmD,GADiB,CACZ,uCAAsCD,IAAI,CAACI,OAAQ,iBADvC,EAEjBF,IAFiB,CAEXG,CAAD,IAAOA,CAAC,CAACL,IAAF,CAAOG,KAFF,CAApB;AAIA,SAAKxC,QAAL,CAAc;AAAEwC,MAAAA;AAAF,KAAd;AACD;;AAmMDgB,EAAAA,MAAM,GAAG;AACP,wBACE,QAAC,KAAD,CAAO,QAAP;AAAA,8BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAA;AAAA;AAAA;AAAA,kBAFF,eAGE;AAAO,YAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,IAAtB;AAA2B,YAAA,IAAI,EAAC,IAAhC;AAAqC,YAAA,YAAY,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAJF,eAKE;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAO,YAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF,eAOE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,IAAtB;AAA2B,YAAA,IAAI,EAAC,IAAhC;AAAqC,YAAA,YAAY,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAPF,eAQE;AAAA;AAAA;AAAA;AAAA,kBARF,eASE;AACE,YAAA,SAAS,EAAC,4BADZ;AAEE,YAAA,OAAO,EAAE,KAAKzC,YAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBATF,eAeE;AAAA;AAAA;AAAA;AAAA,kBAfF,eAgBE;AAAO,YAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBF,eAiBE;AAAO,YAAA,IAAI,EAAC,MAAZ;AAAmB,YAAA,EAAE,EAAC,IAAtB;AAA2B,YAAA,IAAI,EAAC,IAAhC;AAAqC,YAAA,YAAY,EAAC;AAAlD;AAAA;AAAA;AAAA;AAAA,kBAjBF,eAkBE;AAAA;AAAA;AAAA;AAAA,kBAlBF,eAmBE;AACE,YAAA,SAAS,EAAC,4BADZ;AAEE,YAAA,OAAO,EAAE,KAAKQ,WAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAnBF,eAyBE;AAAA;AAAA;AAAA;AAAA,kBAzBF,eA0BE;AACE,YAAA,SAAS,EAAC,4BADZ;AAEE,YAAA,OAAO,EAAE,KAAKM,SAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA1BF,eAgCE;AACE,YAAA,SAAS,EAAC,4BADZ;AAEE,YAAA,OAAO,EAAE,KAAKK,SAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhCF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eA2CE;AAAM,QAAA,SAAS,EAAC,WAAhB;AAAA,gCACE,QAAC,OAAD;AACE,UAAA,OAAO,EAAE,KAAKtC,KAAL,CAAWE,OADtB;AAEE,UAAA,OAAO,EAAE,KAAKH,WAFhB;AAGE,UAAA,MAAM,EAAE,KAAKM,UAHf;AAIE,UAAA,OAAO,EAAE,KAAKK,gBAJhB;AAKE,UAAA,MAAM,EAAE,KAAKO,UALf;AAME,UAAA,QAAQ,EAAE,KAAKL;AANjB;AAAA;AAAA;AAAA;AAAA,gBADF,eASE;AAAG,UAAA,EAAE,EAAC,KAAN;AAAA,oBAAa,eAAe,KAAKZ,KAAL,CAAWS;AAAvC;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cA3CF,eAsDE,QAAC,SAAD;AAAW,QAAA,SAAS,EAAE,KAAKT,KAAL,CAAWE,OAAX,CAAmB,CAAnB,EAAsB8C;AAA5C;AAAA;AAAA;AAAA;AAAA,cAtDF,eAuDE,QAAC,KAAD;AACE,QAAA,QAAQ,EAAE,KAAKhD,KAAL,CAAWoD,QADvB;AAEE,QAAA,QAAQ,EAAE,KAAKpD,KAAL,CAAWsD,QAFvB;AAGE,QAAA,SAAS,EAAE,KAAKtD,KAAL,CAAWuD,SAHxB;AAIE,QAAA,IAAI,EAAE,KAAKvD,KAAL,CAAWqD,IAJnB;AAKE,QAAA,IAAI,EAAE,KAAKrD,KAAL,CAAWG,IALnB;AAME,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWwD;AANpB;AAAA;AAAA;AAAA;AAAA,cAvDF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAkED;;AAvTyB;;AA0T5B,eAAe5D,GAAf","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\n\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      players: [\n        {\n          id: 1,\n          name: \"Your name\",\n          stackSize: 1000,\n          viewText: false,\n          playerCards: [],\n          position: 0,\n          turn: false,\n          betAmount: 0,\n        },\n        {\n          id: 2,\n          name: \"Bot\",\n          stackSize: 1000,\n          botCards: [],\n          position: 1,\n          turn: false,\n          betAmount: 0,\n        },\n      ],\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0,\n    };\n  }\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    this.setState({ cards });\n  }\n\n  handleCheck = () => {\n    if (this.state.betOutstanding === 0){\n      const players = this.state.players;\n      players[0].turn = false;\n      this.setState({players});\n    }\n  };\n\n  handleCall = () => {\n    const players = this.state.players;\n    players[0].stackSize -= this.state.betOutstanding;\n    players[0].turn = false;\n    players[0].betAmount = players[1].betAmount;\n    const newPotSize = this.state.potSize + this.state.betOutstanding;\n    this.setState({ potSize: newPotSize });\n    this.setState({betOutstanding: 0});\n  };\n\n  handleClickRaise = () => {\n    const players = this.state.players;\n    players[0].viewText = !players[0].viewText;\n    this.setState({ players });\n  };\n\n  handleRaise = (amount) => {\n    const raiseAmount = parseInt(amount);\n    const players = this.state.players;\n    players[0].stackSize -= raiseAmount;\n    players[0].viewText = !players[0].viewText;\n    players[0].turn = false;\n    players[0].betAmount = raiseAmount;\n    const newBetOutstanding = raiseAmount - this.state.betOutstanding;\n    const newPotSize = this.state.potSize + raiseAmount;\n    this.setState({ betOutstanding: newBetOutstanding });\n    this.setState({ potSize: newPotSize });\n    this.setState({ players });\n  };\n\n  handleFold = () => {\n    const players = this.state.players;\n    players[0].turn = false;\n    this.finishHand();\n  };\n\n  updateBlinds = () => {\n    const sb = parseInt(document.getElementById(\"sb\").value);\n    const bb = parseInt(document.getElementById(\"bb\").value);\n    this.setState({ smallBlind: sb, bigBlind: bb });\n  };\n\n  updateStack = () => {\n    const ss = parseInt(document.getElementById(\"ss\").value);\n    this.setState({ startingStack: ss });\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].stackSize = ss;\n    }\n    this.setState({ players });\n  };\n\n  botAction = () => {\n    const players = this.state.players;\n    if (this.state.betOutstanding === 0){\n      players[0].turn = true;\n      this.setState({players});\n    }\n    else {\n      players[1].stackSize -= this.state.betOutstanding;\n      players[1].betAmount = players[0].betAmount;\n      players[0].turn = true;\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({potSize: newPotSize});\n      this.setState({players});\n      this.setState({betOutstanding: 0});\n    }\n  }\n\n  startGame = () => {\n    if (\n      this.state.bigBlind > this.state.smallBlind &&\n      this.state.startingStack >= this.state.bigBlind\n    ) {\n      //while (!this.state.isPaused){\n      const newPot = this.state.smallBlind + this.state.bigBlind;\n      const sb = this.state.smallBlind;\n      this.setState({ potSize: newPot }, () => {\n        this.setState({ betOutstanding: sb }, () => {\n          this.getDeck();\n      this.dealHoleCards();\n        });\n      });\n             \n      \n      //this.dealFlop();\n      //this.dealTurn();\n      //this.dealRiver();\n      //this.finishHand();\n      //continue;\n\n      //}\n    } else {\n      alert(\"Please make sure game settings are valid.\");\n    }\n  };\n\n  pauseGame = () => {\n    const pause = !this.state.isPaused;\n    this.setState({ isPaused: pause });\n  };\n\n  getDeck = async () => {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    this.setState({ cards });\n  };\n\n  dealHoleCards = () => {\n    this.resetBetAmount();\n    \n    if (this.state.cards.length !== 0) {\n      const playerCards = this.state.cards.slice(0, 2);\n      const players = this.state.players;\n      players[0].playerCards = playerCards;\n\n      const botCards = this.state.cards.slice(2, 4);\n      players[1].botCards = botCards;\n\n      this.setState({players});\n\n      if (players[0].position === 0){\n        players[0].turn = true;\n      }\n\n      // while (this.state.betOutstanding !== 0){\n      //   if (players[0].position === 0) {\n      //     players[0].turn = true;\n      //     while (players[0].turn){\n      //       continue;\n      //     }\n      //     this.botAction();\n      //     break;\n      //   }\n      //   else {\n      //     this.botAction();\n      //     break;\n      //   }\n      // }\n      this.dealFlop();     \n    }\n  };\n\n  dealFlop = () => {\n    this.resetBetAmount();\n    const flop = this.state.cards.slice(4, 7);\n    this.setState({dealFlop: true});\n    this.setState({ flop: flop });\n  };\n\n  dealTurn = () => {\n    this.resetBetAmount();\n    const turn = this.state.cards.slice(7, 8);\n    this.setState({dealTurn: true});\n    this.setState({ turn: turn });\n  };\n\n  dealRiver = () => {\n    this.resetBetAmount();\n    const river = this.state.cards.slice(8, 9);\n    this.setState({dealRiver: true});\n    this.setState({ river: river });\n  };\n\n  finishHand = () => {\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].turn = false;\n      players[i].position = 1 - players[i].position;\n    }\n    this.setState({players});\n  };\n\n  resetBetAmount = () => {\n    const players = this.state.players;\n    for (var i = 0; i < players.length; i++){\n      players[i].betAmount = 0;\n    }\n    this.setState({players});\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <header>\n          <h1>HUPoker</h1>\n          <div>\n            <b>Game settings:</b>\n            <br></br>\n            <label htmlFor=\"sb\">Small blind:</label>\n            <input type=\"text\" id=\"sb\" name=\"sb\" defaultValue=\"5\"></input>\n            <br></br>\n            <label htmlFor=\"bb\">Big blind:</label>\n            <input type=\"text\" id=\"bb\" name=\"bb\" defaultValue=\"10\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateBlinds}\n            >\n              Update Blinds\n            </button>\n            <br></br>\n            <label htmlFor=\"ss\">Stack size:</label>\n            <input type=\"text\" id=\"ss\" name=\"ss\" defaultValue=\"1000\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateStack}\n            >\n              Update Stack\n            </button>\n            <br></br>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              onClick={this.startGame}\n            >\n              Start Game\n            </button>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              onClick={this.pauseGame}\n            >\n              Pause\n            </button>\n          </div>\n        </header>\n        <main className=\"container\">\n          <Players\n            players={this.state.players}\n            onCheck={this.handleCheck}\n            onCall={this.handleCall}\n            onRaise={this.handleClickRaise}\n            onFold={this.handleFold}\n            onRaised={this.handleRaise}\n          />\n          <p id=\"pot\">{\"Pot size: \" + this.state.potSize}</p>\n        </main>\n        <HoleCards holeCards={this.state.players[0].playerCards}></HoleCards>\n        <Board\n          dealFlop={this.state.dealFlop}\n          dealTurn={this.state.dealTurn}\n          dealRiver={this.state.dealRiver}\n          flop={this.state.flop}\n          turn={this.state.turn}\n          river={this.state.river}\n        ></Board>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}