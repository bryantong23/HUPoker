{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/App.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = () => {\n      console.log(\"Check\");\n    };\n\n    this.handleCall = () => {\n      const players = this.state.players;\n      players[0].stackSize -= this.state.betOutstanding;\n      players[0].turn = false;\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({\n        potSize: newPotSize\n      });\n    };\n\n    this.handleClickRaise = () => {\n      const players = this.state.players;\n      players[0].viewText = !players[0].viewText;\n      this.setState({\n        players\n      });\n    };\n\n    this.handleRaise = amount => {\n      const players = this.state.players;\n      players[0].stackSize -= parseInt(amount);\n      players[0].viewText = !players[0].viewText;\n      this.setState({\n        players\n      });\n    };\n\n    this.handleFold = () => {\n      console.log(\"Fold\");\n    };\n\n    this.updateBlinds = () => {\n      const sb = parseInt(document.getElementById(\"sb\").value);\n      const bb = parseInt(document.getElementById(\"bb\").value);\n      this.setState({\n        smallBlind: sb,\n        bigBlind: bb\n      });\n    };\n\n    this.updateStack = () => {\n      const ss = parseInt(document.getElementById(\"ss\").value);\n      this.setState({\n        startingStack: ss\n      });\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].stackSize = ss;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.startGame = () => {\n      if (this.state.bigBlind > this.state.smallBlind && this.state.startingStack >= this.state.bigBlind) {\n        //while (!this.state.isPaused){\n        const newPot = this.state.smallBlind + this.state.bigBlind;\n        this.setState({\n          potSize: newPot\n        });\n        this.getDeck();\n        this.dealHoleCards();\n        this.dealFlop();\n        this.dealTurn();\n        this.dealRiver(); //continue;\n        //}\n      } else {\n        alert(\"Please make sure game settings are valid.\");\n      }\n    };\n\n    this.pauseGame = () => {\n      const pause = !this.state.isPaused;\n      this.setState({\n        isPaused: pause\n      });\n    };\n\n    this.getDeck = async () => {\n      const data = await axios.get(API_URL).then(({\n        data\n      }) => data);\n      const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n      this.setState({\n        cards\n      });\n    };\n\n    this.dealHoleCards = () => {\n      this.setState({\n        betOutstanding: this.state.smallBlind\n      });\n\n      if (this.state.cards.length !== 0) {\n        const playerCards = this.state.cards.slice(0, 2);\n        const players = this.state.players;\n        players[0].playerCards = playerCards;\n        const botCards = this.state.cards.slice(2, 4);\n        players[1].botCards = botCards;\n\n        if (players[0].position === 0) {\n          players[0].turn = true;\n        }\n      }\n    };\n\n    this.dealFlop = () => {\n      const flop = this.state.cards.slice(4, 7);\n      this.setState({\n        flop: flop\n      });\n    };\n\n    this.dealTurn = () => {\n      const turn = this.state.cards.slice(7, 8);\n      this.setState({\n        turn: turn\n      });\n    };\n\n    this.dealRiver = () => {\n      const river = this.state.cards.slice(8, 9);\n      this.setState({\n        river: river\n      });\n    };\n\n    this.state = {\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      players: [{\n        id: 1,\n        name: \"Your name\",\n        stackSize: 1000,\n        viewText: false,\n        playerCards: [],\n        position: 0,\n        turn: false\n      }, {\n        id: 2,\n        name: \"Bot\",\n        stackSize: 1000,\n        botCards: [],\n        position: 1,\n        turn: false\n      }],\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0\n    };\n  }\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({\n      data\n    }) => data);\n    const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n    this.setState({\n      cards\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"HUPoker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Game settings:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"sb\",\n            children: \"Small blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"sb\",\n            name: \"sb\",\n            defaultValue: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bb\",\n            children: \"Big blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"bb\",\n            name: \"bb\",\n            defaultValue: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateBlinds,\n            children: \"Update Blinds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"ss\",\n            children: \"Stack size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"ss\",\n            name: \"ss\",\n            defaultValue: \"1000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateStack,\n            children: \"Update Stack\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            onClick: this.startGame,\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            onClick: this.pauseGame,\n            children: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Players, {\n          players: this.state.players,\n          onCheck: this.handleCheck,\n          onCall: this.handleCall,\n          onRaise: this.handleClickRaise,\n          onFold: this.handleFold,\n          onRaised: this.handleRaise\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"pot\",\n          children: \"Pot size:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"pot\",\n          children: this.state.potSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HoleCards, {\n        holeCards: this.state.players[0].playerCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        dealFlop: this.state.dealFlop,\n        dealTurn: this.state.dealTurn,\n        dealRiver: this.state.dealRiver,\n        flop: this.state.flop,\n        turn: this.state.turn,\n        river: this.state.river\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/App.js"],"names":["PlayerBanner","Players","React","Component","axios","Card","HoleCards","Board","API_URL","App","constructor","props","handleCheck","console","log","handleCall","players","state","stackSize","betOutstanding","turn","newPotSize","potSize","setState","handleClickRaise","viewText","handleRaise","amount","parseInt","handleFold","updateBlinds","sb","document","getElementById","value","bb","smallBlind","bigBlind","updateStack","ss","startingStack","i","length","startGame","newPot","getDeck","dealHoleCards","dealFlop","dealTurn","dealRiver","alert","pauseGame","pause","isPaused","data","get","then","cards","deck_id","e","playerCards","slice","botCards","position","flop","river","id","name","componentDidMount","render"],"mappings":"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","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from 'axios';\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\n\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      players: [\n        {\n          id: 1,\n          name: \"Your name\",\n          stackSize: 1000,\n          viewText: false,\n          playerCards: [],\n          position: 0,\n          turn: false\n        },\n        { id: 2, name: \"Bot\", stackSize: 1000, botCards: [], position: 1, turn: false},\n      ],\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0,\n    };\n  }\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then(e => e.data.cards);\n\n    this.setState({ cards });\n  }\n\n  handleCheck = () => {\n    console.log(\"Check\");\n  }\n\n  handleCall = () => {\n    const players = this.state.players;\n    players[0].stackSize -= this.state.betOutstanding;\n    players[0].turn = false;\n    const newPotSize = this.state.potSize + this.state.betOutstanding;\n    this.setState({potSize: newPotSize});\n  };\n\n  handleClickRaise = () => {\n    const players = this.state.players;\n    players[0].viewText = !players[0].viewText;\n    this.setState({ players });\n  };\n\n  handleRaise = (amount) => {\n    const players = this.state.players;\n    players[0].stackSize -= parseInt(amount);\n    players[0].viewText = !players[0].viewText;\n    this.setState({ players });\n  };\n\n  handleFold = () => {\n    console.log(\"Fold\");\n  };\n\n  updateBlinds = () => {\n    const sb = parseInt(document.getElementById(\"sb\").value);\n    const bb = parseInt(document.getElementById(\"bb\").value);\n    this.setState({ smallBlind: sb, bigBlind: bb });\n  };\n\n  updateStack = () => {\n    const ss = parseInt(document.getElementById(\"ss\").value);\n    this.setState({ startingStack: ss });\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].stackSize = ss;\n    }\n    this.setState({ players });\n  };\n\n  startGame = () => {\n    if (this.state.bigBlind > this.state.smallBlind && this.state.startingStack >= this.state.bigBlind){\n      //while (!this.state.isPaused){\n        const newPot = this.state.smallBlind + this.state.bigBlind;\n        this.setState({potSize: newPot});\n        this.getDeck();\n        this.dealHoleCards();\n        this.dealFlop();\n        this.dealTurn();\n        this.dealRiver();\n        //continue;\n      //}\n    }\n    else {\n      alert(\"Please make sure game settings are valid.\");\n    }\n  }\n  \n\n  pauseGame = () => {\n    const pause = !this.state.isPaused;\n    this.setState({isPaused: pause});\n  }\n\n  getDeck = async() => {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then(e => e.data.cards);\n\n    this.setState({ cards });\n  }\n\n  dealHoleCards = () => {\n    this.setState({betOutstanding: this.state.smallBlind});\n    if (this.state.cards.length !== 0){\n      const playerCards = this.state.cards.slice(0, 2);\n      const players = this.state.players;\n      players[0].playerCards = playerCards;\n\n      const botCards = this.state.cards.slice(2, 4);\n      players[1].botCards = botCards;\n\n      if (players[0].position === 0){\n        players[0].turn = true;\n      }\n    }  \n\n\n  }\n\n  dealFlop = () => {\n    const flop = this.state.cards.slice(4, 7);\n      this.setState({flop: flop});\n\n  }\n\n  dealTurn = () => {\n    const turn = this.state.cards.slice(7, 8);\n      this.setState({turn: turn});\n\n  }\n\n  dealRiver = () => {\n    const river = this.state.cards.slice(8, 9);\n      this.setState({river: river});\n\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <header>\n          <h1>HUPoker</h1>\n          <div>\n            <b>Game settings:</b>\n            <br></br>\n            <label htmlFor=\"sb\">Small blind:</label>\n            <input type=\"text\" id=\"sb\" name=\"sb\" defaultValue=\"5\"></input>\n            <br></br>\n            <label htmlFor=\"bb\">Big blind:</label>\n            <input type=\"text\" id=\"bb\" name=\"bb\" defaultValue=\"10\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateBlinds}\n            >\n              Update Blinds\n            </button>\n            <br></br>\n            <label htmlFor=\"ss\">Stack size:</label>\n            <input type=\"text\" id=\"ss\" name=\"ss\" defaultValue=\"1000\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateStack}\n            >\n              Update Stack\n            </button>\n            <br></br>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              onClick={this.startGame}\n            >\n              Start Game\n            </button>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              onClick={this.pauseGame}\n            >\n              Pause\n            </button>\n          </div>\n        </header>\n        <main className=\"container\">\n          <Players\n            players={this.state.players}\n            onCheck={this.handleCheck}\n            onCall={this.handleCall}\n            onRaise={this.handleClickRaise}\n            onFold={this.handleFold}\n            onRaised={this.handleRaise}\n          />\n          <label htmlFor=\"pot\">Pot size:</label>\n          <p id=\"pot\">{this.state.potSize}</p>\n        </main>\n        <HoleCards holeCards={this.state.players[0].playerCards}></HoleCards>\n        <Board dealFlop={this.state.dealFlop} dealTurn={this.state.dealTurn} dealRiver={this.state.dealRiver} flop={this.state.flop} turn={this.state.turn} river={this.state.river}></Board>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}