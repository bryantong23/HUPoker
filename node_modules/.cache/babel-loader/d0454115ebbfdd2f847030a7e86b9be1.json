{"ast":null,"code":"var values = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"];\nvar rank = [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]; // Evaluate strength of hole cards\n\nexport const evaluateHoleCards = holeCards => {\n  var card1 = holeCards[0].code;\n  var card2 = holeCards[1].code;\n  if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";else {\n    return \"High card\";\n  }\n}; // Evaluate any given 5 card hand\n\nexport const evaluateFiveCardHand = cards => {\n  if (isRoyalFlush(cards)) return 9;\n  if (isStraightFlush(cards)) return 8;\n  if (isFourOfAKind(cards)) return 7;\n  if (isFullHouse(cards)) return 6;\n  if (isFlush(cards)) return 5;\n  if (isStraight(cards)) return 4;\n  if (isTrips(cards)) return 3;\n  if (isTwoPair(cards)) return 2;\n  if (isPair(cards)) return 1;else return 0;\n}; // Evaluate hand after flop\n\nexport const evaluateFlop = (holeCards, flop) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  return rank[evaluateFiveCardHand(cards)];\n}; // Evaluate hand after turn\n\nexport const evaluateTurn = (holeCards, flop, turn) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  cards.push(turn[0].code); // Loop through possible 5 hand combos and return hand with highest strength\n\n  var high = 0;\n\n  for (var k = 0; k < 6; k++) {\n    var tempCards = cards.slice();\n    tempCards.splice(k, 1);\n    if (evaluateFiveCardHand(tempCards) > high) high = evaluateFiveCardHand(tempCards);\n  }\n\n  return rank[high];\n}; // Evaluate hand after river\n\nexport const evaluateRiver = (holeCards, flop, turn, river) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  cards.push(turn[0].code);\n  cards.push(river[0].code);\n  var high = 0; // Loop through possible 5 hand combos and return hand with highest strength\n\n  for (var k = 0; k < cards.length - 1; k++) {\n    for (var l = 1; l < cards.length; l++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      tempCards.splice(l - 1, 1);\n      if (evaluateFiveCardHand(tempCards) > high) high = evaluateFiveCardHand(tempCards);\n    }\n  }\n\n  return rank[high];\n}; // Check if given cards represent a royal flush\n\nexport const isRoyalFlush = cards => {\n  // Must be a straight flush and contain an Ace and 10\n  if (isStraightFlush(cards)) {\n    for (var i = 0; i < cards.length; i++) {\n      if (cards[i].includes(\"A\")) {\n        for (var j = 0; j < cards.length; j++) {\n          if (cards[j].includes(\"0\")) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}; // Check if given cards represent a straight flush\n\nexport const isStraightFlush = cards => {\n  // Must be a straight and a flush\n  if (isFlush(cards) && isStraight(cards)) {\n    return true;\n  }\n\n  return false;\n}; // Check if given cards represent a four of a kind\n\nexport const isFourOfAKind = cards => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(cards[i].substr(0, 1));\n  } // Create a set from array 'vals'\n\n\n  var set = new Set(vals); // Can only be four of a kind if size of set is 2\n\n  if (set.size === 2) {\n    var uniqueVals = Array.from(set); // If one of the elements occurs 4 times then it is four of a kind\n\n    for (var k = 0; k < uniqueVals.length; k++) {\n      var valCount = 0;\n\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[k]) valCount++;\n\n        if (valCount === 4) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}; // Check if given cards represent a full house\n\nexport const isFullHouse = cards => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(cards[i].substr(0, 1));\n  } // Create a set from array 'vals'\n\n\n  var set = new Set(vals); // Can only be full house if size of set is 2\n\n  if (set.size === 2) {\n    var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is full house\n\n    for (var k = 0; k < uniqueVals.length; k++) {\n      var valCount = 0;\n\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[k]) valCount++;\n\n        if (valCount === 3) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}; // Check if given cards represent a flush\n\nexport const isFlush = cards => {\n  // Add all suits of the cards to array 'suits'\n  var suits = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    suits.push(cards[i].substr(1));\n  } // Create a set from array 'suits'\n\n\n  var set = new Set(suits); // Can only be flush if size of set is 1\n\n  if (set.size === 1) {\n    return true;\n  } else return false;\n}; // Check if given cards represent a straight\n\nexport const isStraight = cards => {\n  // Add indices of values of all cards to array 'indices'\n  var indices = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    indices.push(values.indexOf(cards[i].substr(0, 1)));\n  } // Sort 'indices'\n\n\n  indices.sort(function (a, b) {\n    return a - b;\n  }); // Check if it is a wheel straight\n\n  var wheel = [0, 1, 2, 3, 12];\n\n  if (indices.length === wheel.length && indices.every((value, index) => value === wheel[index])) {\n    return true;\n  } // If not a wheel straight determine if it's a regular straight\n  // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n\n\n  for (var j = 0; j < indices.length - 1; j++) {\n    if (indices[j] + 1 !== indices[j + 1]) return false;\n  }\n\n  return true;\n}; // Check if given cards represent trips\n\nexport const isTrips = cards => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n\n  for (var k = 0; k < cards.length; k++) {\n    vals.push(cards[k].substr(0, 1));\n  } // Create a set from array 'vals'\n\n\n  var set = new Set(vals); // Can only be trips if size of set is 3\n\n  if (set.size === 3) {\n    var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is trips\n\n    for (var i = 0; i < uniqueVals.length; i++) {\n      var valCount = 0;\n\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[i]) valCount++;\n\n        if (valCount === 3) {\n          return true;\n        }\n      }\n    }\n  }\n\n  return false;\n}; // Check if given cards represent two pair\n\nexport const isTwoPair = cards => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(cards[i].substr(0, 1));\n  } // Create a set from array 'vals'\n\n\n  var set = new Set(vals); // Can only be two pair of size of set is 3\n\n  if (set.size === 3) {\n    // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n    return true;\n  }\n\n  return false;\n}; // Check if given cards represent a pair\n\nexport const isPair = cards => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(cards[i].substr(0, 1));\n  } // Create a set from array 'vals'\n\n\n  var set = new Set(vals); // Can only be a pair of size of set is 4\n\n  if (set.size === 4) {\n    return true;\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/HandEvaluator.js"],"names":["values","rank","evaluateHoleCards","holeCards","card1","code","card2","substring","evaluateFiveCardHand","cards","isRoyalFlush","isStraightFlush","isFourOfAKind","isFullHouse","isFlush","isStraight","isTrips","isTwoPair","isPair","evaluateFlop","flop","i","length","push","j","evaluateTurn","turn","high","k","tempCards","slice","splice","evaluateRiver","river","l","includes","vals","substr","set","Set","size","uniqueVals","Array","from","valCount","suits","indices","indexOf","sort","a","b","wheel","every","value","index"],"mappings":"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","sourcesContent":["var values = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"];\nvar rank = [\n  \"High card\",\n  \"Pair\",\n  \"Two pair\",\n  \"Three of a kind\",\n  \"Straight\",\n  \"Flush\",\n  \"Full House\",\n  \"Four of a kind\",\n  \"Straight Flush\",\n  \"Royal Flush\",\n];\n\n// Evaluate strength of hole cards\nexport const evaluateHoleCards = (holeCards) => {\n  var card1 = holeCards[0].code;\n  var card2 = holeCards[1].code;\n  if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n  else {\n    return \"High card\";\n  }\n};\n\n// Evaluate any given 5 card hand\nexport const evaluateFiveCardHand = (cards) => {\n  if (isRoyalFlush(cards)) return 9;\n  if (isStraightFlush(cards)) return 8;\n  if (isFourOfAKind(cards)) return 7;\n  if (isFullHouse(cards)) return 6;\n  if (isFlush(cards)) return 5;\n  if (isStraight(cards)) return 4;\n  if (isTrips(cards)) return 3;\n  if (isTwoPair(cards)) return 2;\n  if (isPair(cards)) return 1;\n  else return 0;\n};\n\n// Evaluate hand after flop\nexport const evaluateFlop = (holeCards, flop) => {\n  var cards = [];\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n  return rank[evaluateFiveCardHand(cards)];\n};\n\n// Evaluate hand after turn\nexport const evaluateTurn = (holeCards, flop, turn) => {\n  var cards = [];\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n  cards.push(turn[0].code);\n  // Loop through possible 5 hand combos and return hand with highest strength\n  var high = 0;\n  for (var k = 0; k < 6; k++) {\n    var tempCards = cards.slice();\n    tempCards.splice(k, 1);\n    if (evaluateFiveCardHand(tempCards) > high)\n      high = evaluateFiveCardHand(tempCards);\n  }\n  return rank[high];\n};\n\n// Evaluate hand after river\nexport const evaluateRiver = (holeCards, flop, turn, river) => {\n  var cards = [];\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n  cards.push(turn[0].code);\n  cards.push(river[0].code);\n  var high = 0;\n  // Loop through possible 5 hand combos and return hand with highest strength\n  for (var k = 0; k < cards.length - 1; k++) {\n    for (var l = 1; l < cards.length; l++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      tempCards.splice(l - 1, 1);\n      if (evaluateFiveCardHand(tempCards) > high)\n        high = evaluateFiveCardHand(tempCards);\n    }\n  }\n  return rank[high];\n};\n\n// Check if given cards represent a royal flush\nexport const isRoyalFlush = (cards) => {\n  // Must be a straight flush and contain an Ace and 10\n  if (isStraightFlush(cards)) {\n    for (var i = 0; i < cards.length; i++) {\n      if (cards[i].includes(\"A\")) {\n        for (var j = 0; j < cards.length; j++) {\n          if (cards[j].includes(\"0\")) {\n            return true;\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Check if given cards represent a straight flush\nexport const isStraightFlush = (cards) => {\n  // Must be a straight and a flush\n  if (isFlush(cards) && isStraight(cards)) {\n    return true;\n  }\n  return false;\n};\n\n// Check if given cards represent a four of a kind\nexport const isFourOfAKind = (cards) => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(cards[i].substr(0, 1));\n  }\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be four of a kind if size of set is 2\n  if (set.size === 2) {\n    var uniqueVals = Array.from(set);\n    // If one of the elements occurs 4 times then it is four of a kind\n    for (var k = 0; k < uniqueVals.length; k++) {\n      var valCount = 0;\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[k]) valCount++;\n        if (valCount === 4) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Check if given cards represent a full house\nexport const isFullHouse = (cards) => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(cards[i].substr(0, 1));\n  }\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be full house if size of set is 2\n  if (set.size === 2) {\n    var uniqueVals = Array.from(set);\n    // If one of the elements occurs 3 times then it is full house\n    for (var k = 0; k < uniqueVals.length; k++) {\n      var valCount = 0;\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[k]) valCount++;\n        if (valCount === 3) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Check if given cards represent a flush\nexport const isFlush = (cards) => {\n  // Add all suits of the cards to array 'suits'\n  var suits = [];\n  for (var i = 0; i < cards.length; i++) {\n    suits.push(cards[i].substr(1));\n  }\n  // Create a set from array 'suits'\n  var set = new Set(suits);\n  // Can only be flush if size of set is 1\n  if (set.size === 1) {\n    return true;\n  } else return false;\n};\n\n// Check if given cards represent a straight\nexport const isStraight = (cards) => {\n  // Add indices of values of all cards to array 'indices'\n  var indices = [];\n  for (var i = 0; i < cards.length; i++) {\n    indices.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n  // Sort 'indices'\n  indices.sort(function (a, b) {\n    return a - b;\n  });\n  // Check if it is a wheel straight\n  var wheel = [0, 1, 2, 3, 12];\n  if (\n    indices.length === wheel.length &&\n    indices.every((value, index) => value === wheel[index])\n  ) {\n    return true;\n  }\n  // If not a wheel straight determine if it's a regular straight\n  // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n  for (var j = 0; j < indices.length - 1; j++) {\n    if (indices[j] + 1 !== indices[j + 1]) return false;\n  }\n  return true;\n};\n\n// Check if given cards represent trips\nexport const isTrips = (cards) => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var k = 0; k < cards.length; k++) {\n    vals.push(cards[k].substr(0, 1));\n  }\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be trips if size of set is 3\n  if (set.size === 3) {\n    var uniqueVals = Array.from(set);\n    // If one of the elements occurs 3 times then it is trips\n    for (var i = 0; i < uniqueVals.length; i++) {\n      var valCount = 0;\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[i]) valCount++;\n        if (valCount === 3) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Check if given cards represent two pair\nexport const isTwoPair = (cards) => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(cards[i].substr(0, 1));\n  }\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be two pair of size of set is 3\n  if (set.size === 3) {\n    // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n    return true;\n  }\n  return false;\n};\n\n// Check if given cards represent a pair\nexport const isPair = (cards) => {\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(cards[i].substr(0, 1));\n  }\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be a pair of size of set is 4\n  if (set.size === 4) {\n    return true;\n  }\n  return false;\n};\n"]},"metadata":{},"sourceType":"module"}