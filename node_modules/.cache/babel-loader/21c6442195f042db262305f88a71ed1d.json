{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\"; // Component to represent each player's hand\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n\n    this.displayHand = (dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river) => {\n      // If hole cards haven't been dealt yet don't display anything\n      if (!dealHoleCards) return null; // If flop hasn't been dealt yet only evaluate hole cards\n      else if (!dealFlop) {\n          return Hand.evaluateHoleCards(holeCards);\n        } // If turn hasn't been dealt yet only evaluate hole cards and flop\n        else if (!dealTurn) {\n            return Hand.evaluateFlop(holeCards, flop);\n          } // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n          else if (!dealRiver) {\n              return Hand.evaluateTurn(holeCards, flop, turn);\n            } // Otherwise evaluate all cards\n            else {\n                return Hand.evaluateRiver(holeCards, flop, turn, river);\n              }\n    };\n\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]\n    };\n  } // Evaluate strength of hole cards\n\n\n  // Check if given cards represent a royal flush\n  static isRoyalFlush(cards) {\n    // Must be a straight flush and contain an Ace and 10\n    if (Hand.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) {\n          for (var j = 0; j < cards.length; j++) {\n            if (cards[j].includes(\"0\")) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a straight flush\n\n\n  static isStraightFlush(cards) {\n    // Must be a straight and a flush\n    if (Hand.isFlush(cards) && Hand.isStraight(cards)) {\n      return true;\n    }\n\n    return false;\n  } // Check if given cards represent a four of a kind\n\n\n  static isFourOfAKind(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be four of a kind if size of set is 2\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 4 times then it is four of a kind\n\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n\n          if (valCount === 4) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a full house\n\n\n  static isFullHouse(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be full house if size of set is 2\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is full house\n\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a flush\n\n\n  static isFlush(cards) {\n    // Add all suits of the cards to array 'suits'\n    var suits = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    } // Create a set from array 'suits'\n\n\n    var set = new Set(suits); // Can only be flush if size of set is 1\n\n    if (set.size === 1) {\n      return true;\n    } else return false;\n  } // Check if given cards represent a straight\n\n\n  static isStraight(cards) {\n    // Add indices of values of all cards to array 'indices'\n    var indices = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    } // Sort 'indices'\n\n\n    indices.sort(function (a, b) {\n      return a - b;\n    }); // Check if it is a wheel straight\n\n    var wheel = [0, 1, 2, 3, 12];\n\n    if (indices.length === wheel.length && indices.every((value, index) => value === wheel[index])) {\n      return true;\n    } // If not a wheel straight determine if it's a regular straight\n    // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n\n\n    for (var j = 0; j < indices.length - 1; j++) {\n      if (indices[j] + 1 !== indices[j + 1]) return false;\n    }\n\n    return true;\n  } // Check if given cards represent trips\n\n\n  static isTrips(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var k = 0; k < cards.length; k++) {\n      vals.push(cards[k].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be trips if size of set is 3\n\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is trips\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent two pair\n\n\n  static isTwoPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be two pair of size of set is 3\n\n    if (set.size === 3) {\n      // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n      return true;\n    }\n\n    return false;\n  } // Check if given cards represent a pair\n\n\n  static isPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be a pair of size of set is 4\n\n    if (set.size === 4) {\n      return true;\n    }\n\n    return false;\n  } // Method to display hand strength\n\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.displayHand(dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nHand.evaluateHoleCards = holeCards => {\n  var card1 = holeCards[0].code;\n  var card2 = holeCards[1].code;\n  if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";else {\n    return \"High card\";\n  }\n};\n\nHand.evaluateFiveCardHand = cards => {\n  if (Hand.isRoyalFlush(cards)) return 9;\n  if (Hand.isStraightFlush(cards)) return 8;\n  if (Hand.isFourOfAKind(cards)) return 7;\n  if (Hand.isFullHouse(cards)) return 6;\n  if (Hand.isFlush(cards)) return 5;\n  if (Hand.isStraight(cards)) return 4;\n  if (Hand.isTrips(cards)) return 3;\n  if (Hand.isTwoPair(cards)) return 2;\n  if (Hand.isPair(cards)) return 1;else return 0;\n};\n\nHand.evaluateFlop = (holeCards, flop) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  return Hand.state.rank[Hand.evaluateFiveCardHand(cards)];\n};\n\nHand.evaluateTurn = (holeCards, flop, turn) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  cards.push(turn[0].code); // Loop through possible 5 hand combos and return hand with highest strength\n\n  var high = 0;\n\n  for (var k = 0; k < 6; k++) {\n    var tempCards = cards.slice();\n    tempCards.splice(k, 1);\n    if (Hand.evaluateFiveCardHand(tempCards) > high) high = Hand.evaluateFiveCardHand(tempCards);\n  }\n\n  return Hand.state.rank[high];\n};\n\nHand.evaluateRiver = (holeCards, flop, turn, river) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  cards.push(turn[0].code);\n  cards.push(river[0].code);\n  var high = 0; // Loop through possible 5 hand combos and return hand with highest strength\n\n  for (var k = 0; k < cards.length - 1; k++) {\n    for (var l = 1; l < cards.length; l++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      tempCards.splice(l - 1, 1);\n      if (Hand.evaluateFiveCardHand(tempCards) > high) high = Hand.evaluateFiveCardHand(tempCards);\n    }\n  }\n\n  return Hand.state.rank[high];\n};\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","Hand","constructor","props","displayHand","dealHoleCards","dealFlop","dealTurn","dealRiver","holeCards","flop","turn","river","evaluateHoleCards","evaluateFlop","evaluateTurn","evaluateRiver","state","values","rank","isRoyalFlush","cards","isStraightFlush","i","length","includes","j","isFlush","isStraight","isFourOfAKind","vals","push","substr","set","Set","size","uniqueVals","Array","from","k","valCount","isFullHouse","suits","indices","indexOf","sort","a","b","wheel","every","value","index","isTrips","isTwoPair","isPair","render","card1","code","card2","substring","evaluateFiveCardHand","high","tempCards","slice","splice","l"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\n// Component to represent each player's hand\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\n        \"High card\",\n        \"Pair\",\n        \"Two pair\",\n        \"Three of a kind\",\n        \"Straight\",\n        \"Flush\",\n        \"Full House\",\n        \"Four of a kind\",\n        \"Straight Flush\",\n        \"Royal Flush\",\n      ],\n    };\n  }\n\n  // Evaluate strength of hole cards\n  static evaluateHoleCards = (holeCards) => {\n    var card1 = holeCards[0].code;\n    var card2 = holeCards[1].code;\n    if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n    else {\n      return \"High card\";\n    }\n  };\n\n  // Evaluate any given 5 card hand\n  static evaluateFiveCardHand = (cards) => {\n    if (Hand.isRoyalFlush(cards)) return 9;\n    if (Hand.isStraightFlush(cards)) return 8;\n    if (Hand.isFourOfAKind(cards)) return 7;\n    if (Hand.isFullHouse(cards)) return 6;\n    if (Hand.isFlush(cards)) return 5;\n    if (Hand.isStraight(cards)) return 4;\n    if (Hand.isTrips(cards)) return 3;\n    if (Hand.isTwoPair(cards)) return 2;\n    if (Hand.isPair(cards)) return 1;\n    else return 0;\n  };\n\n  // Evaluate hand after flop\n  static evaluateFlop = (holeCards, flop) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    return Hand.state.rank[Hand.evaluateFiveCardHand(cards)];\n  };\n\n  // Evaluate hand after turn\n  static evaluateTurn = (holeCards, flop, turn) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    cards.push(turn[0].code);\n    // Loop through possible 5 hand combos and return hand with highest strength\n    var high = 0;\n    for (var k = 0; k < 6; k++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      if (Hand.evaluateFiveCardHand(tempCards) > high)\n        high = Hand.evaluateFiveCardHand(tempCards);\n    }\n    return this.state.rank[high];\n  };\n\n  // Evaluate hand after river\n  static evaluateRiver = (holeCards, flop, turn, river) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    cards.push(turn[0].code);\n    cards.push(river[0].code);\n    var high = 0;\n    // Loop through possible 5 hand combos and return hand with highest strength\n    for (var k = 0; k < cards.length - 1; k++) {\n      for (var l = 1; l < cards.length; l++) {\n        var tempCards = cards.slice();\n        tempCards.splice(k, 1);\n        tempCards.splice(l - 1, 1);\n        if (Hand.evaluateFiveCardHand(tempCards) > high)\n          high = Hand.evaluateFiveCardHand(tempCards);\n      }\n    }\n    return this.state.rank[high];\n  };\n\n  // Check if given cards represent a royal flush\n  static isRoyalFlush(cards) {\n    // Must be a straight flush and contain an Ace and 10\n    if (Hand.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) {\n          for (var j = 0; j < cards.length; j++) {\n            if (cards[j].includes(\"0\")) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a straight flush\n  static isStraightFlush(cards) {\n    // Must be a straight and a flush\n    if (Hand.isFlush(cards) && Hand.isStraight(cards)) {\n      return true;\n    }\n    return false;\n  }\n\n  // Check if given cards represent a four of a kind\n  static isFourOfAKind(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be four of a kind if size of set is 2\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 4 times then it is four of a kind\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n          if (valCount === 4) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a full house\n  static isFullHouse(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be full house if size of set is 2\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 3 times then it is full house\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a flush\n  static isFlush(cards) {\n    // Add all suits of the cards to array 'suits'\n    var suits = [];\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    }\n    // Create a set from array 'suits'\n    var set = new Set(suits);\n    // Can only be flush if size of set is 1\n    if (set.size === 1) {\n      return true;\n    } else return false;\n  }\n\n  // Check if given cards represent a straight\n  static isStraight(cards) {\n    // Add indices of values of all cards to array 'indices'\n    var indices = [];\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    }\n    // Sort 'indices'\n    indices.sort(function (a, b) {\n      return a - b;\n    });\n    // Check if it is a wheel straight\n    var wheel = [0, 1, 2, 3, 12];\n    if (\n      indices.length === wheel.length &&\n      indices.every((value, index) => value === wheel[index])\n    ) {\n      return true;\n    }\n    // If not a wheel straight determine if it's a regular straight\n    // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n    for (var j = 0; j < indices.length - 1; j++) {\n      if (indices[j] + 1 !== indices[j + 1]) return false;\n    }\n    return true;\n  }\n\n  // Check if given cards represent trips\n  static isTrips(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var k = 0; k < cards.length; k++) {\n      vals.push(cards[k].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be trips if size of set is 3\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 3 times then it is trips\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent two pair\n  static isTwoPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be two pair of size of set is 3\n    if (set.size === 3) {\n      // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n      return true;\n    }\n    return false;\n  }\n\n  // Check if given cards represent a pair\n  static isPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be a pair of size of set is 4\n    if (set.size === 4) {\n      return true;\n    }\n    return false;\n  }\n\n  // Method to display hand strength\n  displayHand = (\n    dealHoleCards,\n    dealFlop,\n    dealTurn,\n    dealRiver,\n    holeCards,\n    flop,\n    turn,\n    river\n  ) => {\n    // If hole cards haven't been dealt yet don't display anything\n    if (!dealHoleCards) return null;\n    // If flop hasn't been dealt yet only evaluate hole cards\n    else if (!dealFlop) {\n      return Hand.evaluateHoleCards(holeCards);\n    }\n    // If turn hasn't been dealt yet only evaluate hole cards and flop\n    else if (!dealTurn) {\n      return Hand.evaluateFlop(holeCards, flop);\n    }\n    // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n    else if (!dealRiver) {\n      return Hand.evaluateTurn(holeCards, flop, turn);\n    }\n    // Otherwise evaluate all cards\n    else {\n      return Hand.evaluateRiver(holeCards, flop, turn, river);\n    }\n  };\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <span>\n          {dealHoleCards ? (\n            <p>\n              {this.displayHand(\n                dealHoleCards,\n                dealFlop,\n                dealTurn,\n                dealRiver,\n                holeCards,\n                flop,\n                turn,\n                river\n              )}\n            </p>\n          ) : null}\n        </span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}