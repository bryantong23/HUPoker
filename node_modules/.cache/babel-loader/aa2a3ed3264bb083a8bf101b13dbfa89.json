{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\";\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handName = (holeCards, flop, turn, river) => {\n      if (this.state.flop.length === 0) {\n        this.setState({\n          holeCards: holeCards\n        }, () => {\n          return this.evaluateHoleCards(this.state.holeCards);\n        });\n      } else if (this.state.turn.length === 0) {\n        this.setState({\n          flop: flop\n        }, () => {\n          return this.evaluateFlop(this.state.holeCards, this.state.flop);\n        });\n      } else if (this.state.river.length === 0) {\n        this.setState({\n          turn: turn\n        }, () => {\n          return this.evaluateTurn(this.state.holeCards, this.state.flop, this.state.turn);\n        });\n      } else {\n        this.setState({\n          river: river\n        }, () => {\n          return this.evaluateRiver(this.state.holeCards, this.state.flop, this.state.turn, this.state.river);\n        });\n      }\n    };\n\n    this.evaluateHoleCards = holeCards => {\n      var card1 = holeCards[0].code;\n      var card2 = holeCards[1].code;\n      if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair of \" + card1.substring(0, 1) + \"s\";else {\n        if (this.state.values.indexOf(card1.substring(0, 1)) > this.state.values.indexOf(card2.substring(0, 1))) {\n          return card1.substring(0, 1) + \" high\";\n        } else return card2.substring(0, 1) + \" high\";\n      }\n    };\n\n    this.evaluateFlop = (holeCards, flop) => {\n      return \"test\";\n      console.log(\"test\");\n    };\n\n    this.evaluateTurn = (holeCards, flop, turn) => {};\n\n    this.evaluateRiver = (holeCards, flop, turn, river) => {};\n\n    state = {\n      holeCards: this.props.holeCards,\n      flop: [],\n      turn: [],\n      river: [],\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"]\n    };\n  }\n\n  isRoyalFlush(cards) {\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) return true;\n      }\n    }\n\n    return false;\n  }\n\n  isStraightFlush(cards) {\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  isFourOfAKind(cards) {}\n\n  isFullHouse(cards) {}\n\n  isFlush(cards) {\n    for (var i = 0; i < cards.length - 1; i++) {\n      if (cards[i].substr(1) !== cards[i + 1].substr(1)) return false;\n    }\n\n    return true;\n  }\n\n  isStraight(cards) {}\n\n  isTrips(cards) {}\n\n  isTwoPair(cards) {}\n\n  isPair(cards) {}\n\n  render() {\n    const {\n      dealHoleCards,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.handName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 32\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","Hand","constructor","props","handName","holeCards","flop","turn","river","state","length","setState","evaluateHoleCards","evaluateFlop","evaluateTurn","evaluateRiver","card1","code","card2","substring","values","indexOf","console","log","isRoyalFlush","cards","isStraightFlush","i","includes","isFlush","isStraight","isFourOfAKind","isFullHouse","substr","isTrips","isTwoPair","isPair","render","dealHoleCards"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    state = {\n      holeCards: this.props.holeCards,\n      flop: [],\n      turn: [],\n      river: [],\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n    };\n  }\n\n  handName = (holeCards, flop, turn, river) => {\n    if (this.state.flop.length === 0) {\n      this.setState({ holeCards: holeCards }, () => {\n        return this.evaluateHoleCards(this.state.holeCards);\n      });\n    } else if (this.state.turn.length === 0) {\n      this.setState({ flop: flop }, () => {\n        return this.evaluateFlop(this.state.holeCards, this.state.flop);\n      });\n    } else if (this.state.river.length === 0) {\n      this.setState({ turn: turn }, () => {\n        return this.evaluateTurn(\n          this.state.holeCards,\n          this.state.flop,\n          this.state.turn\n        );\n      });\n    } else {\n      this.setState({ river: river }, () => {\n        return this.evaluateRiver(\n          this.state.holeCards,\n          this.state.flop,\n          this.state.turn,\n          this.state.river\n        );\n      });\n    }\n  };\n\n  evaluateHoleCards = (holeCards) => {\n    var card1 = holeCards[0].code;\n    var card2 = holeCards[1].code;\n    if (card1.substring(0, 1) === card2.substring(0, 1))\n      return \"Pair of \" + card1.substring(0, 1) + \"s\";\n    else {\n      if (\n        this.state.values.indexOf(card1.substring(0, 1)) >\n        this.state.values.indexOf(card2.substring(0, 1))\n      ) {\n        return card1.substring(0, 1) + \" high\";\n      } else return card2.substring(0, 1) + \" high\";\n    }\n  };\n\n  evaluateFlop = (holeCards, flop) => {\n    return \"test\";\n    console.log(\"test\");\n  };\n\n  evaluateTurn = (holeCards, flop, turn) => {};\n\n  evaluateRiver = (holeCards, flop, turn, river) => {};\n\n  isRoyalFlush(cards) {\n    if (this.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) return true;\n      }\n    }\n    return false;\n  }\n\n  isStraightFlush(cards) {\n    if (this.isFlush(cards) && this.isStraight(cards)) {\n      return true;\n    }\n    return false;\n  }\n\n  isFourOfAKind(cards) {}\n\n  isFullHouse(cards) {}\n\n  isFlush(cards) {\n    for (var i = 0; i < cards.length - 1; i++) {\n      if (cards[i].substr(1) !== cards[i + 1].substr(1)) return false;\n    }\n    return true;\n  }\n\n  isStraight(cards) {}\n\n  isTrips(cards) {}\n\n  isTwoPair(cards) {}\n\n  isPair(cards) {}\n\n  render() {\n    const { dealHoleCards, holeCards, flop, turn, river } = this.props;\n    return (\n      <React.Fragment>\n        <span>{dealHoleCards ? <p>{this.handName}</p> : null}</span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}