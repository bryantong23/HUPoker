{"ast":null,"code":"var values = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"];\nvar rank = [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]; // Evaluate strength of hole cards\n\nexport const evaluateHoleCards = holeCards => {\n  var card1 = holeCards[0].code;\n  var card2 = holeCards[1].code;\n  if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";else {\n    return \"High card\";\n  }\n}; // Evaluate any given 5 card hand\n\nexport const evaluateFiveCardHand = cards => {\n  if (isRoyalFlush(cards)[0]) return [9, isRoyalFlush(cards)[1]];\n  if (isStraightFlush(cards)[0]) return [8, isStraightFlush(cards)[1]];\n  if (isFourOfAKind(cards)[0]) return [7, isFourOfAKind(cards)[1]];\n  if (isFullHouse(cards)[0]) return [6, isFullHouse(cards)[1]];\n  if (isFlush(cards)[0]) return [5, isFlush(cards)[1]];\n  if (isStraight(cards)[0]) return [4, isStraight(cards)[1]];\n  if (isTrips(cards)[0]) return [3, isTrips(cards)[1]];\n  if (isTwoPair(cards)[0]) return [2, isTwoPair(cards)[1]];\n  if (isPair(cards)[0]) return [1, isPair(cards)[1]];else return [0, highCard(cards)];\n}; // Get exact numerical hand strength\n\nexport const getHandStrength = cards => {}; // Evaluate hand after flop\n\nexport const evaluateFlop = (holeCards, flop) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  const [handRank, score] = evaluateFiveCardHand(cards);\n  return [rank[handRank], score, cards];\n}; // Evaluate hand after turn\n\nexport const evaluateTurn = (holeCards, flop, turn) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  cards.push(turn[0].code); // Loop through possible 5 hand combos and return hand with highest strength\n\n  var highHand = 0;\n  var highScore = 0;\n  var bestCards = [];\n\n  for (var k = 0; k < 6; k++) {\n    var tempCards = cards.slice();\n    tempCards.splice(k, 1);\n\n    if (evaluateFiveCardHand(tempCards)[0] > highHand) {\n      highHand = evaluateFiveCardHand(tempCards)[0];\n      highScore = evaluateFiveCardHand(tempCards)[1];\n      bestCards = tempCards;\n    } else if (evaluateFiveCardHand(tempCards)[0] === highHand && evaluateFiveCardHand(tempCards)[1] > highScore) {\n      highScore = evaluateFiveCardHand(tempCards)[1];\n      bestCards = tempCards;\n    }\n  }\n\n  return [rank[highHand], bestCards, highScore];\n}; // Evaluate hand after river\n\nexport const evaluateRiver = (holeCards, flop, turn, river) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  cards.push(turn[0].code);\n  cards.push(river[0].code);\n  var highHand = 0;\n  var highScore = 0;\n  var bestCards = []; // Loop through possible 5 hand combos and return hand with highest strength\n\n  for (var k = 0; k < cards.length - 1; k++) {\n    for (var l = 1; l < cards.length; l++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      tempCards.splice(l - 1, 1);\n\n      if (evaluateFiveCardHand(tempCards)[1] > highScore) {\n        highHand = evaluateFiveCardHand(tempCards)[0];\n        highScore = evaluateFiveCardHand(tempCards)[1];\n        bestCards = tempCards;\n      } else if (evaluateFiveCardHand(tempCards)[0] === highHand && evaluateFiveCardHand(tempCards)[1] > highScore) {\n        highScore = evaluateFiveCardHand(tempCards)[1];\n        bestCards = tempCards;\n      }\n    }\n  }\n\n  return [rank[highHand], bestCards, highScore];\n}; // Check if given cards represent a royal flush\n\nexport const isRoyalFlush = cards => {\n  let score = 0; // Must be a straight flush and contain an Ace and 10\n\n  if (isStraightFlush(cards)) {\n    for (var i = 0; i < cards.length; i++) {\n      if (cards[i].includes(\"A\")) {\n        for (var j = 0; j < cards.length; j++) {\n          if (cards[j].includes(\"0\")) {\n            score += rank.indexOf(\"Royal Flush\") * 1000000 + values.indexOf(\"A\") + values.indexOf(\"K\") + values.indexOf(\"Q\") + values.indexOf(\"J\") + values.indexOf(\"0\");\n            return [true, score];\n          }\n        }\n      }\n    }\n  }\n\n  return false;\n}; // Check if given cards represent a straight flush\n\nexport const isStraightFlush = cards => {\n  let score = 0; // Must be a straight and a flush\n\n  if (isFlush(cards) && isStraight(cards)) {\n    score += rank.indexOf(\"Straight Flush\") * 1000000;\n\n    for (var i = 0; i < cards.length; i++) {\n      score += values.indexOf(cards[i].substr(0, 1));\n    }\n\n    return [true, score];\n  }\n\n  return false;\n}; // Check if given cards represent a four of a kind\n\nexport const isFourOfAKind = cards => {\n  let score = 0; // Add all the values of the cards to array 'vals'\n\n  var vals = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n\n  vals.sort(function (a, b) {\n    return a - b;\n  }); // Create a set from array 'vals'\n\n  var set = new Set(vals); // Can only be four of a kind if size of set is 2\n\n  if (set.size === 2) {\n    var uniqueVals = Array.from(set); // If one of the elements occurs 4 times then it is four of a kind\n\n    for (var k = 0; k < uniqueVals.length; k++) {\n      var valCount = 0;\n\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[k]) valCount++;\n\n        if (valCount === 4) {\n          score += rank.indexOf(\"Four of a kind\") * 1000000;\n\n          for (var l = 0; l < vals.length - 1; l++) {\n            if (vals[l] === vals[l + 1]) {\n              score += vals[l] * 1000;\n              break;\n            }\n          }\n\n          score += vals[vals.length - 1] * 20 + vals[vals.length - 2] * 10 + vals[vals.length - 3] * 7 + vals[vals.length - 4] * 5 + vals[vals.length - 5] * 2;\n          return [true, score];\n        }\n      }\n    }\n  }\n\n  return false;\n}; // Check if given cards represent a full house\n\nexport const isFullHouse = cards => {\n  let score = 0; // Add all the values of the cards to array 'vals'\n\n  var vals = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n\n  vals.sort(function (a, b) {\n    return a - b;\n  }); // Create a set from array 'vals'\n\n  var set = new Set(vals); // Can only be full house if size of set is 2\n\n  if (set.size === 2) {\n    var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is full house\n\n    for (var k = 0; k < uniqueVals.length; k++) {\n      var valCount = 0;\n\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[k]) valCount++;\n\n        if (valCount === 3) {\n          score += rank.indexOf(\"Full House\") * 1000000;\n\n          for (var l = 0; l < vals.length - 2; l++) {\n            if (vals[l] === vals[l + 1] === vals[l + 2]) {\n              score += vals[l] * 1000;\n              break;\n            }\n          }\n\n          score += vals[vals.length - 1] * 20 + vals[vals.length - 2] * 10 + vals[vals.length - 3] * 7 + vals[vals.length - 4] * 5 + vals[vals.length - 5] * 2;\n          return [true, score];\n        }\n      }\n    }\n  }\n\n  return false;\n}; // Check if given cards represent a flush\n\nexport const isFlush = cards => {\n  let score = 0; // Add all suits of the cards to array 'suits'\n\n  var suits = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    suits.push(cards[i].substr(1));\n  } // Create a set from array 'suits'\n\n\n  var set = new Set(suits); // Can only be flush if size of set is 1\n\n  if (set.size === 1) {\n    score += rank.indexOf(\"Flush\") * 1000000;\n\n    for (var j = 0; j < cards.length; j++) {\n      score += values.indexOf(cards[j].substr(0, 1));\n    }\n\n    return [true, score];\n  } else return false;\n}; // Check if given cards represent a straight\n\nexport const isStraight = cards => {\n  let score = 0; // Add indices of values of all cards to array 'indices'\n\n  var indices = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    indices.push(values.indexOf(cards[i].substr(0, 1)));\n  } // Sort 'indices'\n\n\n  indices.sort(function (a, b) {\n    return a - b;\n  }); // Check if it is a wheel straight\n\n  var wheel = [0, 1, 2, 3, 12];\n\n  if (indices.length === wheel.length && indices.every((value, index) => value === wheel[index])) {\n    score += rank.indexOf(\"Straight\") * 1000000 + 3;\n    return [true, score];\n  } // If not a wheel straight determine if it's a regular straight\n  // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n\n\n  for (var j = 0; j < indices.length - 1; j++) {\n    if (indices[j] + 1 !== indices[j + 1]) return false;\n  }\n\n  score += rank.indexOf(\"Straight\") * 1000000 + indices[indices.length - 1];\n  return [true, score];\n}; // Check if given cards represent trips\n\nexport const isTrips = cards => {\n  let score = 0; // Add all the values of the cards to array 'vals'\n\n  var vals = [];\n\n  for (var k = 0; k < cards.length; k++) {\n    vals.push(values.indexOf(cards[k].substr(0, 1)));\n  }\n\n  vals.sort(function (a, b) {\n    return a - b;\n  }); // Create a set from array 'vals'\n\n  var set = new Set(vals); // Can only be trips if size of set is 3\n\n  if (set.size === 3) {\n    var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is trips\n\n    for (var i = 0; i < uniqueVals.length; i++) {\n      var valCount = 0;\n\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[i]) valCount++;\n\n        if (valCount === 3) {\n          score += rank.indexOf(\"Three of a kind\") * 1000000;\n\n          for (var l = 0; l < vals.length - 1; l++) {\n            if (vals[l] === vals[l + 1]) {\n              score += vals[l] * 1000;\n              break;\n            }\n          }\n\n          score += vals[vals.length - 1] * 20 + vals[vals.length - 2] * 10 + vals[vals.length - 3] * 7 + vals[vals.length - 4] * 5 + vals[vals.length - 5] * 2;\n          return [true, score];\n        }\n      }\n    }\n  }\n\n  return false;\n}; // Check if given cards represent two pair\n\nexport const isTwoPair = cards => {\n  let score = 0; // Add all the values of the cards to array 'vals'\n\n  var vals = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n\n  vals.sort(function (a, b) {\n    return a - b;\n  }); // Create a set from array 'vals'\n\n  var set = new Set(vals); // Can only be two pair of size of set is 3\n\n  if (set.size === 3) {\n    // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n    score += rank.indexOf(\"Two pair\") * 1000000;\n\n    for (var j = 0; j < vals.length - 1; j++) {\n      if (vals[j] === vals[j + 1]) score += vals[j] * 1000;\n    }\n\n    score += vals[vals.length - 1] * 20 + vals[vals.length - 2] * 10 + vals[vals.length - 3] * 7 + vals[vals.length - 4] * 5 + vals[vals.length - 5] * 2;\n    return [true, score];\n  }\n\n  return false;\n}; // Check if given cards represent a pair\n\nexport const isPair = cards => {\n  let score = 0; // Add all the values of the cards to array 'vals'\n\n  var vals = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n\n  vals.sort(function (a, b) {\n    return a - b;\n  }); // Create a set from array 'vals'\n\n  var set = new Set(vals); // Can only be a pair of size of set is 4\n\n  if (set.size === 4) {\n    score += rank.indexOf(\"Pair\") * 1000000;\n\n    for (var j = 0; j < vals.length - 1; j++) {\n      if (vals[j] === vals[j + 1]) score += vals[j] * 1000;\n    }\n\n    score += vals[vals.length - 1] * 20 + vals[vals.length - 2] * 10 + vals[vals.length - 3] * 7 + vals[vals.length - 4] * 5 + vals[vals.length - 5] * 2;\n    return [true, score];\n  }\n\n  return false;\n}; // Evaluate score for high card\n\nexport const highCard = cards => {\n  let score = 0;\n\n  for (var i = 0; i < cards.length; i++) {\n    score += values.indexOf(cards[i].substr(0, 1));\n  }\n\n  return score;\n};\nexport const botRiver = (cards, position, stackSize, betOutstanding, betAmount) => {};\nexport const botTurn = (cards, position, stackSize, betOutstanding, betAmount) => {};\nexport const botFlop = (botCards, flop, position, stackSize, betOutstanding, betAmount) => {\n  const [rank, score, hand] = evaluateFlop(botCards, flop);\n  var cards = [];\n\n  for (var i = 0; i < 3; i++) cards.push(flop[i].code);\n\n  const [nutScore, nutCards] = getNutHand(cards);\n};\nexport const botPre = (cards, position, stackSize, betOutstanding, betAmount) => {\n  var chenValues = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 6, 7, 8, 10];\n  var score = 0;\n  console.log(cards);\n\n  if (cards[0].substr(0, 1) === cards[1].substr(0, 1)) {\n    score = Math.min(5, 2 * chenValues[values.indexOf(cards[0].substr(0, 1))]);\n  } else {\n    score += Math.max(chenValues[values.indexOf(cards[0].substr(0, 1))], chenValues[values.indexOf(cards[1].substr(0, 1))]);\n    if (cards[0].substr(1, 2) === cards[1].substr(1, 2)) score += 2;\n    let gap = Math.abs(values.indexOf(cards[0].substr(0, 1)) - values.indexOf(cards[1].substr(0, 1)));\n    if (gap === 2) score -= 1;else if (gap === 3) score -= 2;else if (gap === 4) score -= 4;else if (gap >= 5) score -= 5;\n\n    if (Math.max(chenValues[values.indexOf(cards[0].substr(0, 1))], chenValues[values.indexOf(cards[1].substr(0, 1))]) < 7) {\n      if (gap <= 2) score += 1;\n    }\n  }\n\n  console.log(score);\n  score = Math.max(0, Math.ceil(score) / 20);\n  let decision = \"\";\n  let raiseAmount = 0;\n\n  if (betOutstanding === 0) {\n    if (Math.random() < score) {\n      decision = \"r\";\n      raiseAmount = Math.min(stackSize, betAmount * 2.5);\n    } else {\n      decision = \"k\";\n    }\n  } else {\n    if (position === 0) {\n      if (score < 0.15) {\n        if (Math.random() < 0.6) decision = \"f\";else if (Math.random() < 0.5) decision = \"c\";else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else if (score < 0.35) {\n        if (Math.random() < 0.1) decision = \"f\";else if (Math.random() < 0.4) decision = \"c\";else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else if (score < 0.5) {\n        if (Math.random() < 0.3) decision = \"c\";else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else {\n        if (Math.random() < 0.5) decision = \"c\";else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      }\n    } else {\n      if (score < 0.15) {\n        if (Math.random() < 0.7) decision = \"f\";else if (Math.random() < 0.5) decision = \"c\";else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else if (score < 0.35) {\n        if (Math.random() < 0.2) decision = \"f\";else if (Math.random() < 0.4) decision = \"c\";else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else if (score < 0.5) {\n        if (Math.random() < 0.4) decision = \"c\";else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else {\n        if (Math.random() < 0.5) decision = \"c\";else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      }\n    }\n  }\n\n  return [decision, raiseAmount];\n};\nexport const getNutHand = cards => {\n  var score = 0;\n  var nutCards = [];\n  const [straightPotential, straightScore] = hasStraightPotential(cards);\n\n  if (hasFlushPotential(cards)) {\n    if (straightPotential) {\n      if (straightScore === 50) {\n        score += rank.indexOf(\"Royal Flush\") * 1000000 + straightScore;\n      } else {\n        score += rank.indexOf(\"Straight Flush\") * 1000000 + straightScore;\n      }\n    } else {\n      score += rank.indexOf(\"Flush\") * 1000000;\n\n      for (var j = 0; j < cards.length; j++) {\n        score += values.indexOf(cards[j].substr(0, 1));\n      }\n    }\n  } else if (straightPotential) {\n    score += rank.indexOf(\"Straight\") * 1000000 + (straightScore + 10) / 5;\n  } else if (isThreeOfTheSame(cards)) {// FOUR OF A KIND (lower score though because less likely)\n  } else if (hasPair(cards)) {// FOUR OF A KIND\n  }\n\n  return [score, nutCards];\n};\nexport const isThreeOfTheSame = cards => {\n  for (var i = 0; i < 2; i++) {\n    if (cards[i].substr(0, 1) !== cards[i + 1].substr(0, 1)) return false;\n  }\n\n  return true;\n};\nexport const hasPair = cards => {\n  for (var i = 0; i < 2; i++) {\n    if (cards[i].substr(0, 1) === cards[i + 1].substr(0, 1)) return true;\n  }\n\n  return false;\n};\nexport const hasFlushPotential = cards => {\n  for (var i = 0; i < 2; i++) {\n    if (cards[i].substr(1, 2) !== cards[i + 1].substr(1, 2)) return false;\n  }\n\n  return true;\n};\nexport const hasStraightPotential = cards => {\n  var indices = [];\n\n  for (var i = 0; i < cards.length; i++) {\n    indices.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n\n  indices.sort();\n  if (indices[2] === 12 && indices[0] < 4 && indices[1] < 4) return [true, 18];else {\n    var gap = 0;\n\n    for (var i = 0; i < indices.length - 1; i++) {\n      gap += indices[i + 1] - indices[i];\n    }\n\n    if (gap === 4) return [true, indices[2] + (indices[2] - 1) + indices[1] + (indices[1] - 1) + indices[0]];else if (gap === 3) {\n      var highCard = Math.min(indices[2] + 1, 12);\n      var score = 5 * highCard - 10;\n      return [true, score];\n    } else if (gap === 3) {\n      var highCard = Math.min(indices[2] + 2, 12);\n      var score = 5 * highCard - 10;\n      return [true, score];\n    }\n  }\n  return [false, -1];\n};","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/HandEvaluator.js"],"names":["values","rank","evaluateHoleCards","holeCards","card1","code","card2","substring","evaluateFiveCardHand","cards","isRoyalFlush","isStraightFlush","isFourOfAKind","isFullHouse","isFlush","isStraight","isTrips","isTwoPair","isPair","highCard","getHandStrength","evaluateFlop","flop","i","length","push","j","handRank","score","evaluateTurn","turn","highHand","highScore","bestCards","k","tempCards","slice","splice","evaluateRiver","river","l","includes","indexOf","substr","vals","sort","a","b","set","Set","size","uniqueVals","Array","from","valCount","suits","indices","wheel","every","value","index","botRiver","position","stackSize","betOutstanding","betAmount","botTurn","botFlop","botCards","hand","nutScore","nutCards","getNutHand","botPre","chenValues","console","log","Math","min","max","gap","abs","ceil","decision","raiseAmount","random","straightPotential","straightScore","hasStraightPotential","hasFlushPotential","isThreeOfTheSame","hasPair"],"mappings":"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","sourcesContent":["var values = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"];\nvar rank = [\n  \"High card\",\n  \"Pair\",\n  \"Two pair\",\n  \"Three of a kind\",\n  \"Straight\",\n  \"Flush\",\n  \"Full House\",\n  \"Four of a kind\",\n  \"Straight Flush\",\n  \"Royal Flush\",\n];\n\n// Evaluate strength of hole cards\nexport const evaluateHoleCards = (holeCards) => {\n  var card1 = holeCards[0].code;\n  var card2 = holeCards[1].code;\n  if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n  else {\n    return \"High card\";\n  }\n};\n\n// Evaluate any given 5 card hand\nexport const evaluateFiveCardHand = (cards) => {\n  if (isRoyalFlush(cards)[0]) return [9, isRoyalFlush(cards)[1]];\n  if (isStraightFlush(cards)[0]) return [8, isStraightFlush(cards)[1]];\n  if (isFourOfAKind(cards)[0]) return [7, isFourOfAKind(cards)[1]];\n  if (isFullHouse(cards)[0]) return [6, isFullHouse(cards)[1]];\n  if (isFlush(cards)[0]) return [5, isFlush(cards)[1]];\n  if (isStraight(cards)[0]) return [4, isStraight(cards)[1]];\n  if (isTrips(cards)[0]) return [3, isTrips(cards)[1]];\n  if (isTwoPair(cards)[0]) return [2, isTwoPair(cards)[1]];\n  if (isPair(cards)[0]) return [1, isPair(cards)[1]];\n  else return [0, highCard(cards)];\n};\n\n// Get exact numerical hand strength\nexport const getHandStrength = (cards) => {};\n\n// Evaluate hand after flop\nexport const evaluateFlop = (holeCards, flop) => {\n  var cards = [];\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n  const [handRank, score] = evaluateFiveCardHand(cards);\n  return [rank[handRank], score, cards];\n};\n\n// Evaluate hand after turn\nexport const evaluateTurn = (holeCards, flop, turn) => {\n  var cards = [];\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n  cards.push(turn[0].code);\n  // Loop through possible 5 hand combos and return hand with highest strength\n  var highHand = 0;\n  var highScore = 0;\n  var bestCards = [];\n  for (var k = 0; k < 6; k++) {\n    var tempCards = cards.slice();\n    tempCards.splice(k, 1);\n    if (evaluateFiveCardHand(tempCards)[0] > highHand) {\n      highHand = evaluateFiveCardHand(tempCards)[0];\n      highScore = evaluateFiveCardHand(tempCards)[1];\n      bestCards = tempCards;\n    } else if (\n      evaluateFiveCardHand(tempCards)[0] === highHand &&\n      evaluateFiveCardHand(tempCards)[1] > highScore\n    ) {\n      highScore = evaluateFiveCardHand(tempCards)[1];\n      bestCards = tempCards;\n    }\n  }\n  return [rank[highHand], bestCards, highScore];\n};\n\n// Evaluate hand after river\nexport const evaluateRiver = (holeCards, flop, turn, river) => {\n  var cards = [];\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n  cards.push(turn[0].code);\n  cards.push(river[0].code);\n  var highHand = 0;\n  var highScore = 0;\n  var bestCards = [];\n  // Loop through possible 5 hand combos and return hand with highest strength\n  for (var k = 0; k < cards.length - 1; k++) {\n    for (var l = 1; l < cards.length; l++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      tempCards.splice(l - 1, 1);\n      if (evaluateFiveCardHand(tempCards)[1] > highScore) {\n        highHand = evaluateFiveCardHand(tempCards)[0];\n        highScore = evaluateFiveCardHand(tempCards)[1];\n        bestCards = tempCards;\n      } else if (\n        evaluateFiveCardHand(tempCards)[0] === highHand &&\n        evaluateFiveCardHand(tempCards)[1] > highScore\n      ) {\n        highScore = evaluateFiveCardHand(tempCards)[1];\n        bestCards = tempCards;\n      }\n    }\n  }\n  return [rank[highHand], bestCards, highScore];\n};\n\n// Check if given cards represent a royal flush\nexport const isRoyalFlush = (cards) => {\n  let score = 0;\n  // Must be a straight flush and contain an Ace and 10\n  if (isStraightFlush(cards)) {\n    for (var i = 0; i < cards.length; i++) {\n      if (cards[i].includes(\"A\")) {\n        for (var j = 0; j < cards.length; j++) {\n          if (cards[j].includes(\"0\")) {\n            score +=\n              rank.indexOf(\"Royal Flush\") * 1000000 +\n              values.indexOf(\"A\") +\n              values.indexOf(\"K\") +\n              values.indexOf(\"Q\") +\n              values.indexOf(\"J\") +\n              values.indexOf(\"0\");\n            return [true, score];\n          }\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Check if given cards represent a straight flush\nexport const isStraightFlush = (cards) => {\n  let score = 0;\n  // Must be a straight and a flush\n  if (isFlush(cards) && isStraight(cards)) {\n    score += rank.indexOf(\"Straight Flush\") * 1000000;\n    for (var i = 0; i < cards.length; i++) {\n      score += values.indexOf(cards[i].substr(0, 1));\n    }\n    return [true, score];\n  }\n  return false;\n};\n\n// Check if given cards represent a four of a kind\nexport const isFourOfAKind = (cards) => {\n  let score = 0;\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n  vals.sort(function (a, b) {\n    return a - b;\n  });\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be four of a kind if size of set is 2\n  if (set.size === 2) {\n    var uniqueVals = Array.from(set);\n    // If one of the elements occurs 4 times then it is four of a kind\n    for (var k = 0; k < uniqueVals.length; k++) {\n      var valCount = 0;\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[k]) valCount++;\n        if (valCount === 4) {\n          score += rank.indexOf(\"Four of a kind\") * 1000000;\n          for (var l = 0; l < vals.length - 1; l++) {\n            if (vals[l] === vals[l + 1]) {\n              score += vals[l] * 1000;\n              break;\n            }\n          }\n          score +=\n            vals[vals.length - 1] * 20 +\n            vals[vals.length - 2] * 10 +\n            vals[vals.length - 3] * 7 +\n            vals[vals.length - 4] * 5 +\n            vals[vals.length - 5] * 2;\n          return [true, score];\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Check if given cards represent a full house\nexport const isFullHouse = (cards) => {\n  let score = 0;\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n  vals.sort(function (a, b) {\n    return a - b;\n  });\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be full house if size of set is 2\n  if (set.size === 2) {\n    var uniqueVals = Array.from(set);\n    // If one of the elements occurs 3 times then it is full house\n    for (var k = 0; k < uniqueVals.length; k++) {\n      var valCount = 0;\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[k]) valCount++;\n        if (valCount === 3) {\n          score += rank.indexOf(\"Full House\") * 1000000;\n          for (var l = 0; l < vals.length - 2; l++) {\n            if ((vals[l] === vals[l + 1]) === vals[l + 2]) {\n              score += vals[l] * 1000;\n              break;\n            }\n          }\n          score +=\n            vals[vals.length - 1] * 20 +\n            vals[vals.length - 2] * 10 +\n            vals[vals.length - 3] * 7 +\n            vals[vals.length - 4] * 5 +\n            vals[vals.length - 5] * 2;\n          return [true, score];\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Check if given cards represent a flush\nexport const isFlush = (cards) => {\n  let score = 0;\n  // Add all suits of the cards to array 'suits'\n  var suits = [];\n  for (var i = 0; i < cards.length; i++) {\n    suits.push(cards[i].substr(1));\n  }\n  // Create a set from array 'suits'\n  var set = new Set(suits);\n  // Can only be flush if size of set is 1\n  if (set.size === 1) {\n    score += rank.indexOf(\"Flush\") * 1000000;\n    for (var j = 0; j < cards.length; j++) {\n      score += values.indexOf(cards[j].substr(0, 1));\n    }\n    return [true, score];\n  } else return false;\n};\n\n// Check if given cards represent a straight\nexport const isStraight = (cards) => {\n  let score = 0;\n  // Add indices of values of all cards to array 'indices'\n  var indices = [];\n  for (var i = 0; i < cards.length; i++) {\n    indices.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n  // Sort 'indices'\n  indices.sort(function (a, b) {\n    return a - b;\n  });\n  // Check if it is a wheel straight\n  var wheel = [0, 1, 2, 3, 12];\n  if (\n    indices.length === wheel.length &&\n    indices.every((value, index) => value === wheel[index])\n  ) {\n    score += rank.indexOf(\"Straight\") * 1000000 + 3;\n    return [true, score];\n  }\n  // If not a wheel straight determine if it's a regular straight\n  // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n  for (var j = 0; j < indices.length - 1; j++) {\n    if (indices[j] + 1 !== indices[j + 1]) return false;\n  }\n  score += rank.indexOf(\"Straight\") * 1000000 + indices[indices.length - 1];\n  return [true, score];\n};\n\n// Check if given cards represent trips\nexport const isTrips = (cards) => {\n  let score = 0;\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var k = 0; k < cards.length; k++) {\n    vals.push(values.indexOf(cards[k].substr(0, 1)));\n  }\n  vals.sort(function (a, b) {\n    return a - b;\n  });\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be trips if size of set is 3\n  if (set.size === 3) {\n    var uniqueVals = Array.from(set);\n    // If one of the elements occurs 3 times then it is trips\n    for (var i = 0; i < uniqueVals.length; i++) {\n      var valCount = 0;\n      for (var j = 0; j < vals.length; j++) {\n        if (vals[j] === uniqueVals[i]) valCount++;\n        if (valCount === 3) {\n          score += rank.indexOf(\"Three of a kind\") * 1000000;\n          for (var l = 0; l < vals.length - 1; l++) {\n            if (vals[l] === vals[l + 1]) {\n              score += vals[l] * 1000;\n              break;\n            }\n          }\n          score +=\n            vals[vals.length - 1] * 20 +\n            vals[vals.length - 2] * 10 +\n            vals[vals.length - 3] * 7 +\n            vals[vals.length - 4] * 5 +\n            vals[vals.length - 5] * 2;\n          return [true, score];\n        }\n      }\n    }\n  }\n  return false;\n};\n\n// Check if given cards represent two pair\nexport const isTwoPair = (cards) => {\n  let score = 0;\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n  vals.sort(function (a, b) {\n    return a - b;\n  });\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be two pair of size of set is 3\n  if (set.size === 3) {\n    // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n    score += rank.indexOf(\"Two pair\") * 1000000;\n    for (var j = 0; j < vals.length - 1; j++) {\n      if (vals[j] === vals[j + 1]) score += vals[j] * 1000;\n    }\n    score +=\n      vals[vals.length - 1] * 20 +\n      vals[vals.length - 2] * 10 +\n      vals[vals.length - 3] * 7 +\n      vals[vals.length - 4] * 5 +\n      vals[vals.length - 5] * 2;\n    return [true, score];\n  }\n  return false;\n};\n\n// Check if given cards represent a pair\nexport const isPair = (cards) => {\n  let score = 0;\n  // Add all the values of the cards to array 'vals'\n  var vals = [];\n  for (var i = 0; i < cards.length; i++) {\n    vals.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n  vals.sort(function (a, b) {\n    return a - b;\n  });\n  // Create a set from array 'vals'\n  var set = new Set(vals);\n  // Can only be a pair of size of set is 4\n  if (set.size === 4) {\n    score += rank.indexOf(\"Pair\") * 1000000;\n    for (var j = 0; j < vals.length - 1; j++) {\n      if (vals[j] === vals[j + 1]) score += vals[j] * 1000;\n    }\n    score +=\n      vals[vals.length - 1] * 20 +\n      vals[vals.length - 2] * 10 +\n      vals[vals.length - 3] * 7 +\n      vals[vals.length - 4] * 5 +\n      vals[vals.length - 5] * 2;\n    return [true, score];\n  }\n  return false;\n};\n\n// Evaluate score for high card\nexport const highCard = (cards) => {\n  let score = 0;\n  for (var i = 0; i < cards.length; i++) {\n    score += values.indexOf(cards[i].substr(0, 1));\n  }\n  return score;\n};\n\nexport const botRiver = (\n  cards,\n  position,\n  stackSize,\n  betOutstanding,\n  betAmount\n) => {};\n\nexport const botTurn = (\n  cards,\n  position,\n  stackSize,\n  betOutstanding,\n  betAmount\n) => {};\n\nexport const botFlop = (\n  botCards,\n  flop,\n  position,\n  stackSize,\n  betOutstanding,\n  betAmount\n) => {\n  const [rank, score, hand] = evaluateFlop(botCards, flop);\n  var cards = [];\n  for (var i = 0; i < 3; i++) cards.push(flop[i].code);\n  const [nutScore, nutCards] = getNutHand(cards);\n};\n\nexport const botPre = (\n  cards,\n  position,\n  stackSize,\n  betOutstanding,\n  betAmount\n) => {\n  var chenValues = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 6, 7, 8, 10];\n  var score = 0;\n  console.log(cards);\n  if (cards[0].substr(0, 1) === cards[1].substr(0, 1)) {\n    score = Math.min(5, 2 * chenValues[values.indexOf(cards[0].substr(0, 1))]);\n  } else {\n    score += Math.max(\n      chenValues[values.indexOf(cards[0].substr(0, 1))],\n      chenValues[values.indexOf(cards[1].substr(0, 1))]\n    );\n    if (cards[0].substr(1, 2) === cards[1].substr(1, 2)) score += 2;\n    let gap = Math.abs(\n      values.indexOf(cards[0].substr(0, 1)) -\n        values.indexOf(cards[1].substr(0, 1))\n    );\n    if (gap === 2) score -= 1;\n    else if (gap === 3) score -= 2;\n    else if (gap === 4) score -= 4;\n    else if (gap >= 5) score -= 5;\n\n    if (\n      Math.max(\n        chenValues[values.indexOf(cards[0].substr(0, 1))],\n        chenValues[values.indexOf(cards[1].substr(0, 1))]\n      ) < 7\n    ) {\n      if (gap <= 2) score += 1;\n    }\n  }\n  console.log(score);\n  score = Math.max(0, Math.ceil(score) / 20);\n  let decision = \"\";\n  let raiseAmount = 0;\n  if (betOutstanding === 0) {\n    if (Math.random() < score) {\n      decision = \"r\";\n      raiseAmount = Math.min(stackSize, betAmount * 2.5);\n    } else {\n      decision = \"k\";\n    }\n  } else {\n    if (position === 0) {\n      if (score < 0.15) {\n        if (Math.random() < 0.6) decision = \"f\";\n        else if (Math.random() < 0.5) decision = \"c\";\n        else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else if (score < 0.35) {\n        if (Math.random() < 0.1) decision = \"f\";\n        else if (Math.random() < 0.4) decision = \"c\";\n        else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else if (score < 0.5) {\n        if (Math.random() < 0.3) decision = \"c\";\n        else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else {\n        if (Math.random() < 0.5) decision = \"c\";\n        else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      }\n    } else {\n      if (score < 0.15) {\n        if (Math.random() < 0.7) decision = \"f\";\n        else if (Math.random() < 0.5) decision = \"c\";\n        else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else if (score < 0.35) {\n        if (Math.random() < 0.2) decision = \"f\";\n        else if (Math.random() < 0.4) decision = \"c\";\n        else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else if (score < 0.5) {\n        if (Math.random() < 0.4) decision = \"c\";\n        else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      } else {\n        if (Math.random() < 0.5) decision = \"c\";\n        else {\n          decision = \"r\";\n          raiseAmount = Math.min(stackSize, betAmount * 2.5);\n        }\n      }\n    }\n  }\n  return [decision, raiseAmount];\n};\n\nexport const getNutHand = (cards) => {\n  var score = 0;\n  var nutCards = [];\n\n  const [straightPotential, straightScore] = hasStraightPotential(cards);\n\n  if (hasFlushPotential(cards)) {\n    if (straightPotential) {\n      if (straightScore === 50) {\n        score += rank.indexOf(\"Royal Flush\") * 1000000 + straightScore;\n      } else {\n        score += rank.indexOf(\"Straight Flush\") * 1000000 + straightScore;\n      }\n    } else {\n      score += rank.indexOf(\"Flush\") * 1000000;\n      for (var j = 0; j < cards.length; j++) {\n        score += values.indexOf(cards[j].substr(0, 1));\n      }\n    }\n  } else if (straightPotential) {\n    score += rank.indexOf(\"Straight\") * 1000000 + (straightScore + 10) / 5;\n  } else if (isThreeOfTheSame(cards)) {\n    // FOUR OF A KIND (lower score though because less likely)\n  } else if (hasPair(cards)) {\n    // FOUR OF A KIND\n  }\n\n  return [score, nutCards];\n};\n\nexport const isThreeOfTheSame = (cards) => {\n  for (var i = 0; i < 2; i++) {\n    if (cards[i].substr(0, 1) !== cards[i + 1].substr(0, 1)) return false;\n  }\n  return true;\n};\n\nexport const hasPair = (cards) => {\n  for (var i = 0; i < 2; i++) {\n    if (cards[i].substr(0, 1) === cards[i + 1].substr(0, 1)) return true;\n  }\n  return false;\n};\n\nexport const hasFlushPotential = (cards) => {\n  for (var i = 0; i < 2; i++) {\n    if (cards[i].substr(1, 2) !== cards[i + 1].substr(1, 2)) return false;\n  }\n  return true;\n};\n\nexport const hasStraightPotential = (cards) => {\n  var indices = [];\n  for (var i = 0; i < cards.length; i++) {\n    indices.push(values.indexOf(cards[i].substr(0, 1)));\n  }\n  indices.sort();\n  if (indices[2] === 12 && indices[0] < 4 && indices[1] < 4) return [true, 18];\n  else {\n    var gap = 0;\n    for (var i = 0; i < indices.length - 1; i++) {\n      gap += indices[i + 1] - indices[i];\n    }\n    if (gap === 4)\n      return [\n        true,\n        indices[2] +\n          (indices[2] - 1) +\n          indices[1] +\n          (indices[1] - 1) +\n          indices[0],\n      ];\n    else if (gap === 3) {\n      var highCard = Math.min(indices[2] + 1, 12);\n      var score = 5 * highCard - 10;\n      return [true, score];\n    } else if (gap === 3) {\n      var highCard = Math.min(indices[2] + 2, 12);\n      var score = 5 * highCard - 10;\n      return [true, score];\n    }\n  }\n  return [false, -1];\n};\n"]},"metadata":{},"sourceType":"module"}