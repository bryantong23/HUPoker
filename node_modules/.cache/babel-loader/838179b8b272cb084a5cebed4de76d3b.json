{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/components/hand.jsx\";\nimport React, { Component } from \"react\"; // Component to represent each player's hand\n\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n\n    this.evaluateHoleCards = holeCards => {\n      var card1 = holeCards[0].code;\n      var card2 = holeCards[1].code;\n      if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";else {\n        return \"High card\";\n      }\n    };\n\n    this.evaluateFlop = (holeCards, flop) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var j = 0; j < flop.length; j++) {\n        cards.push(flop[j].code);\n      }\n\n      return this.state.rank[Hand.evaluateFiveCardHand(cards)];\n    };\n\n    this.evaluateTurn = (holeCards, flop, turn) => {\n      var cards = [];\n\n      for (var i = 0; i < holeCards.length; i++) {\n        cards.push(holeCards[i].code);\n      }\n\n      for (var j = 0; j < flop.length; j++) {\n        cards.push(flop[j].code);\n      }\n\n      cards.push(turn[0].code); // Loop through possible 5 hand combos and return hand with highest strength\n\n      var high = 0;\n\n      for (var k = 0; k < 6; k++) {\n        var tempCards = cards.slice();\n        tempCards.splice(k, 1);\n        if (this.evaluateFiveCardHand(tempCards) > high) high = this.evaluateFiveCardHand(tempCards);\n      }\n\n      return this.state.rank[high];\n    };\n\n    this.displayHand = (dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river) => {\n      // If hole cards haven't been dealt yet don't display anything\n      if (!dealHoleCards) return null; // If flop hasn't been dealt yet only evaluate hole cards\n      else if (!dealFlop) {\n          return this.evaluateHoleCards(holeCards);\n        } // If turn hasn't been dealt yet only evaluate hole cards and flop\n        else if (!dealTurn) {\n            return this.evaluateFlop(holeCards, flop);\n          } // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n          else if (!dealRiver) {\n              return this.evaluateTurn(holeCards, flop, turn);\n            } // Otherwise evaluate all cards\n            else {\n                return Hand.evaluateRiver(holeCards, flop, turn, river);\n              }\n    };\n\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\"High card\", \"Pair\", \"Two pair\", \"Three of a kind\", \"Straight\", \"Flush\", \"Full House\", \"Four of a kind\", \"Straight Flush\", \"Royal Flush\"]\n    };\n  } // Evaluate strength of hole cards\n\n\n  // Check if given cards represent a royal flush\n  static isRoyalFlush(cards) {\n    // Must be a straight flush and contain an Ace and 10\n    if (Hand.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) {\n          for (var j = 0; j < cards.length; j++) {\n            if (cards[j].includes(\"0\")) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a straight flush\n\n\n  static isStraightFlush(cards) {\n    // Must be a straight and a flush\n    if (Hand.isFlush(cards) && Hand.isStraight(cards)) {\n      return true;\n    }\n\n    return false;\n  } // Check if given cards represent a four of a kind\n\n\n  static isFourOfAKind(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be four of a kind if size of set is 2\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 4 times then it is four of a kind\n\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n\n          if (valCount === 4) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a full house\n\n\n  static isFullHouse(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be full house if size of set is 2\n\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is full house\n\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent a flush\n\n\n  static isFlush(cards) {\n    // Add all suits of the cards to array 'suits'\n    var suits = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    } // Create a set from array 'suits'\n\n\n    var set = new Set(suits); // Can only be flush if size of set is 1\n\n    if (set.size === 1) {\n      return true;\n    } else return false;\n  } // Check if given cards represent a straight\n\n\n  static isStraight(cards) {\n    // Add indices of values of all cards to array 'indices'\n    var indices = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    } // Sort 'indices'\n\n\n    indices.sort(function (a, b) {\n      return a - b;\n    }); // Check if it is a wheel straight\n\n    var wheel = [0, 1, 2, 3, 12];\n\n    if (indices.length === wheel.length && indices.every((value, index) => value === wheel[index])) {\n      return true;\n    } // If not a wheel straight determine if it's a regular straight\n    // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n\n\n    for (var j = 0; j < indices.length - 1; j++) {\n      if (indices[j] + 1 !== indices[j + 1]) return false;\n    }\n\n    return true;\n  } // Check if given cards represent trips\n\n\n  static isTrips(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var k = 0; k < cards.length; k++) {\n      vals.push(cards[k].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be trips if size of set is 3\n\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set); // If one of the elements occurs 3 times then it is trips\n\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  } // Check if given cards represent two pair\n\n\n  static isTwoPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be two pair of size of set is 3\n\n    if (set.size === 3) {\n      // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n      return true;\n    }\n\n    return false;\n  } // Check if given cards represent a pair\n\n\n  static isPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    } // Create a set from array 'vals'\n\n\n    var set = new Set(vals); // Can only be a pair of size of set is 4\n\n    if (set.size === 4) {\n      return true;\n    }\n\n    return false;\n  } // Method to display hand strength\n\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: dealHoleCards ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: this.displayHand(dealHoleCards, dealFlop, dealTurn, dealRiver, holeCards, flop, turn, river)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nHand.evaluateFiveCardHand = cards => {\n  if (Hand.isRoyalFlush(cards)) return 9;\n  if (Hand.isStraightFlush(cards)) return 8;\n  if (Hand.isFourOfAKind(cards)) return 7;\n  if (Hand.isFullHouse(cards)) return 6;\n  if (Hand.isFlush(cards)) return 5;\n  if (Hand.isStraight(cards)) return 4;\n  if (Hand.isTrips(cards)) return 3;\n  if (Hand.isTwoPair(cards)) return 2;\n  if (Hand.isPair(cards)) return 1;else return 0;\n};\n\nHand.evaluateRiver = (holeCards, flop, turn, river) => {\n  var cards = [];\n\n  for (var i = 0; i < holeCards.length; i++) {\n    cards.push(holeCards[i].code);\n  }\n\n  for (var j = 0; j < flop.length; j++) {\n    cards.push(flop[j].code);\n  }\n\n  cards.push(turn[0].code);\n  cards.push(river[0].code);\n  var high = 0; // Loop through possible 5 hand combos and return hand with highest strength\n\n  for (var k = 0; k < cards.length - 1; k++) {\n    for (var l = 1; l < cards.length; l++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      tempCards.splice(l - 1, 1);\n      if (Hand.evaluateFiveCardHand(tempCards) > high) high = Hand.evaluateFiveCardHand(tempCards);\n    }\n  }\n\n  return Hand.state.rank[high];\n};\n\nexport default Hand;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/components/hand.jsx"],"names":["React","Component","Hand","constructor","props","evaluateHoleCards","holeCards","card1","code","card2","substring","evaluateFlop","flop","cards","i","length","push","j","state","rank","evaluateFiveCardHand","evaluateTurn","turn","high","k","tempCards","slice","splice","displayHand","dealHoleCards","dealFlop","dealTurn","dealRiver","river","evaluateRiver","values","isRoyalFlush","isStraightFlush","includes","isFlush","isStraight","isFourOfAKind","vals","substr","set","Set","size","uniqueVals","Array","from","valCount","isFullHouse","suits","indices","indexOf","sort","a","b","wheel","every","value","index","isTrips","isTwoPair","isPair","render","l"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\n// Component to represent each player's hand\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\n        \"High card\",\n        \"Pair\",\n        \"Two pair\",\n        \"Three of a kind\",\n        \"Straight\",\n        \"Flush\",\n        \"Full House\",\n        \"Four of a kind\",\n        \"Straight Flush\",\n        \"Royal Flush\",\n      ],\n    };\n  }\n\n  // Evaluate strength of hole cards\n  evaluateHoleCards = (holeCards) => {\n    var card1 = holeCards[0].code;\n    var card2 = holeCards[1].code;\n    if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n    else {\n      return \"High card\";\n    }\n  };\n\n  // Evaluate any given 5 card hand\n  static evaluateFiveCardHand = (cards) => {\n    if (Hand.isRoyalFlush(cards)) return 9;\n    if (Hand.isStraightFlush(cards)) return 8;\n    if (Hand.isFourOfAKind(cards)) return 7;\n    if (Hand.isFullHouse(cards)) return 6;\n    if (Hand.isFlush(cards)) return 5;\n    if (Hand.isStraight(cards)) return 4;\n    if (Hand.isTrips(cards)) return 3;\n    if (Hand.isTwoPair(cards)) return 2;\n    if (Hand.isPair(cards)) return 1;\n    else return 0;\n  };\n\n  // Evaluate hand after flop\n  evaluateFlop = (holeCards, flop) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    return this.state.rank[Hand.evaluateFiveCardHand(cards)];\n  };\n\n  // Evaluate hand after turn\n  evaluateTurn = (holeCards, flop, turn) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    cards.push(turn[0].code);\n    // Loop through possible 5 hand combos and return hand with highest strength\n    var high = 0;\n    for (var k = 0; k < 6; k++) {\n      var tempCards = cards.slice();\n      tempCards.splice(k, 1);\n      if (this.evaluateFiveCardHand(tempCards) > high)\n        high = this.evaluateFiveCardHand(tempCards);\n    }\n    return this.state.rank[high];\n  };\n\n  // Evaluate hand after river\n  static evaluateRiver = (holeCards, flop, turn, river) => {\n    var cards = [];\n    for (var i = 0; i < holeCards.length; i++) {\n      cards.push(holeCards[i].code);\n    }\n    for (var j = 0; j < flop.length; j++) {\n      cards.push(flop[j].code);\n    }\n    cards.push(turn[0].code);\n    cards.push(river[0].code);\n    var high = 0;\n    // Loop through possible 5 hand combos and return hand with highest strength\n    for (var k = 0; k < cards.length - 1; k++) {\n      for (var l = 1; l < cards.length; l++) {\n        var tempCards = cards.slice();\n        tempCards.splice(k, 1);\n        tempCards.splice(l - 1, 1);\n        if (Hand.evaluateFiveCardHand(tempCards) > high)\n          high = Hand.evaluateFiveCardHand(tempCards);\n      }\n    }\n    return this.state.rank[high];\n  };\n\n  // Check if given cards represent a royal flush\n  static isRoyalFlush(cards) {\n    // Must be a straight flush and contain an Ace and 10\n    if (Hand.isStraightFlush(cards)) {\n      for (var i = 0; i < cards.length; i++) {\n        if (cards[i].includes(\"A\")) {\n          for (var j = 0; j < cards.length; j++) {\n            if (cards[j].includes(\"0\")) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a straight flush\n  static isStraightFlush(cards) {\n    // Must be a straight and a flush\n    if (Hand.isFlush(cards) && Hand.isStraight(cards)) {\n      return true;\n    }\n    return false;\n  }\n\n  // Check if given cards represent a four of a kind\n  static isFourOfAKind(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be four of a kind if size of set is 2\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 4 times then it is four of a kind\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n          if (valCount === 4) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a full house\n  static isFullHouse(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be full house if size of set is 2\n    if (set.size === 2) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 3 times then it is full house\n      for (var k = 0; k < uniqueVals.length; k++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[k]) valCount++;\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent a flush\n  static isFlush(cards) {\n    // Add all suits of the cards to array 'suits'\n    var suits = [];\n    for (var i = 0; i < cards.length; i++) {\n      suits.push(cards[i].substr(1));\n    }\n    // Create a set from array 'suits'\n    var set = new Set(suits);\n    // Can only be flush if size of set is 1\n    if (set.size === 1) {\n      return true;\n    } else return false;\n  }\n\n  // Check if given cards represent a straight\n  static isStraight(cards) {\n    // Add indices of values of all cards to array 'indices'\n    var indices = [];\n    for (var i = 0; i < cards.length; i++) {\n      indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n    }\n    // Sort 'indices'\n    indices.sort(function (a, b) {\n      return a - b;\n    });\n    // Check if it is a wheel straight\n    var wheel = [0, 1, 2, 3, 12];\n    if (\n      indices.length === wheel.length &&\n      indices.every((value, index) => value === wheel[index])\n    ) {\n      return true;\n    }\n    // If not a wheel straight determine if it's a regular straight\n    // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n    for (var j = 0; j < indices.length - 1; j++) {\n      if (indices[j] + 1 !== indices[j + 1]) return false;\n    }\n    return true;\n  }\n\n  // Check if given cards represent trips\n  static isTrips(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var k = 0; k < cards.length; k++) {\n      vals.push(cards[k].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be trips if size of set is 3\n    if (set.size === 3) {\n      var uniqueVals = Array.from(set);\n      // If one of the elements occurs 3 times then it is trips\n      for (var i = 0; i < uniqueVals.length; i++) {\n        var valCount = 0;\n        for (var j = 0; j < vals.length; j++) {\n          if (vals[j] === uniqueVals[i]) valCount++;\n          if (valCount === 3) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  // Check if given cards represent two pair\n  static isTwoPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be two pair of size of set is 3\n    if (set.size === 3) {\n      // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n      return true;\n    }\n    return false;\n  }\n\n  // Check if given cards represent a pair\n  static isPair(cards) {\n    // Add all the values of the cards to array 'vals'\n    var vals = [];\n    for (var i = 0; i < cards.length; i++) {\n      vals.push(cards[i].substr(0, 1));\n    }\n    // Create a set from array 'vals'\n    var set = new Set(vals);\n    // Can only be a pair of size of set is 4\n    if (set.size === 4) {\n      return true;\n    }\n    return false;\n  }\n\n  // Method to display hand strength\n  displayHand = (\n    dealHoleCards,\n    dealFlop,\n    dealTurn,\n    dealRiver,\n    holeCards,\n    flop,\n    turn,\n    river\n  ) => {\n    // If hole cards haven't been dealt yet don't display anything\n    if (!dealHoleCards) return null;\n    // If flop hasn't been dealt yet only evaluate hole cards\n    else if (!dealFlop) {\n      return this.evaluateHoleCards(holeCards);\n    }\n    // If turn hasn't been dealt yet only evaluate hole cards and flop\n    else if (!dealTurn) {\n      return this.evaluateFlop(holeCards, flop);\n    }\n    // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n    else if (!dealRiver) {\n      return this.evaluateTurn(holeCards, flop, turn);\n    }\n    // Otherwise evaluate all cards\n    else {\n      return Hand.evaluateRiver(holeCards, flop, turn, river);\n    }\n  };\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <span>\n          {dealHoleCards ? (\n            <p>\n              {this.displayHand(\n                dealHoleCards,\n                dealFlop,\n                dealTurn,\n                dealRiver,\n                holeCards,\n                flop,\n                turn,\n                river\n              )}\n            </p>\n          ) : null}\n        </span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n"]},"metadata":{},"sourceType":"module"}