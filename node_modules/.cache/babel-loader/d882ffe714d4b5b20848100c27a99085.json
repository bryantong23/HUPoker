{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/bryan/Documents/HUPoker/src/App.js\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleCheck = () => {\n      if (this.state.betOutstanding === 0 && this.state.players[0].position === 1) {\n        const players = this.state.players;\n        players[0].turn = false;\n        players[1].turn = true;\n        this.setState({\n          players\n        });\n        setTimeout(() => {\n          this.botAction();\n        }, 3000);\n      } else if (this.state.betOutstanding === 0 && this.state.players[0].position === 0) {\n        const players = this.state.players;\n        players[0].turn = false;\n        players[1].turn = true;\n        this.setState({\n          players\n        });\n        this.dealNext();\n        setTimeout(() => {\n          this.botAction();\n        }, 3000);\n      }\n    };\n\n    this.handleCall = () => {\n      if (this.state.betOutstanding !== 0) {\n        const players = this.state.players;\n        players[0].stackSize -= this.state.betOutstanding;\n        players[0].turn = false;\n        players[1].turn = true;\n        players[0].betAmount = players[1].betAmount;\n        const newPotSize = this.state.potSize + this.state.betOutstanding;\n        this.setState({\n          potSize: newPotSize\n        }, () => {\n          this.setState({\n            betOutstanding: 0\n          }, () => {\n            this.dealNext();\n            setTimeout(() => {\n              this.botAction();\n            }, 3000);\n          });\n        });\n      }\n    };\n\n    this.handleClickRaise = () => {\n      const players = this.state.players;\n      players[0].viewText = !players[0].viewText;\n      this.setState({\n        players\n      });\n    };\n\n    this.handleRaise = amount => {\n      const raiseAmount = parseInt(amount);\n      const players = this.state.players;\n      players[0].stackSize -= raiseAmount;\n      players[0].stackSize += players[0].betAmount;\n      players[0].viewText = !players[0].viewText;\n      players[0].turn = false;\n      players[1].turn = true;\n      const newBetOutstanding = raiseAmount - this.state.players[1].betAmount;\n      const newPotSize = this.state.potSize + raiseAmount - players[0].betAmount;\n      players[0].betAmount = raiseAmount;\n      this.setState({\n        betOutstanding: newBetOutstanding\n      }, () => {\n        this.setState({\n          potSize: newPotSize\n        }, () => {\n          this.setState({\n            players\n          }, () => {\n            setTimeout(() => {\n              this.botAction();\n            }, 3000);\n          });\n        });\n      });\n    };\n\n    this.handleFold = () => {\n      const players = this.state.players;\n      players[0].turn = false;\n      players[1].stackSize += this.state.potSize;\n      this.setState({\n        players\n      }, () => {\n        this.setState({\n          potSize: 0\n        }, () => {\n          this.finishHand();\n        });\n      });\n    };\n\n    this.updateBlinds = () => {\n      const sb = parseInt(document.getElementById(\"sb\").value);\n      const bb = parseInt(document.getElementById(\"bb\").value);\n      this.setState({\n        smallBlind: sb,\n        bigBlind: bb\n      });\n    };\n\n    this.updateStack = () => {\n      const ss = parseInt(document.getElementById(\"ss\").value);\n      this.setState({\n        startingStack: ss\n      });\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].stackSize = ss;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.botAction = () => {\n      const players = this.state.players;\n\n      if (this.state.betOutstanding === 0 && players[1].position === 1) {\n        players[0].turn = true;\n        players[1].turn = false;\n        this.setState({\n          players\n        });\n      } else if (this.state.betOutstanding === 0 && players[1].position === 0) {\n        players[0].turn = true;\n        players[1].turn = false;\n        this.setState({\n          players\n        });\n        this.dealNext();\n      } else {\n        players[1].stackSize -= this.state.betOutstanding;\n        players[1].betAmount = players[0].betAmount;\n        players[0].turn = true;\n        const newPotSize = this.state.potSize + this.state.betOutstanding;\n        this.setState({\n          potSize: newPotSize\n        });\n        this.setState({\n          players\n        });\n        this.setState({\n          betOutstanding: 0\n        });\n        this.dealNext();\n      }\n    };\n\n    this.startGame = () => {\n      this.refs.btn.setAttribute(\"disabled\", \"disabled\");\n\n      if (this.state.bigBlind > this.state.smallBlind && this.state.startingStack >= this.state.bigBlind) {\n        this.dealHoleCards(); //while (!this.state.isPaused){\n        //this.dealFlop();\n        //this.dealTurn();\n        //this.dealRiver();\n        //this.finishHand();\n        //continue;\n        //}\n      } else {\n        alert(\"Please make sure game settings are valid.\");\n      }\n    };\n\n    this.dealNextHand = () => {\n      this.refs.btn.setAttribute(\"disabled\", \"disabled\");\n      this.dealHoleCards();\n    };\n\n    this.pauseGame = () => {\n      const pause = !this.state.isPaused;\n      this.setState({\n        isPaused: pause\n      });\n    };\n\n    this.dealHoleCards = () => {\n      this.setState({\n        dealFlop: false\n      }, () => {\n        this.setState({\n          dealTurn: false\n        }, () => {\n          this.setState({\n            dealRiver: false\n          }, () => {\n            this.setState({\n              showBotCards: false\n            }, () => {\n              this.componentDidMount();\n              const newPot = this.state.smallBlind + this.state.bigBlind;\n              const sb = this.state.smallBlind;\n              this.setState({\n                potSize: newPot\n              }, () => {\n                this.setState({\n                  betOutstanding: sb\n                }, () => {\n                  this.setState({\n                    finishedHand: false\n                  });\n                });\n              });\n            });\n\n            if (this.state.cards.length !== 0) {\n              const playerCards = this.state.cards.slice(0, 2);\n              const players = this.state.players;\n              players[0].playerCards = playerCards;\n              const botCards = this.state.cards.slice(2, 4);\n              players[1].botCards = botCards;\n              this.setState({\n                players\n              });\n              this.preFlopBetting();\n            }\n          });\n        });\n      });\n    };\n\n    this.preFlopBetting = () => {\n      const players = this.state.players;\n\n      if (players[0].position === 0) {\n        players[0].turn = true;\n        players[0].stackSize -= this.state.smallBlind;\n        players[0].betAmount = this.state.smallBlind;\n        players[1].betAmount = this.state.bigBlind;\n        players[1].stackSize -= this.state.bigBlind;\n        this.setState({\n          players\n        }); // while (this.state.betOutstanding !== 0){\n        //   if (players[0].position === 0) {\n        //     players[0].turn = true;\n        //     while (players[0].turn){\n        //       continue;\n        //     }\n        //     this.botAction();\n        //     break;\n        //   }\n        //   else {\n        //     this.botAction();\n        //     break;\n        //   }\n        // }\n      } else {\n        players[1].turn = true;\n        players[0].betAmount = this.state.bigBlind;\n        players[0].stackSize -= this.state.bigBlind;\n        players[1].betAmount = this.state.smallBlind;\n        players[1].stackSize -= this.state.smallBlind;\n        this.setState({\n          players\n        });\n        setTimeout(() => {\n          this.botAction();\n        }, 3000);\n      } //this.dealFlop();\n\n    };\n\n    this.dealNext = () => {\n      const players = this.state.players;\n      players[0].betAmount = 0;\n      players[1].betAmount = 0;\n      this.setState({\n        players\n      });\n      this.setState({\n        betOutstanding: 0\n      });\n      if (this.state.flop.length === 0) this.dealFlop();else if (this.state.turn.length === 0) this.dealTurn();else if (this.state.river.length === 0) this.dealRiver();else this.showDown();\n    };\n\n    this.dealFlop = () => {\n      this.resetBetAmount();\n      const flop = this.state.cards.slice(4, 7);\n      this.setState({\n        dealFlop: true\n      });\n      this.setState({\n        flop: flop\n      });\n    };\n\n    this.dealTurn = () => {\n      this.resetBetAmount();\n      const turn = this.state.cards.slice(7, 8);\n      this.setState({\n        dealTurn: true\n      });\n      this.setState({\n        turn: turn\n      });\n    };\n\n    this.dealRiver = () => {\n      this.resetBetAmount();\n      const river = this.state.cards.slice(8, 9);\n      this.setState({\n        dealRiver: true\n      });\n      this.setState({\n        river: river\n      });\n    };\n\n    this.showDown = () => {\n      this.setState({\n        showBotCards: true\n      }, () => {\n        this.setState({\n          finishedHand: true\n        }, () => {\n          this.finishHand();\n        });\n      });\n    };\n\n    this.finishHand = () => {\n      const players = this.state.players;\n\n      for (var i = 0; i < this.state.players.length; i++) {\n        players[i].turn = false;\n        players[i].position = 1 - players[i].position;\n      }\n\n      this.setState({\n        players\n      }, () => {\n        this.setState({\n          finishedHand: true\n        });\n      });\n    };\n\n    this.resetBetAmount = () => {\n      const players = this.state.players;\n\n      for (var i = 0; i < players.length; i++) {\n        players[i].betAmount = 0;\n      }\n\n      this.setState({\n        players\n      });\n    };\n\n    this.state = {\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      players: [{\n        id: 1,\n        name: \"Your name\",\n        stackSize: 1000,\n        viewText: false,\n        playerCards: [],\n        position: 0,\n        turn: false,\n        betAmount: 0\n      }, {\n        id: 2,\n        name: \"Bot\",\n        stackSize: 1000,\n        botCards: [],\n        position: 1,\n        turn: false,\n        betAmount: 0\n      }],\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0,\n      showBotCards: false,\n      finishedHand: false\n    };\n  }\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({\n      data\n    }) => data);\n    const cards = await axios.get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`).then(e => e.data.cards);\n    this.setState({\n      cards\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"HUPoker\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"b\", {\n            children: \"Game settings:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"sb\",\n            children: \"Small blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"sb\",\n            name: \"sb\",\n            defaultValue: \"5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"bb\",\n            children: \"Big blind:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"bb\",\n            name: \"bb\",\n            defaultValue: \"10\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateBlinds,\n            children: \"Update Blinds\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"ss\",\n            children: \"Stack size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"ss\",\n            name: \"ss\",\n            defaultValue: \"1000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 384,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-warning btn-sm m-2\",\n            onClick: this.updateStack,\n            children: \"Update Stack\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            ref: \"btn\",\n            onClick: this.startGame,\n            children: \"Start Game\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary btn-sm m-2\",\n            onClick: this.pauseGame,\n            children: \"Pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: this.state.finishedHand ? /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => this.dealNextHand(),\n              className: \"btn btn-primary btn-sm m-2\",\n              children: \"Deal Next Hand\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(Players, {\n          players: this.state.players,\n          onCheck: this.handleCheck,\n          onCall: this.handleCall,\n          onRaise: this.handleClickRaise,\n          onFold: this.handleFold,\n          onRaised: this.handleRaise\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          id: \"pot\",\n          children: \"Pot size: \" + this.state.potSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HoleCards, {\n        holeCards: this.state.players[0].playerCards\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        dealFlop: this.state.dealFlop,\n        dealTurn: this.state.dealTurn,\n        dealRiver: this.state.dealRiver,\n        flop: this.state.flop,\n        turn: this.state.turn,\n        river: this.state.river\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.showBotCards ? /*#__PURE__*/_jsxDEV(HoleCards, {\n          holeCards: this.state.players[1].botCards\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/bryan/Documents/HUPoker/src/App.js"],"names":["PlayerBanner","Players","React","Component","axios","Card","HoleCards","Board","API_URL","App","constructor","props","handleCheck","state","betOutstanding","players","position","turn","setState","setTimeout","botAction","dealNext","handleCall","stackSize","betAmount","newPotSize","potSize","handleClickRaise","viewText","handleRaise","amount","raiseAmount","parseInt","newBetOutstanding","handleFold","finishHand","updateBlinds","sb","document","getElementById","value","bb","smallBlind","bigBlind","updateStack","ss","startingStack","i","length","startGame","refs","btn","setAttribute","dealHoleCards","alert","dealNextHand","pauseGame","pause","isPaused","dealFlop","dealTurn","dealRiver","showBotCards","componentDidMount","newPot","finishedHand","cards","playerCards","slice","botCards","preFlopBetting","flop","river","showDown","resetBetAmount","id","name","data","get","then","deck_id","e","render"],"mappings":"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","sourcesContent":["import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport PlayerBanner from \"./components/playerBanner\";\nimport Players from \"./components/players\";\nimport React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Card from \"./components/card\";\nimport HoleCards from \"./components/holeCards\";\nimport Board from \"./components/board\";\n\nconst API_URL = \"https://deckofcardsapi.com/api/deck/new/shuffle/\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      smallBlind: 5,\n      bigBlind: 10,\n      startingStack: 1000,\n      players: [\n        {\n          id: 1,\n          name: \"Your name\",\n          stackSize: 1000,\n          viewText: false,\n          playerCards: [],\n          position: 0,\n          turn: false,\n          betAmount: 0,\n        },\n        {\n          id: 2,\n          name: \"Bot\",\n          stackSize: 1000,\n          botCards: [],\n          position: 1,\n          turn: false,\n          betAmount: 0,\n        },\n      ],\n      cards: [],\n      flop: [],\n      turn: [],\n      river: [],\n      potSize: 0,\n      isPaused: false,\n      dealFlop: false,\n      dealTurn: false,\n      dealRiver: false,\n      betOutstanding: 0,\n      showBotCards: false,\n      finishedHand: false,\n    };\n  }\n\n  async componentDidMount() {\n    const data = await axios.get(API_URL).then(({ data }) => data);\n\n    const cards = await axios\n      .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n      .then((e) => e.data.cards);\n\n    this.setState({ cards });\n  }\n\n  handleCheck = () => {\n    if (\n      this.state.betOutstanding === 0 &&\n      this.state.players[0].position === 1\n    ) {\n      const players = this.state.players;\n      players[0].turn = false;\n      players[1].turn = true;\n      this.setState({ players });\n      setTimeout(() => {\n        this.botAction()\n      }, 3000);\n    } else if (\n      this.state.betOutstanding === 0 &&\n      this.state.players[0].position === 0\n    ) {\n      const players = this.state.players;\n      players[0].turn = false;\n      players[1].turn = true;\n      this.setState({ players });\n      this.dealNext();\n      setTimeout(() => {\n        this.botAction()\n      }, 3000);\n    }\n  };\n\n  handleCall = () => {\n    if (this.state.betOutstanding !== 0) {\n      const players = this.state.players;\n      players[0].stackSize -= this.state.betOutstanding;\n      players[0].turn = false;\n      players[1].turn = true;\n      players[0].betAmount = players[1].betAmount;\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({ potSize: newPotSize }, () => {\n        this.setState({ betOutstanding: 0 }, () => {\n          this.dealNext();\n          setTimeout(() => {\n            this.botAction()\n          }, 3000);\n        });\n      });\n    }\n  };\n\n  handleClickRaise = () => {\n    const players = this.state.players;\n    players[0].viewText = !players[0].viewText;\n    this.setState({ players });\n  };\n\n  handleRaise = (amount) => {\n    const raiseAmount = parseInt(amount);\n    const players = this.state.players;\n    players[0].stackSize -= raiseAmount;\n    players[0].stackSize += players[0].betAmount;\n    players[0].viewText = !players[0].viewText;\n    players[0].turn = false;\n    players[1].turn = true;\n    const newBetOutstanding = raiseAmount - this.state.players[1].betAmount;\n    const newPotSize = this.state.potSize + raiseAmount - players[0].betAmount;\n    players[0].betAmount = raiseAmount;\n\n    this.setState({ betOutstanding: newBetOutstanding }, () => {\n      this.setState({ potSize: newPotSize }, () => {\n        this.setState({ players }, () => {\n          setTimeout(() => {\n            this.botAction()\n          }, 3000);\n        });\n      });\n    });\n  };\n\n  handleFold = () => {\n    const players = this.state.players;\n    players[0].turn = false;\n    players[1].stackSize += this.state.potSize;\n    this.setState({ players }, () => {\n      this.setState({ potSize: 0 }, () => {\n        this.finishHand();\n      });\n    });\n  };\n\n  updateBlinds = () => {\n    const sb = parseInt(document.getElementById(\"sb\").value);\n    const bb = parseInt(document.getElementById(\"bb\").value);\n    this.setState({ smallBlind: sb, bigBlind: bb });\n  };\n\n  updateStack = () => {\n    const ss = parseInt(document.getElementById(\"ss\").value);\n    this.setState({ startingStack: ss });\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].stackSize = ss;\n    }\n    this.setState({ players });\n  };\n\n  botAction = () => {\n    const players = this.state.players;\n    if (this.state.betOutstanding === 0 && players[1].position === 1) {\n      players[0].turn = true;\n      players[1].turn = false;\n      this.setState({ players });\n    } else if (this.state.betOutstanding === 0 && players[1].position === 0) {\n      players[0].turn = true;\n      players[1].turn = false;\n      this.setState({ players });\n      this.dealNext();\n    } else {\n      players[1].stackSize -= this.state.betOutstanding;\n      players[1].betAmount = players[0].betAmount;\n      players[0].turn = true;\n      const newPotSize = this.state.potSize + this.state.betOutstanding;\n      this.setState({ potSize: newPotSize });\n      this.setState({ players });\n      this.setState({ betOutstanding: 0 });\n      this.dealNext();\n    }\n  };\n\n  startGame = () => {\n    this.refs.btn.setAttribute(\"disabled\", \"disabled\");\n    if (\n      this.state.bigBlind > this.state.smallBlind &&\n      this.state.startingStack >= this.state.bigBlind\n    ) {\n      this.dealHoleCards();\n      //while (!this.state.isPaused){\n\n      //this.dealFlop();\n      //this.dealTurn();\n      //this.dealRiver();\n      //this.finishHand();\n      //continue;\n\n      //}\n    } else {\n      alert(\"Please make sure game settings are valid.\");\n    }\n  };\n\n  dealNextHand = () => {\n    this.refs.btn.setAttribute(\"disabled\", \"disabled\");\n    this.dealHoleCards();\n  };\n\n  pauseGame = () => {\n    const pause = !this.state.isPaused;\n    this.setState({ isPaused: pause });\n  };\n\n  // getDeck = async () => {\n  //   const data = await axios.get(API_URL).then(({ data }) => data);\n\n  //   const cards = await axios\n  //     .get(`https://deckofcardsapi.com/api/deck/${data.deck_id}/draw/?count=52`)\n  //     .then((e) => e.data.cards);\n\n  //   this.setState({ cards });\n  // };\n\n  dealHoleCards = () => {\n    this.setState({ dealFlop: false }, () => {\n      this.setState({ dealTurn: false }, () => {\n        this.setState({ dealRiver: false }, () => {\n          this.setState({ showBotCards: false }, () => {\n            this.componentDidMount();\n            const newPot = this.state.smallBlind + this.state.bigBlind;\n            const sb = this.state.smallBlind;\n            this.setState({ potSize: newPot }, () => {\n              this.setState({ betOutstanding: sb }, () => {\n                this.setState({finishedHand: false});\n                });\n              });\n            });\n\n            if (this.state.cards.length !== 0) {\n              const playerCards = this.state.cards.slice(0, 2);\n              const players = this.state.players;\n              players[0].playerCards = playerCards;\n\n              const botCards = this.state.cards.slice(2, 4);\n              players[1].botCards = botCards;\n\n              this.setState({ players });\n\n              this.preFlopBetting();\n            }\n          });\n        });\n      });\n  };\n\n  preFlopBetting = () => {\n    const players = this.state.players;\n    if (players[0].position === 0) {\n      players[0].turn = true;\n      players[0].stackSize -= this.state.smallBlind;\n      players[0].betAmount = this.state.smallBlind;\n      players[1].betAmount = this.state.bigBlind;\n      players[1].stackSize -= this.state.bigBlind;\n      this.setState({ players });\n      // while (this.state.betOutstanding !== 0){\n      //   if (players[0].position === 0) {\n      //     players[0].turn = true;\n      //     while (players[0].turn){\n      //       continue;\n      //     }\n      //     this.botAction();\n      //     break;\n      //   }\n      //   else {\n      //     this.botAction();\n      //     break;\n      //   }\n      // }\n    } else {\n      players[1].turn = true;\n      players[0].betAmount = this.state.bigBlind;\n      players[0].stackSize -= this.state.bigBlind;\n      players[1].betAmount = this.state.smallBlind;\n      players[1].stackSize -= this.state.smallBlind;\n      this.setState({ players });\n      setTimeout(() => {\n        this.botAction()\n      }, 3000);\n    }\n\n    //this.dealFlop();\n  };\n\n  dealNext = () => {\n    const players = this.state.players;\n    players[0].betAmount = 0;\n    players[1].betAmount = 0;\n    this.setState({ players });\n    this.setState({ betOutstanding: 0 });\n    if (this.state.flop.length === 0) this.dealFlop();\n    else if (this.state.turn.length === 0) this.dealTurn();\n    else if (this.state.river.length === 0) this.dealRiver();\n    else this.showDown();\n  };\n\n  dealFlop = () => {\n    this.resetBetAmount();\n    const flop = this.state.cards.slice(4, 7);\n    this.setState({ dealFlop: true });\n    this.setState({ flop: flop });\n  };\n\n  dealTurn = () => {\n    this.resetBetAmount();\n    const turn = this.state.cards.slice(7, 8);\n    this.setState({ dealTurn: true });\n    this.setState({ turn: turn });\n  };\n\n  dealRiver = () => {\n    this.resetBetAmount();\n    const river = this.state.cards.slice(8, 9);\n    this.setState({ dealRiver: true });\n    this.setState({ river: river });\n  };\n\n  showDown = () => {\n    this.setState({ showBotCards: true }, () => {\n      this.setState({ finishedHand: true }, () => {\n        this.finishHand();\n      });\n    });\n  };\n\n  finishHand = () => {\n    const players = this.state.players;\n    for (var i = 0; i < this.state.players.length; i++) {\n      players[i].turn = false;\n      players[i].position = 1 - players[i].position;\n    }\n    this.setState({ players }, () => {\n      this.setState({ finishedHand: true });\n    });\n  };\n\n  resetBetAmount = () => {\n    const players = this.state.players;\n    for (var i = 0; i < players.length; i++) {\n      players[i].betAmount = 0;\n    }\n    this.setState({ players });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <header>\n          <h1>HUPoker</h1>\n          <div>\n            <b>Game settings:</b>\n            <br></br>\n            <label htmlFor=\"sb\">Small blind:</label>\n            <input type=\"text\" id=\"sb\" name=\"sb\" defaultValue=\"5\"></input>\n            <br></br>\n            <label htmlFor=\"bb\">Big blind:</label>\n            <input type=\"text\" id=\"bb\" name=\"bb\" defaultValue=\"10\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateBlinds}\n            >\n              Update Blinds\n            </button>\n            <br></br>\n            <label htmlFor=\"ss\">Stack size:</label>\n            <input type=\"text\" id=\"ss\" name=\"ss\" defaultValue=\"1000\"></input>\n            <br></br>\n            <button\n              className=\"btn btn-warning btn-sm m-2\"\n              onClick={this.updateStack}\n            >\n              Update Stack\n            </button>\n            <br></br>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              ref=\"btn\"\n              onClick={this.startGame}\n            >\n              Start Game\n            </button>\n            <button\n              className=\"btn btn-primary btn-sm m-2\"\n              onClick={this.pauseGame}\n            >\n              Pause\n            </button>\n            <span>\n              {this.state.finishedHand ? (\n                <button\n                  onClick={() => this.dealNextHand()}\n                  className=\"btn btn-primary btn-sm m-2\"\n                >\n                  Deal Next Hand\n                </button>\n              ) : null}\n            </span>\n          </div>\n        </header>\n        <main className=\"container\">\n          <Players\n            players={this.state.players}\n            onCheck={this.handleCheck}\n            onCall={this.handleCall}\n            onRaise={this.handleClickRaise}\n            onFold={this.handleFold}\n            onRaised={this.handleRaise}\n          />\n          <p id=\"pot\">{\"Pot size: \" + this.state.potSize}</p>\n        </main>\n        <HoleCards holeCards={this.state.players[0].playerCards}></HoleCards>\n        <Board\n          dealFlop={this.state.dealFlop}\n          dealTurn={this.state.dealTurn}\n          dealRiver={this.state.dealRiver}\n          flop={this.state.flop}\n          turn={this.state.turn}\n          river={this.state.river}\n        ></Board>\n        <div>\n          {this.state.showBotCards ? (\n            <HoleCards holeCards={this.state.players[1].botCards}></HoleCards>\n          ) : null}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}