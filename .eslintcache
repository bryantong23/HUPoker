[{"/Users/bryan/Documents/HUPoker/src/index.js":"1","/Users/bryan/Documents/HUPoker/src/reportWebVitals.js":"2","/Users/bryan/Documents/HUPoker/src/App.js":"3","/Users/bryan/Documents/HUPoker/src/components/playerBanner.jsx":"4","/Users/bryan/Documents/HUPoker/src/components/players.jsx":"5","/Users/bryan/Documents/HUPoker/src/components/card.jsx":"6","/Users/bryan/Documents/HUPoker/src/components/holeCards.jsx":"7","/Users/bryan/Documents/HUPoker/src/components/board.jsx":"8","/Users/bryan/Documents/HUPoker/src/components/hand.jsx":"9","/Users/bryan/Documents/HUPoker/src/components/HandEvaluator.js":"10"},{"size":543,"mtime":1607022090988,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":1606943944805,"results":"13","hashOfConfig":"12"},{"size":20630,"mtime":1607722548191,"results":"14","hashOfConfig":"12"},{"size":2758,"mtime":1607651583985,"results":"15","hashOfConfig":"12"},{"size":663,"mtime":1607463400440,"results":"16","hashOfConfig":"12"},{"size":365,"mtime":1607651375347,"results":"17","hashOfConfig":"12"},{"size":380,"mtime":1607463372677,"results":"18","hashOfConfig":"12"},{"size":733,"mtime":1607463363096,"results":"19","hashOfConfig":"12"},{"size":10928,"mtime":1607715580154,"results":"20","hashOfConfig":"12"},{"size":10898,"mtime":1607721962907,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"13n84by",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/bryan/Documents/HUPoker/src/index.js",[],["44","45"],"/Users/bryan/Documents/HUPoker/src/reportWebVitals.js",[],"/Users/bryan/Documents/HUPoker/src/App.js",["46","47","48","49","50","51","52","53","54","55","56","57","58"],"/Users/bryan/Documents/HUPoker/src/components/playerBanner.jsx",[],"/Users/bryan/Documents/HUPoker/src/components/players.jsx",[],"/Users/bryan/Documents/HUPoker/src/components/card.jsx",[],"/Users/bryan/Documents/HUPoker/src/components/holeCards.jsx",[],"/Users/bryan/Documents/HUPoker/src/components/board.jsx",[],"/Users/bryan/Documents/HUPoker/src/components/hand.jsx",["59","60","61","62","63","64","65","66","67","68"],"import React, { Component } from \"react\";\nimport {\n  evaluateHoleCards,\n  evaluateFiveCardHand,\n  evaluateFlop,\n  evaluateRiver,\n  evaluateTurn,\n  isRoyalFlush,\n  isStraightFlush,\n  isFourOfAKind,\n  isFullHouse,\n  isFlush,\n  isStraight,\n  isTrips,\n  isTwoPair,\n  isPair,\n} from \"./HandEvaluator.js\";\n\n// Component to represent each player's hand\nclass Hand extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      holeCards: this.props.holeCards,\n      flop: this.props.flop,\n      turn: this.props.turn,\n      river: this.props.river,\n      values: [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\", \"J\", \"Q\", \"K\", \"A\"],\n      rank: [\n        \"High card\",\n        \"Pair\",\n        \"Two pair\",\n        \"Three of a kind\",\n        \"Straight\",\n        \"Flush\",\n        \"Full House\",\n        \"Four of a kind\",\n        \"Straight Flush\",\n        \"Royal Flush\",\n      ],\n    };\n  }\n\n  // Evaluate strength of hole cards\n  // evaluateHoleCards = (holeCards) => {\n  //   var card1 = holeCards[0].code;\n  //   var card2 = holeCards[1].code;\n  //   if (card1.substring(0, 1) === card2.substring(0, 1)) return \"Pair\";\n  //   else {\n  //     return \"High card\";\n  //   }\n  // };\n\n  // // Evaluate any given 5 card hand\n  // evaluateFiveCardHand = (cards) => {\n  //   if (this.isRoyalFlush(cards)) return 9;\n  //   if (this.isStraightFlush(cards)) return 8;\n  //   if (this.isFourOfAKind(cards)) return 7;\n  //   if (this.isFullHouse(cards)) return 6;\n  //   if (this.isFlush(cards)) return 5;\n  //   if (this.isStraight(cards)) return 4;\n  //   if (this.isTrips(cards)) return 3;\n  //   if (this.isTwoPair(cards)) return 2;\n  //   if (this.isPair(cards)) return 1;\n  //   else return 0;\n  // };\n\n  // // Evaluate hand after flop\n  // evaluateFlop = (holeCards, flop) => {\n  //   var cards = [];\n  //   for (var i = 0; i < holeCards.length; i++) {\n  //     cards.push(holeCards[i].code);\n  //   }\n  //   for (var j = 0; j < flop.length; j++) {\n  //     cards.push(flop[j].code);\n  //   }\n  //   return this.state.rank[this.evaluateFiveCardHand(cards)];\n  // };\n\n  // // Evaluate hand after turn\n  // evaluateTurn = (holeCards, flop, turn) => {\n  //   var cards = [];\n  //   for (var i = 0; i < holeCards.length; i++) {\n  //     cards.push(holeCards[i].code);\n  //   }\n  //   for (var j = 0; j < flop.length; j++) {\n  //     cards.push(flop[j].code);\n  //   }\n  //   cards.push(turn[0].code);\n  //   // Loop through possible 5 hand combos and return hand with highest strength\n  //   var high = 0;\n  //   for (var k = 0; k < 6; k++) {\n  //     var tempCards = cards.slice();\n  //     tempCards.splice(k, 1);\n  //     if (this.evaluateFiveCardHand(tempCards) > high)\n  //       high = this.evaluateFiveCardHand(tempCards);\n  //   }\n  //   return this.state.rank[high];\n  // };\n\n  // // Evaluate hand after river\n  // evaluateRiver = (holeCards, flop, turn, river) => {\n  //   var cards = [];\n  //   for (var i = 0; i < holeCards.length; i++) {\n  //     cards.push(holeCards[i].code);\n  //   }\n  //   for (var j = 0; j < flop.length; j++) {\n  //     cards.push(flop[j].code);\n  //   }\n  //   cards.push(turn[0].code);\n  //   cards.push(river[0].code);\n  //   var high = 0;\n  //   // Loop through possible 5 hand combos and return hand with highest strength\n  //   for (var k = 0; k < cards.length - 1; k++) {\n  //     for (var l = 1; l < cards.length; l++) {\n  //       var tempCards = cards.slice();\n  //       tempCards.splice(k, 1);\n  //       tempCards.splice(l - 1, 1);\n  //       if (this.evaluateFiveCardHand(tempCards) > high)\n  //         high = this.evaluateFiveCardHand(tempCards);\n  //     }\n  //   }\n  //   return this.state.rank[high];\n  // };\n\n  // // Check if given cards represent a royal flush\n  // isRoyalFlush(cards) {\n  //   // Must be a straight flush and contain an Ace and 10\n  //   if (this.isStraightFlush(cards)) {\n  //     for (var i = 0; i < cards.length; i++) {\n  //       if (cards[i].includes(\"A\")) {\n  //         for (var j = 0; j < cards.length; j++) {\n  //           if (cards[j].includes(\"0\")) {\n  //             return true;\n  //           }\n  //         }\n  //       }\n  //     }\n  //   }\n  //   return false;\n  // }\n\n  // // Check if given cards represent a straight flush\n  // isStraightFlush(cards) {\n  //   // Must be a straight and a flush\n  //   if (this.isFlush(cards) && this.isStraight(cards)) {\n  //     return true;\n  //   }\n  //   return false;\n  // }\n\n  // // Check if given cards represent a four of a kind\n  // isFourOfAKind(cards) {\n  //   // Add all the values of the cards to array 'vals'\n  //   var vals = [];\n  //   for (var i = 0; i < cards.length; i++) {\n  //     vals.push(cards[i].substr(0, 1));\n  //   }\n  //   // Create a set from array 'vals'\n  //   var set = new Set(vals);\n  //   // Can only be four of a kind if size of set is 2\n  //   if (set.size === 2) {\n  //     var uniqueVals = Array.from(set);\n  //     // If one of the elements occurs 4 times then it is four of a kind\n  //     for (var k = 0; k < uniqueVals.length; k++) {\n  //       var valCount = 0;\n  //       for (var j = 0; j < vals.length; j++) {\n  //         if (vals[j] === uniqueVals[k]) valCount++;\n  //         if (valCount === 4) {\n  //           return true;\n  //         }\n  //       }\n  //     }\n  //   }\n  //   return false;\n  // }\n\n  // // Check if given cards represent a full house\n  // isFullHouse(cards) {\n  //   // Add all the values of the cards to array 'vals'\n  //   var vals = [];\n  //   for (var i = 0; i < cards.length; i++) {\n  //     vals.push(cards[i].substr(0, 1));\n  //   }\n  //   // Create a set from array 'vals'\n  //   var set = new Set(vals);\n  //   // Can only be full house if size of set is 2\n  //   if (set.size === 2) {\n  //     var uniqueVals = Array.from(set);\n  //     // If one of the elements occurs 3 times then it is full house\n  //     for (var k = 0; k < uniqueVals.length; k++) {\n  //       var valCount = 0;\n  //       for (var j = 0; j < vals.length; j++) {\n  //         if (vals[j] === uniqueVals[k]) valCount++;\n  //         if (valCount === 3) {\n  //           return true;\n  //         }\n  //       }\n  //     }\n  //   }\n  //   return false;\n  // }\n\n  // // Check if given cards represent a flush\n  // isFlush(cards) {\n  //   // Add all suits of the cards to array 'suits'\n  //   var suits = [];\n  //   for (var i = 0; i < cards.length; i++) {\n  //     suits.push(cards[i].substr(1));\n  //   }\n  //   // Create a set from array 'suits'\n  //   var set = new Set(suits);\n  //   // Can only be flush if size of set is 1\n  //   if (set.size === 1) {\n  //     return true;\n  //   } else return false;\n  // }\n\n  // // Check if given cards represent a straight\n  // isStraight(cards) {\n  //   // Add indices of values of all cards to array 'indices'\n  //   var indices = [];\n  //   for (var i = 0; i < cards.length; i++) {\n  //     indices.push(this.state.values.indexOf(cards[i].substr(0, 1)));\n  //   }\n  //   // Sort 'indices'\n  //   indices.sort(function (a, b) {\n  //     return a - b;\n  //   });\n  //   // Check if it is a wheel straight\n  //   var wheel = [0, 1, 2, 3, 12];\n  //   if (\n  //     indices.length === wheel.length &&\n  //     indices.every((value, index) => value === wheel[index])\n  //   ) {\n  //     return true;\n  //   }\n  //   // If not a wheel straight determine if it's a regular straight\n  //   // In order to be a regular straight value at index + 1 must be 1 greater than value at index\n  //   for (var j = 0; j < indices.length - 1; j++) {\n  //     if (indices[j] + 1 !== indices[j + 1]) return false;\n  //   }\n  //   return true;\n  // }\n\n  // // Check if given cards represent trips\n  // isTrips(cards) {\n  //   // Add all the values of the cards to array 'vals'\n  //   var vals = [];\n  //   for (var k = 0; k < cards.length; k++) {\n  //     vals.push(cards[k].substr(0, 1));\n  //   }\n  //   // Create a set from array 'vals'\n  //   var set = new Set(vals);\n  //   // Can only be trips if size of set is 3\n  //   if (set.size === 3) {\n  //     var uniqueVals = Array.from(set);\n  //     // If one of the elements occurs 3 times then it is trips\n  //     for (var i = 0; i < uniqueVals.length; i++) {\n  //       var valCount = 0;\n  //       for (var j = 0; j < vals.length; j++) {\n  //         if (vals[j] === uniqueVals[i]) valCount++;\n  //         if (valCount === 3) {\n  //           return true;\n  //         }\n  //       }\n  //     }\n  //   }\n  //   return false;\n  // }\n\n  // // Check if given cards represent two pair\n  // isTwoPair(cards) {\n  //   // Add all the values of the cards to array 'vals'\n  //   var vals = [];\n  //   for (var i = 0; i < cards.length; i++) {\n  //     vals.push(cards[i].substr(0, 1));\n  //   }\n  //   // Create a set from array 'vals'\n  //   var set = new Set(vals);\n  //   // Can only be two pair of size of set is 3\n  //   if (set.size === 3) {\n  //     // Since we already checked for trips in function that called this function, the only other hand with set of size 3 is two pair\n  //     return true;\n  //   }\n  //   return false;\n  // }\n\n  // // Check if given cards represent a pair\n  // isPair(cards) {\n  //   // Add all the values of the cards to array 'vals'\n  //   var vals = [];\n  //   for (var i = 0; i < cards.length; i++) {\n  //     vals.push(cards[i].substr(0, 1));\n  //   }\n  //   // Create a set from array 'vals'\n  //   var set = new Set(vals);\n  //   // Can only be a pair of size of set is 4\n  //   if (set.size === 4) {\n  //     return true;\n  //   }\n  //   return false;\n  // }\n\n  // Method to display hand strength\n  displayHand = (\n    dealHoleCards,\n    dealFlop,\n    dealTurn,\n    dealRiver,\n    holeCards,\n    flop,\n    turn,\n    river\n  ) => {\n    // If hole cards haven't been dealt yet don't display anything\n    if (!dealHoleCards) return null;\n    // If flop hasn't been dealt yet only evaluate hole cards\n    else if (!dealFlop) {\n      return evaluateHoleCards(holeCards);\n    }\n    // If turn hasn't been dealt yet only evaluate hole cards and flop\n    else if (!dealTurn) {\n      return evaluateFlop(holeCards, flop)[0];\n    }\n    // If river hasn't been dealt yet only evaluate hole cards, flop, and turn\n    else if (!dealRiver) {\n      return evaluateTurn(holeCards, flop, turn)[0];\n    }\n    // Otherwise evaluate all cards\n    else {\n      return evaluateRiver(holeCards, flop, turn, river)[0];\n    }\n  };\n\n  render() {\n    const {\n      dealHoleCards,\n      dealFlop,\n      dealTurn,\n      dealRiver,\n      holeCards,\n      flop,\n      turn,\n      river,\n    } = this.props;\n    return (\n      <React.Fragment>\n        <span>\n          {dealHoleCards ? (\n            <p>\n              {this.displayHand(\n                dealHoleCards,\n                dealFlop,\n                dealTurn,\n                dealRiver,\n                holeCards,\n                flop,\n                turn,\n                river\n              )}\n            </p>\n          ) : null}\n        </span>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Hand;\n","/Users/bryan/Documents/HUPoker/src/components/HandEvaluator.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":9,"column":3,"nodeType":"75","messageId":"76","endLine":9,"endColumn":20},{"ruleId":"73","severity":1,"message":"77","line":10,"column":3,"nodeType":"75","messageId":"76","endLine":10,"endColumn":23},{"ruleId":"73","severity":1,"message":"78","line":11,"column":3,"nodeType":"75","messageId":"76","endLine":11,"endColumn":15},{"ruleId":"73","severity":1,"message":"79","line":13,"column":3,"nodeType":"75","messageId":"76","endLine":13,"endColumn":15},{"ruleId":"73","severity":1,"message":"80","line":14,"column":3,"nodeType":"75","messageId":"76","endLine":14,"endColumn":15},{"ruleId":"73","severity":1,"message":"81","line":15,"column":3,"nodeType":"75","messageId":"76","endLine":15,"endColumn":18},{"ruleId":"73","severity":1,"message":"82","line":16,"column":3,"nodeType":"75","messageId":"76","endLine":16,"endColumn":16},{"ruleId":"73","severity":1,"message":"83","line":17,"column":3,"nodeType":"75","messageId":"76","endLine":17,"endColumn":14},{"ruleId":"73","severity":1,"message":"84","line":18,"column":3,"nodeType":"75","messageId":"76","endLine":18,"endColumn":10},{"ruleId":"73","severity":1,"message":"85","line":19,"column":3,"nodeType":"75","messageId":"76","endLine":19,"endColumn":13},{"ruleId":"73","severity":1,"message":"86","line":20,"column":3,"nodeType":"75","messageId":"76","endLine":20,"endColumn":10},{"ruleId":"73","severity":1,"message":"87","line":21,"column":3,"nodeType":"75","messageId":"76","endLine":21,"endColumn":12},{"ruleId":"73","severity":1,"message":"88","line":22,"column":3,"nodeType":"75","messageId":"76","endLine":22,"endColumn":9},{"ruleId":"73","severity":1,"message":"77","line":4,"column":3,"nodeType":"75","messageId":"76","endLine":4,"endColumn":23},{"ruleId":"73","severity":1,"message":"80","line":8,"column":3,"nodeType":"75","messageId":"76","endLine":8,"endColumn":15},{"ruleId":"73","severity":1,"message":"81","line":9,"column":3,"nodeType":"75","messageId":"76","endLine":9,"endColumn":18},{"ruleId":"73","severity":1,"message":"82","line":10,"column":3,"nodeType":"75","messageId":"76","endLine":10,"endColumn":16},{"ruleId":"73","severity":1,"message":"83","line":11,"column":3,"nodeType":"75","messageId":"76","endLine":11,"endColumn":14},{"ruleId":"73","severity":1,"message":"84","line":12,"column":3,"nodeType":"75","messageId":"76","endLine":12,"endColumn":10},{"ruleId":"73","severity":1,"message":"85","line":13,"column":3,"nodeType":"75","messageId":"76","endLine":13,"endColumn":13},{"ruleId":"73","severity":1,"message":"86","line":14,"column":3,"nodeType":"75","messageId":"76","endLine":14,"endColumn":10},{"ruleId":"73","severity":1,"message":"87","line":15,"column":3,"nodeType":"75","messageId":"76","endLine":15,"endColumn":12},{"ruleId":"73","severity":1,"message":"88","line":16,"column":3,"nodeType":"75","messageId":"76","endLine":16,"endColumn":9},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'evaluateHoleCards' is defined but never used.","Identifier","unusedVar","'evaluateFiveCardHand' is defined but never used.","'evaluateFlop' is defined but never used.","'evaluateTurn' is defined but never used.","'isRoyalFlush' is defined but never used.","'isStraightFlush' is defined but never used.","'isFourOfAKind' is defined but never used.","'isFullHouse' is defined but never used.","'isFlush' is defined but never used.","'isStraight' is defined but never used.","'isTrips' is defined but never used.","'isTwoPair' is defined but never used.","'isPair' is defined but never used.","no-global-assign","no-unsafe-negation"]